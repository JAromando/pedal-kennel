[global]
instructor = Instructor
tester = Brend
gpt_model = gpt-4-0613
gpt_prompt = [
	  {
	    "feedback": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "user",
	          "content": "{{STUDENT_CODE_HERE}}"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "feedback": {
	              "type": "string",
	              "description": "Helpful tips to guide a student with their problematic code."
	            },
	            "is_error_present": {
	              "type": "boolean",
	              "description": "If there is a problem with the code, this parameter is true."
	            }
	          },
	          "required": [
	            "feedback",
	            "is_error_present"
	          ]
	        }
	      },
	      2.0,
	      0.0
	    ]
	  },
	  "<function get_prompts_getter.<locals>.get_default_prompts.<locals>.process_prompts at 0x000001938963D760>"
	]
gpt_prompt_approximate_length = 409

[bakery_for_composition_code_highest_filter]
description = Define the function `high_score` that consumes a list of integers (representing scores in a game) and produces an integer representing the highest score in the list. Ignore scores less than `100`, and stop processing values if you encounter `-999`. If the list is empty, return the value `None` instead. It is up to you to decompose this function (or not) however you want.

[bakery_for_composition_code_highest_filter.Beedrill_29030778.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: [int]) -> int:
	    if [i for i in scores if i >= 100] == []:
	        return None
	    to_return = 100
	    for score in scores:
	        if score == -999:
	            break
	        elif score >= to_return:
	            to_return = score
	    return to_return
	
	
	assert_equal(high_score([98, 100, 99, 101, -999, 102]), 101)
	assert_equal(high_score([]), None)
	assert_equal(high_score([70]), None)
gpt_feedback = Your function seems to be working correctly for most cases, but it will fail if the highest score is after -999 in the list. The -999 seems to be used as a sentinel value to stop the loop, but it should not affect the calculation of the highest score. You might want to reconsider how you're using this value in your function.
gpt_feedback_length = 62
gpt_score = 0.0
pedal_feedback = Student code failed instructor tests.
	You passed 6/8 tests.
	
	I ran your function <code class='pedal-name'>high_score</code> on some new arguments.
	<table class='pedal-table'>   <tr class='pedal-header'>
	    <th class='pedal-cell'></th>
	    <th class='pedal-cell'>Arguments</th>
	    <th class='pedal-cell'>Returned</th>
	    <th class='pedal-cell'>Expected</th>
	  </tr>     <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[100, 200, 300, -999]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[300, 200, 100, -999]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[300, 200, -999, 500, 400]</code></pre></td>
	    <td class='pedal-cell'>300</td>
	    <td class='pedal-cell'>300</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[400, 200, -999, 100, 200]</code></pre></td>
	    <td class='pedal-cell'>400</td>
	    <td class='pedal-cell'>400</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-negative-mark'>&#10060;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[-999, 400, 300, 50]</code></pre></td>
	    <td class='pedal-cell'>100</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[-999]</code></pre></td>
	    <td class='pedal-cell'>None</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-negative-mark'>&#10060;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[20, 40, 30, -999, 100]</code></pre></td>
	    <td class='pedal-cell'>100</td>
	    <td class='pedal-cell'>None</td>
	  </tr>
	  <tr class='pedal-row'>
	    <td class='pedal-cell'><span class='pedal-positive-mark'>&#10004;</span></td>
	    <td class='pedal-cell'><pre class='pedal-python-code python'><code>[50, 200, -999, 50]</code></pre></td>
	    <td class='pedal-cell'>200</td>
	    <td class='pedal-cell'>200</td>
	  </tr></table>
pedal_feedback_length = 295
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_for_composition_code_highest_filter.Buizel_29317817.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: list[int]) -> int:
	    high = scores[0]
	    for score in scores:
	        if score > high:
	            high = score
	    return high
gpt_feedback = Your function seems to be working correctly. It correctly initializes the high score to the first score in the list, then iterates through the list to find the highest score. However, you could make your code more Pythonic and efficient by using the built-in max() function, which returns the largest item in an iterable or the largest of two or more arguments.
gpt_feedback_length = 62
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_for_composition_code_highest_filter.Darumaka_29509864.py]
student_code = 
	from bakery import assert_equal
	
	
	def high_score (scores:list[int])->int:
	    maximum=score[0]
	    for score in scores:
	        if score > maximum:
	            if score < 100:
	                return None 
	            maximum=score
	    return maximum
	
	assert_equal(high_score([500,50]), 500)
gpt_feedback = There seems to be a small mistake in your code. You are trying to access the variable 'score' before it is defined. You probably meant to use 'scores[0]' instead of 'score[0]'. Also, the condition 'if score < 100' inside the loop might not be necessary if you want to find the maximum score. It will return None if any score in the list is less than 100, which might not be the intended behavior.
gpt_feedback_length = 74
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>score</code> was used on line 5, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_for_composition_code_highest_filter.Elgyem_27313994.py]
student_code = 
	from bakery import assert_equal
	def high_score(scores: [int])->int:
	
	max_num = scores[0]
	
	mini = 100
	
	empty_list = []
	
	if scores == empty_list:
	    return None
	for score in scores:
	    if score==-999:
	        return max_num
	    if score < mini:
	        continue
	    if score == -999:
	        break
	    if score > max_num:
	        max_num = score
	        return max_num
	
	assert_equal(high_score([300, 40, 200, 150]), 300)
	
	assert_equal(high_score([50, 100, 400, -999]), 400)
	
	assert_equal(high_score([600, 800,]), 800)
	
	assert_equal(high_score([300, 200, -999, 400]), 300)
gpt_feedback = Your function seems to be returning the maximum number prematurely. The 'return' statement should be outside the for loop, not inside it. Also, the condition 'if score == -999:' is redundant as you have already checked for this condition earlier in the loop. Lastly, the 'mini' variable and the condition 'if score < mini:' seem to be unnecessary as they are not contributing to the functionality of the function.
gpt_feedback_length = 69
gpt_score = 0.0
pedal_feedback = Bad indentation on line 4 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Elgyem_27313994.py</code>
	<pre class='pedal-python-code python'><code>max_num = scores[0]
	^</code></pre>
	</div>
	Expected an indented block after function definition on line 2.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 44
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_for_composition_code_highest_filter.Girafarig_28396215.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(scores: list[int]) -> int:
	    if not scores:
	        return None
	    highest_score = scores[0]
	    taking = True
	    for score in scores:
	        if -999 == score:
	            taking = False
	        elif taking and score >= 100 and score > highest_score:
	            highest_score = score
	    if highest_score < 100:
	        return None
	    return highest_score
	
	assert_equal(high_score([101, 150, 175, -10, 53]), 175)
	assert_equal(high_score([52, 63]), None)
	assert_equal(high_score([105, -999, 175, -10, 53]), 105)
	assert_equal(high_score([]), None)
gpt_feedback = Your code seems to be working fine. It correctly handles the edge cases such as an empty list and scores less than 100. It also correctly stops considering scores after encountering -999. Good job!
gpt_feedback_length = 34
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_for_composition_code_highest_filter.Lapras_28139989.py]
student_code = 
	from bakery import assert_equal
	def high_score(List:list[int])-> int:
	    max = List[0]
	    cont_count = True
	    for nums in List:
	        if nums == -999:
	            cont_count = False
	            if nums >=100:
	                max = nums
	    return max
	
	assert_equal(high_score([150, -999, 200]), 150)
gpt_feedback = Your function seems to be checking if the number is -999 and then immediately checking if it's greater than or equal to 100. This logic is flawed because -999 will never be greater than or equal to 100. Also, your function is not updating the maximum value correctly. You should update the maximum value only when 'cont_count' is True and the current number is greater than the current maximum.
gpt_feedback_length = 69
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>cont_count</code> was given a value on line 6, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_for_composition_code_highest_filter.Liepard_28823730.py]
student_code = 
	from bakery import assert_equal
	
	def high_score(integers: list[int]) -> int:
	    highest = integers[0]
	    if len(integers) > 0:
	        for integer in integers:
	            if integer == -999:
	                return None
	            if integer >= 100:
	                if highest < integer:
	                    highest = integer
	        return highest
gpt_feedback = Your function seems to be on the right track, but there are a few things you might want to reconsider. First, you're checking if the length of the list is greater than 0 after you've already accessed the first element of the list. This could lead to an error if the list is empty. You should check if the list is empty before trying to access any elements. Second, your function returns None if it encounters -999 in the list. Is this the intended behavior? If not, you might want to revise this part of your code.
gpt_feedback_length = 97
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_for_composition_code_highest_filter.Nosepass_28623443.py]
student_code = 
	from bakery import assert_equal
	
	def filter_scores(scores: list[int])->list[int]:
	    #filter the scores
	    New_Scores = []
	    for score in scores:
	        if score == -999:
	            return New_Scores
	        if score > 100:
	            New_Scores.append(score)
	    return New_Scores
	
	def high_score(raw_scores: list[int])->int:
	    scores = filter_scores(raw_scores)
	    if not scores:
	        return None
	    max_s = scores[0]
	    for score in score:
	        if score > max_s:
	    return max_s
	
	assert_equal(filter_scores([1,-999,300]),[])
	assert_equal(filter_scores([1,300,500]),[300,500])
	assert_equal(filter_scores([1000,300,101]),[1000,300,101])
	
	assert_equal(high_score([1,-999,300]),None)
	assert_equal(high_score([300,200,3000]),3000)
	assert_equal(high_score([101,3,54]),101)
gpt_feedback = There are a few issues with your code. In the 'high_score' function, you are iterating over 'score' which is not defined. You probably meant to iterate over 'scores'. Also, you have an indentation error in the same function. The 'return max_s' statement should be indented properly under the 'if' statement. Lastly, in the 'filter_scores' function, you are filtering scores greater than 100, but your test cases include scores equal to or less than 100. You might want to revise your condition or your test cases.
gpt_feedback_length = 85
gpt_score = 0.0
pedal_feedback = Bad indentation on line 20 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 20 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Nosepass_28623443.py</code>
	<pre class='pedal-python-code python'><code>    return max_s
	   ^</code></pre>
	</div>
	Expected an indented block after 'if' statement on line 19.
	Suggestion: Check line 20, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 50
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_for_composition_code_highest_filter.Nuzleaf_32379968.py]
student_code = 
	from bakery import assert_equal
	
	def no_less_than_100(numbers:list[int])->list[int]:
	    stitch=[]
	    for number in numbers:
	        if number>=100:
	            stitch.append(number)
	    return stitch
	
	def maximum(numbers:list[int])->int:
	    purple=numbers[0]
	    for number in numbers:
	        if purple<number:
	            purple=number
	    return purple
	
	def
	        
	def high_score(numbers:list[int])->int:
	    x=no_less_than_100(numbers)
	    if not numbers:
	        return None   
	    taking=True
	    lilo=[]
	    for number in x:
	    if number==-999:
	        taking=False
	    elif taking:   
	        lilo.append(number)
	    return maximum(lilo)
	    
	assert_equal(high_score([]), None)
	assert_equal(high_score([99,2,101,100]), 101)
	assert_equal(high_score([5,-999]), 0)
gpt_feedback = It seems like there is a syntax error in your code. You have a 'def' keyword without a function name or body following it. Please remove it or complete the function definition. Also, in your 'high_score' function, there is an indentation error in the 'for' loop. The 'if' statement should be indented properly under the 'for' loop.
gpt_feedback_length = 57
gpt_score = 0.0
pedal_feedback = Bad syntax on line 17.
	
	The traceback was:
	<div class='pedal-traceback'>Line 17 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_for_composition_code_highest_filter/submissions/Nuzleaf_32379968.py</code>
	<pre class='pedal-python-code python'><code>def
	   ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 17, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 34
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_functions_flow_code_timely_extraction]
description = <p>The functions below calculate whether a given hour is in the morning (between 5am <em>and</em> 12pm). The first function <code>is_morning</code> (incomplete) has two helper functions (<code>is_past_dawn</code> and <code>is_before_noon</code>, both complete). Finish the <code>is_morning</code> function to call the other two.</p>

[bakery_functions_flow_code_timely_extraction.Beedrill_18988758.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your code seems to be working fine. The functions `is_before_noon` and `is_past_dawn` are correctly checking if the given hour is before noon and past dawn respectively. The function `is_morning` is correctly using these two functions to determine if the given hour is in the morning. The assert statements are also correctly checking the output of the `is_morning` function.
gpt_feedback_length = 58
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Beedrill_18988758.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_functions_flow_code_timely_extraction.Buizel_20306146.py]
student_code = 
	from bakery import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return ___
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = It seems like you're trying to define a function `is_morning(hour: int) -> bool` that checks if a given hour is in the morning. The morning hours could be defined as the time between dawn and noon. You've already defined `is_before_noon(hour: int) -> bool` and `is_past_dawn(hour: int) -> bool` functions. You can use these two functions inside your `is_morning` function to check if a given hour is both before noon and past dawn.
gpt_feedback_length = 72
gpt_score = 0.0
pedal_feedback = It looks like you have unconnected blocks on line 10. Before you run your program, you must make sure that all of your blocks are connected that there are no unfilled holes.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_functions_flow_code_timely_extraction.Darumaka_20596757.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return hour 
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = It seems like you have not completed the function 'is_morning'. This function should return True if the hour is between 5 and 12 (inclusive), and False otherwise. You can use the functions 'is_before_noon' and 'is_past_dawn' to help you with this. Remember, you can use the 'and' operator to check if both conditions are true.
gpt_feedback_length = 54
gpt_score = 0.0
pedal_feedback = Your function returned an integer on line 12, even though you defined it to return a boolean. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_functions_flow_code_timely_extraction.Elgyem_18650843.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return ___
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = It seems like you're trying to define a function `is_morning(hour: int) -> bool` that returns True if the given hour is in the morning. In this context, morning is defined as any hour that is past dawn (5 AM) but before noon (12 PM). You can use the `is_before_noon` and `is_past_dawn` functions you've defined earlier to check if the given hour falls within this range. Try to fill in the blank in the `is_morning` function using these two functions.
gpt_feedback_length = 79
gpt_score = 0.0
pedal_feedback = It looks like you have unconnected blocks on line 10. Before you run your program, you must make sure that all of your blocks are connected that there are no unfilled holes.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_functions_flow_code_timely_extraction.Girafarig_19721299.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your code seems to be working fine. It correctly checks if the given hour is in the morning by checking if it is past dawn and before noon. Good job!
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Girafarig_19721299.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_functions_flow_code_timely_extraction.Lapras_20074571.py]
student_code = 
	from bakery import assert_equal
	
	def is_morning(hour: int) -> bool:
	    def is_before_noon(hour: int) -> bool:
	    return hour <= 12    
	    def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	
	
	
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = It seems like you've defined two helper functions `is_before_noon` and `is_past_dawn` inside your `is_morning` function, but you're not using them. You should call these functions inside `is_morning` and return the result of their logical AND operation. This will check if the given hour is both before noon and past dawn, which is the definition of morning.
gpt_feedback_length = 56
gpt_score = 0.0
pedal_feedback = Bad indentation on line 5 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 5 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Lapras_20074571.py</code>
	<pre class='pedal-python-code python'><code>    return hour <= 12    
	    ^</code></pre>
	</div>
	Expected an indented block after function definition on line 4.
	Suggestion: Check line 5, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 57
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_functions_flow_code_timely_extraction.Liepard_19874187.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn(hour) and is_before_noon(hour)
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = Your code seems to be working fine. It correctly checks if the given hour is in the morning by checking if it is past dawn and before noon. The test cases also cover different scenarios and all of them pass. Good job!
gpt_feedback_length = 42
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_functions_flow_code_timely_extraction/submissions/Liepard_19874187.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_functions_flow_code_timely_extraction.Nosepass_19326157.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_past_dawn or is_before_noon
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = In the function `is_morning`, you are returning the function objects `is_past_dawn` and `is_before_noon` instead of calling these functions with the `hour` argument. You should call these functions with the `hour` argument and use the logical AND operator to combine their results.
gpt_feedback_length = 41
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>hour</code> was given a value on line 9, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_functions_flow_code_timely_extraction.Nuzleaf_25659450.py]
student_code = 
	from bakery import assert_equal
	
	def is_before_noon(hour: int) -> bool:
	    return hour <= 12
	
	def is_past_dawn(hour: int) -> bool:
	    return hour >= 5
	
	def is_morning(hour: int) -> bool:
	    return is_before_noon or is_past_dawn
	
	assert_equal(is_morning(1), False)
	assert_equal(is_morning(6), True)
	assert_equal(is_morning(11), True)
	assert_equal(is_morning(14), False)
gpt_feedback = In your `is_morning` function, you are returning the function objects `is_before_noon` and `is_past_dawn` instead of calling these functions with the `hour` argument. You should call these functions and use the logical AND operator to combine their results. The correct code should be `return is_before_noon(hour) and is_past_dawn(hour)`.
gpt_feedback_length = 46
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>hour</code> was given a value on line 9, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_if_patterns_make_pig_latin]
description = Define a function `make_pig_latin` that consumes a word (a string) and converts it to actual pig latin (also a string). If the first letter of the word is a vowel, just return that word with `"ay"` added to the end. Otherwise, take the first character of the word and move it to the end of the string, and *then* add `"ay"` to the end. Do not worry about capitalization. If the empty string is given, return `"ay"`.

[bakery_if_patterns_make_pig_latin.Beedrill_21205343.py]
student_code = 
	def make_pig_latin(word: str) -> str:
	    if word[0].lower() in "aeiou":
	        return word + "ay"
	    else:
	        return word[1:] + word[0] + "ay"
	
	print("TEST PASSED")
	print("TEST PASSED")
	print("TEST PASSED")
gpt_feedback = Your function seems to be correctly implementing the rules of Pig Latin for words that start with a vowel. However, it seems like you're missing some test cases to verify if your function is working as expected. Try to add some print statements with calls to your function and expected results. For example: print(make_pig_latin('apple') == 'appleay').
gpt_feedback_length = 56
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>make_pig_latin</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_if_patterns_make_pig_latin.Buizel_22898628.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in "AEIOUaeiou"
	        return word + "ay"
gpt_feedback = It seems like you're missing a colon at the end of your if statement. In Python, you need to end your if statements with a colon. Try adding a colon after your if statement condition.
gpt_feedback_length = 35
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Buizel_22898628.py</code>
	<pre class='pedal-python-code python'><code>    if word[0] in "AEIOUaeiou"
	                              ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 68
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_if_patterns_make_pig_latin.Darumaka_23539066.py]
student_code = 
	vowel=a
	
	def make_pig_latin (word:str)->str:
	    if word [:0] vowel
	    return word+"ay"
	#else:
	#    return wor
gpt_feedback = It seems like you're trying to create a function that converts a word to pig latin. There are a few issues with your code. First, you're trying to check if the first letter of the word is a vowel, but your if statement is incomplete. You need to use the 'in' keyword to check if a value is in a list or string. Second, you're trying to slice the word from the beginning to the 0th index, which will always return an empty string. You should slice from the 0th index to the 1st to get the first letter. Lastly, you're missing an else statement to handle the case where the first letter is not a vowel. Here's a hint: In pig latin, if a word starts with a vowel, you add 'way' to the end. If it starts with a consonant, you move the first letter to the end and add 'ay'.
gpt_feedback_length = 153
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Darumaka_23539066.py</code>
	<pre class='pedal-python-code python'><code>    if word [:0] vowel
	                 ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 55
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_if_patterns_make_pig_latin.Elgyem_20565700.py]
student_code = 
	from cisc108 import assert_equal
	def make_pig_latin(word:str)->str:
	     if word[0].lower()in "aeiou"
	        return word+"ay"
	    else
	        return word[1:]+word[0]+"ay"
	        
	assert_equal(make_pig_latin(word),ordway)
gpt_feedback = It seems like you're missing colons at the end of your if and else statements. In Python, colons are used to start a new block of code. Also, in your assert_equal function, you're using 'word' as a variable but it's not defined in that scope. You should replace it with a string to test your function. Lastly, 'ordway' should be a string, so you should put it in quotes.
gpt_feedback_length = 69
gpt_score = 0.0
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Elgyem_20565700.py</code>
	<pre class='pedal-python-code python'><code>     if word[0].lower()in "aeiou"
	                                 ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 71
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_if_patterns_make_pig_latin.Girafarig_21526564.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in 'aeiou':
	        return word + 'ay'
	    return word[1:] + word[0] + 'ay'
	
	assert_equal(make_pig_latin("hello"), "elloay")
	assert_equal(make_pig_latin("arugula"), "arugulaay")
	assert_equal(make_pig_latin("potato"), "otatopay")
	assert_equal(make_pig_latin("green"), "reengay")
gpt_feedback = Your code seems to be working fine. It correctly translates words into pig latin based on the rules you've implemented. Good job!
gpt_feedback_length = 22
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Girafarig_21526564.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_if_patterns_make_pig_latin.Lapras_21931235.py]
student_code = 
	from bakery import assert_equal
	def make_pig_latin(Word:str)->str:
	    if Word[0] in "aeiouAEIOU":
	        pig_latin = Word + "ay"
	    elif Word[0] not in "aeiouAEIOU" and "":
	        pig_latin = Word[1:] + Word[0] +"ay"
	    else:
	            pig_latin = "ay"
	    return pig_latin
	
	assert_equal(make_pig_latin("Fiammetta"), "iamettaFay")       
	assert_equal(make_pig_latin(""), "ay")
	assert_equal(make_pig_latin("Exusiai"), "Exusiaiay")
gpt_feedback = Your code seems to be on the right track, but there's a small issue with the condition in your second elif statement. You're checking if the first character of the word is not a vowel and "", which doesn't make much sense. You might want to revise this condition. Also, remember that in Pig Latin, if a word starts with a consonant, all consonant letters before the first vowel are moved to the end of the word sequence. So, you might need to adjust your logic to handle words that start with multiple consonants.
gpt_feedback_length = 94
gpt_score = 0.0
pedal_feedback = I ran your code.
	
	An IndexError occurred:
	
	<pre class='pedal-exception'>String index out of range</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Lapras_21931235.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(make_pig_latin(""), "ay")
	             ^^^^^^^^^^^^^^^^^^</code></pre>
	
	Line 3 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Lapras_21931235.py</code> in <code class='pedal-frame'>make_pig_latin</code>
	<pre class='pedal-python-code python'><code>    if Word[0] in "aeiouAEIOU":
	       ^^^^^^^</code></pre>
	</div>
	An IndexError means that you indexed past the end of a string or a list.  For example, if you access index 5 in a list with 3 items.
	
	Suggestion: Remember that the first position in a list or string is 0. Often, you will be off by just one index position, so check your math. Also, make sure the list or string has the right value.
pedal_feedback_length = 124
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_if_patterns_make_pig_latin.Liepard_21631305.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str) -> str:
	    if word[0] in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":
	        return word + "ay"
gpt_feedback = Your function seems to be on the right track, but it's not quite there yet. Remember, in Pig Latin, if a word starts with a consonant, all letters before the initial vowel are placed at the end of the word sequence. Then, 'ay' is added. If the word starts with a vowel, just 'ay' is added at the end. Your current implementation only adds 'ay' to the end of the word, regardless of whether it starts with a vowel or a consonant.
gpt_feedback_length = 82
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_if_patterns_make_pig_latin.Nosepass_22110513.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word: str)->str:
	    vowels = ["A","E","I","O","U"]
	    if not word:
	        return "ay"
	    elif word[0].upper() in vowels:
	        return word + "ay"
	    return word[1:] + word[0] + "ay"
	
	assertequal(make_pig_latin(""),"ay")
	assertequal(make_pig_latin("effort"),"effortay")
	assertequal(make_pig_latin("make"),"akemay")
	assertequal(make_pig_latin("word"),"ordway")
	assertequal(make_pig_latin("award"),"awarday")
gpt_feedback = It seems like you have a small typo in your assert statements. You should use 'assert_equal' instead of 'assertequal'. Also, remember that Python is case-sensitive, so make sure to use the correct case when calling functions or using variables.
gpt_feedback_length = 39
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>assertequal</code> was used on line 11, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_if_patterns_make_pig_latin.Nuzleaf_27538944.py]
student_code = 
	from cisc108 import assert_equal
	
	def make_pig_latin(word:str)->str:
	    if word==""
	        return "ay"
	    elif word[0] in "aeiou":
	        return word+"ay"
	    else:
	        return word[1:]+word[0]+"ay"
gpt_feedback = It seems like you have a syntax error in your if statement. In Python, you need to use '==' for comparison. Also, don't forget to put a colon at the end of your if and elif statements.
gpt_feedback_length = 37
gpt_score = 0.0
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_if_patterns_make_pig_latin/submissions/Nuzleaf_27538944.py</code>
	<pre class='pedal-python-code python'><code>    if word==""
	               ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 51
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_intro_programs_code_try_blockpy]
description = Hello, and welcome to BlockPy! This tool will let you write and run  Python code.
	
	Below, you can see the code editor where there is already a bit of code.
	
	Click the green "Run" button to see the result of running your  code in the "Console" and "Feedback" areas.
	
	When you see the green "Complete" box, you've completed this problem!

[bakery_intro_programs_code_try_blockpy.Beedrill_15803943.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code seems to be correct. It will print the string 'Welcome to BlockPy!' to the console. Keep up the good work!
gpt_feedback_length = 22
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_intro_programs_code_try_blockpy.Buizel_16401118.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code looks good! It should print 'Welcome to BlockPy!' to the console. Remember, the print() function in Python is used to output data to the standard output device (screen).
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_intro_programs_code_try_blockpy.Darumaka_16967377.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code looks good! It should print 'Welcome to BlockPy!' to the console. Remember, the print() function in Python is used to output data to the standard output device (screen).
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_intro_programs_code_try_blockpy.Elgyem_15701933.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code looks good! It should print 'Welcome to BlockPy!' to the console. Remember, the print() function in Python is used to output data to the standard output device (screen).
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_intro_programs_code_try_blockpy.Girafarig_16114772.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code looks good! It should print 'Welcome to BlockPy!' to the console. Remember, the print() function in Python is used to output data to the standard output device (screen).
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_intro_programs_code_try_blockpy.Lapras_16280492.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code looks good! It should print 'Welcome to BlockPy!' to the console. Remember, the print() function in Python is used to output data to the standard output device (screen).
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_intro_programs_code_try_blockpy.Liepard_16523595.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code looks good! It should print 'Welcome to BlockPy!' to the console. Remember, the print() function in Python is used to output data to the standard output device (screen).
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_intro_programs_code_try_blockpy.Nosepass_15790367.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code seems to be correct. It will print the string 'Welcome to BlockPy!' to the console. Keep up the good work!
gpt_feedback_length = 22
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_intro_programs_code_try_blockpy.Nuzleaf_22476432.py]
student_code = 
	print("Welcome to BlockPy!")
gpt_feedback = Your code seems to be correct. It will print the string 'Welcome to BlockPy!' to the console. Remember, the print() function in Python is used to output data to the standard output, which is usually the console.
gpt_feedback_length = 37
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_nesting_list_dataclasses_code_good_job]
description = The dataclass `Job` is defined below with the fields `title` (str), `salary` (int), `available` (boolean), and `company` (str).
	
	Define a function `best_job` that consumes a list of jobs and returns the `Job` with the highest `salary` that is `available`. If no jobs are available, then return the default `UNEMPLOYED` job instead.
	
	You will need to unit test your code a sufficient number of times.
	
	**HINT**: Define a helper function to filter out the unavailable jobs BEFORE you determine the highest salary `Job`. An `if` statement used as a Defensive Guard will be very effective for returning the appropriate value in the case where there are no available guards. Having two helper functions (one to filter available jobs, and one to determine the highest salary) in addition to the main `best_job` function makes this a lot easier to keep track of everything.

[bakery_nesting_list_dataclasses_code_good_job.Beedrill_31352318.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: [Job]) -> Job:
	    if not [job for job in jobs if job.available]:
	        return UNEMPLOYED
	    return max([job for job in jobs if job.available], key=lambda job: job.salary)
gpt_feedback = Your code seems to be correct. You have defined a dataclass 'Job' with the attributes 'title', 'salary', 'available', and 'company'. You have also defined a constant 'UNEMPLOYED' which is an instance of 'Job'. Your function 'best_job' takes a list of 'Job' instances and returns the job with the highest salary that is available. If no jobs are available, it returns the 'UNEMPLOYED' instance. Good job!
gpt_feedback_length = 65
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_nesting_list_dataclasses_code_good_job.Buizel_31739575.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
gpt_feedback = Your code seems to be correct. You have successfully created a dataclass named 'Job' with attributes 'title', 'salary', 'available', and 'company'. You have also created a constant 'UNEMPLOYED' which is an instance of the 'Job' class. However, the 'assert_equal' import from 'bakery' seems to be unused. Make sure to remove unused imports to keep your code clean.
gpt_feedback_length = 57
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_nesting_list_dataclasses_code_good_job.Darumaka_31747902.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def available(avail:[Job])->bool:
	    taking = []
	    for avai in avail:
	        if avail.available is True:
	            taking.append(avai)
	    return False
	
	Job1 = [Job("banker", 5, True, "PNC")]
	assert_equal(available(Job1), [Job("banker", 5, True, "PNC")])
gpt_feedback = There are a few issues with your code. First, in your function signature for 'available', you have 'avail:[Job]' which is not the correct way to annotate a list of Job objects in Python. It should be 'avail: List[Job]'. You also need to import List from typing. Second, in your for loop, you are checking 'avail.available' instead of 'avai.available'. Lastly, your function always returns False. You should return the 'taking' list instead.
gpt_feedback_length = 71
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>taking</code> was given a value on line 16, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_nesting_list_dataclasses_code_good_job.Elgyem_30552172.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def can(have:list[Job])->bool:
	    new_list=[]
	    for h in have:
	        if h.available==True:
	            new_list.append(h)
	    return new_list
	
	def highest(
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
gpt_feedback = It seems like you've started defining a function named 'highest' but haven't completed it. Remember to include the function's parameters and body. Also, in your 'can' function, you're returning a list of jobs but the return type of the function is specified as bool. You might want to change the return type to list[Job].
gpt_feedback_length = 54
gpt_score = 0.0
pedal_feedback = Bad syntax on line 18.
	
	The traceback was:
	<div class='pedal-traceback'>Line 18 of file <code class='pedal-filename'>C:\Users\Brend\PycharmProjects\pedal-kennel\examples\chosen_problems_st3-3_as3-3_at1_v1/bakery_nesting_list_dataclasses_code_good_job/submissions/Elgyem_30552172.py</code>
	<pre class='pedal-python-code python'><code>def highest(
	           ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 18, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 45
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_nesting_list_dataclasses_code_good_job.Girafarig_31362083.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: list[Job]) -> Job:
	    greatest_job = UNEMPLOYED
	    for job in jobs:
	        if job.available:
	            if job.salary > greatest_job.salary:
	                greatest_job = job
	    return greatest_job
	
	
	painter = Job("Painter", 5000, True, "Painers Inc.")
	seamstress = Job("Seamstress", 4000, False, "Sewing and Strings")
	server = Job("waiter", 3500, False, "Bob's")
	
	assert_equal(best_job([painter, seamstress, waiter]), 8500)
	assert_equal(best_job([waiter]), UNEMPLOYED)
	assert_equal(best_job([painter]), 5000)
gpt_feedback = There are a few issues with your code. First, you are trying to compare a Job object with an integer in your assert_equal statements. You should be comparing Job objects with Job objects. Second, you have a typo in your variable name 'waiter' which you have written as 'server' when defining it. Lastly, your assert_equal statements are not correct. You should be comparing the result of the best_job function with the expected Job object, not an integer or a salary.
gpt_feedback_length = 80
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>waiter</code> was used on line 26, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_nesting_list_dataclasses_code_good_job.Lapras_30790908.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs:[Job])-> Job:
	    greatest_job = UNEMPLOYED.salary
	    for job in jobs:
	        if job.salary > greatest_job:
	            if job.available:
	                greatest_job = job.salary
	    return greatest_job
	
	jobslist = [Job('Legend', 0, False, 'Earth'),
	            Job('Garbageman', 30_000, True, 'City'),
	            Job('Lawyer', 400_000, False, 'City'),
	            Job('Plumber', 75_000, True, 'City')]
	assert_equal(best_job(jobslist), 75_000)
	assert_equal(best_job([]), 0)
	assert_equalassert_equal(best_job(jobslist[:-1]), 30_000)
gpt_feedback = It seems like you're trying to return the salary of the best job, but the function signature suggests that you should return the Job object itself. Also, you're not updating the 'greatest_job' variable correctly. It should hold the Job with the highest salary, not the salary itself. Lastly, there seems to be a typo in your last assert statement.
gpt_feedback_length = 59
gpt_score = 0.0
pedal_feedback = Your function returned an integer on line 25, even though you defined it to return A Job. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_nesting_list_dataclasses_code_good_job.Liepard_31859101.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs: list[Job]) -> Job:
	    highestPay = 0
	    jobTitle = ""
	    for job in jobs:
	        if job.available == False:
	            if job.salary > highestPay:
	                highestPay = job.salary
	                jobTitle = job.title
	    return jobTitle
gpt_feedback = Your function `best_job` is supposed to return a `Job` object, but currently it's returning a string (`jobTitle`). You should modify your function to return the job with the highest salary that is available. Also, your condition `if job.available == False:` is checking for jobs that are not available. You should change this to `if job.available == True:` to check for jobs that are available.
gpt_feedback_length = 64
gpt_score = 0.0
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_nesting_list_dataclasses_code_good_job.Nosepass_31444935.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def filter_un(Jobs: list[Job])->list[Job]:
	    avalible_jobs = []
	    for job in Jobs:
	        if job.avalible:
	            avalible_jobs.append(job)
	    return avalible_jobs
	
	def best_job(Jobs: list[Job])->Job:
	    largest_salary = 0
	    filtered_jobs = filter_un(Jobs)
	    
	    if not filtered_jobs:
	        return Job("Unemployed", 0, True, "None")
	    
	    best_job = filtered_jobs[0]
	    for job in Jobs:
	        if job.salary > best_job.slary:
	            best_job = job
	    return best_job
	
	assert_equal(best_job([Job("Unemployed", 0, True, "None"),Job("Software Developer", 500000, False, "Google"),Job("TA",5,True,"Uni")]),Job("TA",5,True,"Uni"))
	assert_equal(best_job([Job("Unemployed", 0, True, "None"),Job("Software Developer", 500000, True, "Google"),Job("TA",5,True,"Uni")]),Job("Software Developer", 500000, True, "Google"))
	assert_equal(best_job([Job("Unemployed", 0, False, "None"),Job("Software Developer", 500000, False, "Google"),Job("TA",5,True,"Uni")]),Job("Unemployed", 0, True, "None"))
gpt_feedback = There are a few typos in your code. In the 'filter_un' function, you wrote 'avalible' instead of 'available'. Similarly, in the 'best_job' function, you wrote 'slary' instead of 'salary'. Also, in the 'best_job' function, you should iterate over 'filtered_jobs' instead of 'Jobs' to only consider available jobs. Lastly, the 'assert_equal' function is not a built-in Python function. You might want to use 'assert' instead for testing.
gpt_feedback_length = 66
gpt_score = 0.0
pedal_feedback = Do not remove or alter the starting code that we gave you. You may need to check your history or reset the problem.
pedal_feedback_length = 23
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_nesting_list_dataclasses_code_good_job.Nuzleaf_34424269.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Job:
	    title: str
	    salary: int
	    available: bool
	    company: str
	    
	def available_jobs(jobs:list[Job])->list[job]:
	    avail_jobs=[]
	    for job in jobs:
	        if job.available:
	            avail_jobs.append(job)
	    return avail_jobs
	
	def highest_salary(jobs:list[Job])->int:
	    maximum=jobs[0].salary
	    for job in jobs:
	        if maximum<job.salary:
	            maximum=job.salary
	    return maximum
	
	UNEMPLOYED = Job("Unemployed", 0, True, "None")
	
	def best_job(jobs:list[Job])->Job:
	    x=available_jobs(jobs)
	    if not x:
	        return UNEMPLOYED
	    y=highest_salary(x)
	    for job in jobs:
	        if job.salary==maximum:
	            return job   
	    
	
	list1:[Job("Dancer", 5000, True, "None"),Job("Driver", 200, True, "None")]
	list2:[Job("Painter",0, True, "None"),Job("Explorer", 200, False, "None")]
	list3:[Job("Hooper", 1000, False, "None"),Job("Scientist", 1200, False, "None")]
	
	assert_equal(best_job(list1), Job("Dancer", 5000, True, "None"))
	assert_equal(best_job(list2), Job("Painter",0, True, "None"))
	assert_equal(best_job(list3), UNEMPLOYED = Job("Unemployed", 0, True, "None"))
gpt_feedback = There are a few issues with your code. First, in the function signature for 'available_jobs', you have 'list[job]' as the return type. Python is case-sensitive, so it should be 'list[Job]'. Second, in your 'best_job' function, you're referencing 'maximum' which is not defined in the scope of this function. You should be using 'y' instead, which holds the highest salary. Lastly, in your assert_equal for 'list3', you're assigning a value to 'UNEMPLOYED' instead of comparing it. It should be 'assert_equal(best_job(list3), UNEMPLOYED)'.
gpt_feedback_length = 80
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>job</code> was used on line 11, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_book_list]
description = Create a list of 3 strings that represent the names of your favorite books and store them in a variable. Print this variable.

[bakery_structures_lists_code_book_list.Beedrill_23099060.py]
student_code = 
	books = ["the why axis", "I haven't read many books", "In a while"]
	
	print(books)
gpt_feedback = Your code seems to be correct. It creates a list of books and then prints the list. If you want to do something more with this list, like sorting it or searching for a specific book, you'll need to add more code.
gpt_feedback_length = 42
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_book_list.Buizel_24404096.py]
student_code = 
	book = ["dog" "dog" "doggy"]
gpt_feedback = It seems like you're trying to create a list of strings. In Python, list items should be separated by commas. Try modifying your code to: book = ['dog', 'dog', 'doggy']
gpt_feedback_length = 30
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>book</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_book_list.Darumaka_24887472.py]
student_code = 
	books=["1", "2", "3"]
	print(books)
gpt_feedback = Your code is correct. It creates a list named 'books' with three elements and then prints the list. If you want to add more functionality or have any specific issues, please provide more details.
gpt_feedback_length = 34
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_book_list.Elgyem_22869578.py]
student_code = 
	# a list of 3 strings that represent the names of your favorite books 
	books=[Island,Firefly_Lane,Longevity]
	print(books)
gpt_feedback = It seems like you're trying to create a list of strings, but you forgot to put quotes around your strings. In Python, strings are always enclosed in quotes. They can be either single quotes ('') or double quotes (""). Try modifying your code to look like this: books=['Island','Firefly_Lane','Longevity']
gpt_feedback_length = 48
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Island</code> was used on line 2, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_book_list.Girafarig_24550668.py]
student_code = 
	books = ["title 1", "title 2", "title 3"]
gpt_feedback = Your code is correct if you just want to create a list of book titles. However, if you want to do something with this list (like print it, add more titles, etc.), you'll need to write more code.
gpt_feedback_length = 38
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>books</code> was given a value on line 2, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_book_list.Lapras_23924730.py]
student_code = 
	Books = ['Harry Potter', 'Origami Yoda', 'Oregairu']
	print
gpt_feedback = It seems like you're trying to print the list of books. You can do this by using the print function and passing the list as an argument. Your code should look something like this: print(Books).
gpt_feedback_length = 35
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>Books</code> was given a value on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_book_list.Liepard_24011306.py]
student_code = 
	books = ["Harry Potter", "Lord of The Rings", "The Witcher"]
	print(book)
gpt_feedback = It seems like you're trying to print the variable 'book', but it's not defined in your code. If you're trying to print the 'books' list, you should use 'print(books)'. If you want to print a specific book from the list, you need to use its index, like 'print(books[0])' for the first book.
gpt_feedback_length = 52
gpt_score = 0.0
pedal_feedback = The variable <code class='pedal-name'>book</code> was used on line 2, but it was not given a value on a previous line. You cannot use a variable until it has been given a value.
pedal_feedback_length = 32
pedal_score = 0
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_book_list.Nosepass_23407576.py]
student_code = 
	books = ['farquad','tichi','bro the book']
	print(books)
gpt_feedback = Your code is correct. It creates a list of books and then prints the list. Keep up the good work!
gpt_feedback_length = 20
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_book_list.Nuzleaf_28121708.py]
student_code = 
	x=["Stella Luna", "Hunger Games", "A Game of Thrones"]
	print(x)
gpt_feedback = Your code is correct. It creates a list of book titles and prints them out. Keep up the good work!
gpt_feedback_length = 20
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_emptiness]
description = Print an empty list literal value. That's it, just directly print the empty list literal value.

[bakery_structures_lists_code_emptiness.Beedrill_23099121.py]
student_code = 
	print([])
gpt_feedback = Your code is printing an empty list. If you want to print a list with elements, you should add elements inside the square brackets. For example, print([1, 2, 3]). If you intended to print an empty list, then your code is correct.
gpt_feedback_length = 42
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_emptiness.Buizel_24404292.py]
student_code = 
	empty = []
	print(empty)
gpt_feedback = Your code is correct. You have successfully created an empty list and printed it.
gpt_feedback_length = 14
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_emptiness.Darumaka_24887664.py]
student_code = 
	empty=[]
	print(empty)
gpt_feedback = Your code is correct! You've successfully created an empty list and printed it. Keep practicing!
gpt_feedback_length = 15
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_emptiness.Girafarig_24550838.py]
student_code = 
	print([])
gpt_feedback = Your code is correct and will print an empty list. If you want to print a list with elements, you can add elements inside the square brackets. For example, print([1, 2, 3]) will print a list with elements 1, 2, and 3.
gpt_feedback_length = 42
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_emptiness.Lapras_23924826.py]
student_code = 
	empty = []
	print(empty)
gpt_feedback = Your code is correct. You have successfully created an empty list and printed it. Keep up the good work!
gpt_feedback_length = 19
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_emptiness.Liepard_24011392.py]
student_code = 
	print([])
gpt_feedback = Your code is printing an empty list. If you want to print a list with elements, you should add elements inside the square brackets. For example, print([1, 2, 3]). If you intended to print an empty list, then your code is correct.
gpt_feedback_length = 42
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_emptiness.Nosepass_23407797.py]
student_code = 
	List = []
	print(List)
gpt_feedback = Your code is correct. It creates an empty list and prints it. The output will be an empty list []. If you want to add elements to the list, you can use the append() method. For example, List.append('element') will add 'element' to the list.
gpt_feedback_length = 44
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 

[bakery_structures_lists_code_emptiness.Nuzleaf_28121803.py]
student_code = 
	print([])
gpt_feedback = Your code is printing an empty list. If you want to print a list with elements, you should add elements inside the square brackets. For example, print([1, 2, 3]). If you intended to print an empty list, then your code is correct.
gpt_feedback_length = 42
gpt_score = 0.0
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
instructor_feedback_gpt_accurate = 
instructor_feedback_gpt_concise = 
instructor_feedback_gpt_clear = 
instructor_feedback_gpt_jargon = 
instructor_feedback_gpt_sentiment = 
instructor_feedback_pedal_accurate = 
instructor_feedback_pedal_concise = 
instructor_feedback_pedal_clear = 
instructor_feedback_pedal_jargon = 
instructor_feedback_pedal_sentiment = 


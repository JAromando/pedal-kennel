[global]
instructor = Instructor
tester = Brend
gpt_model = gpt-3.5-turbo-0613
gpt_prompt = [
	  {
	    "feedback": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "user",
	          "content": "{{STUDENT_CODE_HERE}}"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "feedback": {
	              "type": "string",
	              "description": "Helpful tips to guide a student with their problematic code."
	            },
	            "is_error_present": {
	              "type": "boolean",
	              "description": "If there is a problem with the code, this parameter is true."
	            }
	          },
	          "required": [
	            "feedback",
	            "is_error_present"
	          ]
	        }
	      },
	      0.7,
	      0.5
	    ],
	    "score": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "user",
	          "content": "{{STUDENT_CODE_HERE}}"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "score": {
	              "type": "string",
	              "description": "On a scale from 0 to 10, what would you score their code?"
	            },
	            "error": {
	              "type": "string",
	              "description": "List all the error types the code produces."
	            }
	          },
	          "required": [
	            "score",
	            "error"
	          ]
	        }
	      },
	      0.1,
	      0.5
	    ]
	  },
	  "<function gpt_get_default_prompts.<locals>.process_prompts at 0x0000023F114E34C0>"
	]
gpt_prompt_approximate_length = 807

[bakery_for_composition_code_average_problem]
description = Create a function named `average` that consumes a list of numbers and returns their average by combining the results of the given `summate` and `count` function. If the list is empty, produce the special value `None`.

[bakery_for_composition_code_average_problem.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit]
description = Use a list to represent the courses you are taking by the number of credits they are worth. For instance, this course is worth <code>3</code> credits, so your list will have at least one number in it. Then, print out each credit value using a <code>for</code> loop.

[bakery_for_loops_code_to_your_credit.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_loops_code_to_your_credit.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits]
description = Use the Find pattern to define the function `find_fruit` that consumes a list of strings representing foods, and produces a string value that represents the last fruit in the list. For our purposes, the only fruits are `"apple"`, `"banana"`, and `"orange"`. If there is no fruit found in the list, then you should return `"fruitless"`.

[bakery_for_patterns2_code_find_fruits.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_find_fruits.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take]
description = Use the Take pattern to define a function `until_period` that consumes a list of strings and produces a list of strings. Keep including strings until you encounter a period (`'.'`), but don't include the period in the return result.

[bakery_for_patterns2_code_take.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_for_patterns2_code_take.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name]
description = The code below has an error. Consult the [String functions reference page](https://python-sneks.github.io/pages/v3_0/references/strings.html) and fix the error so that it correctly makes the string entirely uppercase.

[bakery_functions_builtins_code_mystery_name.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_builtins_code_mystery_name.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls]
description = The function `float` consumes a string and converts it to a float.
	Use the `round` function and the `float` function together along with the `print` function to print the string `"9.5"` as a whole number after storing the result in a variable.
	
	Here is an example of the `float` function being used to convert a string to a float:
	
	```python
	price = float("17.3")
	```

[bakery_functions_calling_code_composed_calls.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_calling_code_composed_calls.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs]
description = Provide documentation for the following function. The function consumes a string, an integer, and a float; the function produces a boolean. Do not worry about the implementation of the function or its unit tests. You need to provide descriptions of the function, its arguments, and the return value, but they will not be assessed automatically; just do your best to explain them and focus more on getting the parameter and return types correct.

[bakery_functions_docstrings_code_new_docs.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_docstrings_code_new_docs.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off]
description = The function <code>cut_day</code>&nbsp;is supposed to consume a string representing the current day of the week, and then produce the current day without the <code>"day"</code> part at the end (e.g., <code>"Thursday"</code> becomes <code>"Thurs"</code>). However, it does not work correctly. Fix this function by applying the rules of scope.

[bakery_functions_scopes_code_weekend_off.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_functions_scopes_code_weekend_off.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math]
description = Define a function `dispatch_math` that consumes a string and two integers, and produces an integer. The first argument (the string) represents an operator: either `"+"`, `"-"`, or `"*"`. The second and third arguments (the integers) are meant to represent the operands for the given operator. The result will be the addition, subtraction, or product of the two operands based on the first parameter. If any other operator is given, just return `0`.

[bakery_if_patterns_dispatch_math.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_patterns_dispatch_math.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days]
description = <p>Use an <code>if</code> statement to capture the following logic:</p><pre>If the precipitation is greater than 50%,<br>    print "It will probably rain."<br>Otherwise,<br>    print "It might not rain."</pre><p>Set the value of the variable <code>precipitation</code> to the current chance of precipitation tomorrow (<a href="https://www.google.com/search?q=chance+of+precipitation+tomorrow" target="_blank">available here</a>) by writing the percentage as a decimal value.</p>

[bakery_if_syntax_code_rainy_days.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_if_syntax_code_rainy_days.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax]
description = The code below has an error. Run the code, read the error message, and fix the
	problem so that the code correctly prints "Hello World".

[bakery_intro_errors_code_syntax.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_errors_code_syntax.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc]
description = For this problem, you will be getting some practice with the interactive Evaluate mode. But first, run the code below and observe the output.

[bakery_intro_eval_code_quick_calc.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_eval_code_quick_calc.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic]
description = For this exercise, write three **print statements** that display either `True` or `False` depending on the condition given. Here are the three statements you'll be creating:
	
	1. print whether 8 is greater than the number of days in a week
	2. print whether 60 is less than 100 *and* less than 50
	3. print whether the current year is **not equal to** the value 2015

[bakery_intro_logic_code_print_logic.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_logic_code_print_logic.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes]
description = Print the following literal string value:
	<pre>The dog's house is big and red.</pre>

[bakery_intro_strings_code_double_quotes.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_intro_strings_code_double_quotes.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy]
description = Copy over the dataclasses you defined in the previous problem. Then, define the function `rainiest_cloudy` that consumes a list of `Forecast` and produces a boolean representing whether or not the day with the *most* rainfall was `cloudy`.
	
	If there were no days in any reports, then just return `False`.
	
	**Hint:** Write a helper function that consumes a list of `Forecast`s and returns a list of `Report`s by using the Map pattern appropriately.

[bakery_nesting_heavy_code_rainy_cloudy.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_nesting_heavy_code_rainy_cloudy.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address]
description = An `Address` is a dataclass with the fields `number` (integer), `street` (string), `city` (string), and `state` (string). Define the dataclass, create an instance representing the address `18 Amstel Ave, Newark, DE`, store the `Address` in the variable `location`, and print the instance's state field.
	
	If you can't tell, the `street` portion is `Amstel Ave`. Do not include the commas in the `street`, `city`, or `state`.
	
	Hint: Print the instance's **state field**. Do not print the entire instance!

[bakery_structures_dataclasses_define_address.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclasses_define_address.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes]
description = Define a function `merge_recipes` that consumes two `Recipe` instances and produces a new `Recipe` instance by adding together each of the fields.
	
	A `Recipe` is a dataclass with four fields: `flour` (int), `eggs` (int), `milk` (int), and `sugar` (int).

[bakery_structures_dataclass_ops_merge_recipes.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_merge_recipes.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle]
description = Define a function `point_turtle` that consumes a `Turtle` and an integer (representing a new direction), and produces a new `Turtle` with its direction updated to the new value.
	
	A `Turtle` is a dataclass with the fields `speed` (int) and `direction` (int).

[bakery_structures_dataclass_ops_point_turtle.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_dataclass_ops_point_turtle.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list]
description = Create a list of 3 strings that represent the names of your favorite books and store them in a variable. Print this variable.

[bakery_structures_lists_code_book_list.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_lists_code_book_list.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent]
description = The following message was originally shouting too loudly, and the author wants to have it quieter (by making it lowercase). However, it doesn't seem to be working. Fix the code so that variable's value is correctly lowered.

[bakery_structures_mutability_code_lower_rent.Fearow_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(avg: list[int]) -> int:
	    summate + count
gpt_feedback = The 'average' function is missing a return statement.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function average is not returning. However, that function is supposed to have a return statement.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Ferrothorn_1.py]
student_code = 
	#from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	
	def average(inList:list[int])-> int:
	    total = 0 
	    average = (summate(total) + count(total))
	        
	    return summate(inList)/count(inList)
gpt_feedback = The average function is not implemented correctly. You should calculate the sum and count separately and then divide the sum by the count.
gpt_feedback_length = 23
gpt_error_type = 
gpt_score = 7
pedal_feedback = The function <code class='pedal-name'>summate</code> was given a definition on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Petilil_1.py]
student_code = 
	from bakery import assert_equal
	
	def summate(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + value
	    return total
	
	def count(values: [int]) -> int:
	    total = 0
	    for value in values:
	        total = total + 1
	    return total
	def average (numbers:list)-> float:
	    if numbers == []:
	        return None
	    _average = summate(numbers)/count(numbers)
	    return _average
	assert_equal(average([1, 2, 1]), 1.333333333333333)
	assert_equal(average([]), None)
gpt_feedback = The code looks good and the functions are implemented correctly.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Hoothoot_1.py]
student_code = 
	print("the dog's house is big and red.")
gpt_feedback = Your code is correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = You are printing the wrong string.
pedal_feedback_length = 6
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Pidgeot_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	def cut_day(day_of_week:str= "Wednesday" or "Thursday" or "Saturday")->str:
	    return day_of_week[:-3]
	
	assert_equal(cut_day(day_of_week = "Wednesday"), "Wednes")
	assert_equal(cut_day(day_of_week = "Thursday"), "Thurs")
	assert_equal(cut_day(day_of_week = "Saturday"), "Satur")
gpt_feedback = The function definition for `cut_day` is incorrect. The `or` operator does not work as you expect in this case. Instead, you should use an `if` statement to check the value of `day_of_week` and return the corresponding substring.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>day_of_week</code> was given a value on line 3, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Bergmite_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(foods: list[str]) -> str:
	    result = "Missing"
	    if not foods:
	        return "fruitless"
	    for food in foods:
	        if food == "apple" or food == "orange" or food == "banana":
	            result = food
	        else:
	            return "fruitless"
	        return result
	
	assert_equal(find_fruit(["banana","orange","apple"]), "apple")
	assert_equal(find_fruit(["orange","orange","banana"]), "banana")
	assert_equal(find_fruit(["banana","apple","orange"]), "orange")
	assert_equal(find_fruit([]), "fruitless")
gpt_feedback = The code has a logical error. The return statement inside the for loop is indented incorrectly. It should be outside the loop.
gpt_feedback_length = 22
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/4 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Tranquill_1.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
	assert_equal(find_fruit(["banana", "orange", "apple"]), "apple")
	assert_equal(find_fruit(["orange", "apple", "banana"]), "banana")
gpt_feedback = The function is returning 'fruitless' for all inputs. Make sure the return statement is properly indented inside the for loop.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 7
pedal_feedback = 3/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Tranquill_2.py]
student_code = 
	from bakery import assert_equal
	
	def find_fruit(fruits: list[str]) -> str:
	    found = "fruitless"
	    for fruit in fruits:
	        if fruit[-1] == "e" or "a":
	            found = fruit
	        return found
	
	assert_equal(find_fruit(["apple", "banana", "orange"]), "orange")
gpt_feedback = The 'return' statement is inside the 'for' loop. It should be outside the loop to return the correct result.
gpt_feedback_length = 19
gpt_error_type = 
gpt_score = 7
pedal_feedback = You have not written enough unit tests.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Aurorus_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number:int
	    street:str
	    city:str
	    state:str
	location=Address(18,"Amstel Ave","Newark","DE")
	print(location)
gpt_feedback = The code looks good and will run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = You must use an attribute lookup (access a field).
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Reshiram_1.py]
student_code = 
	from bakery import assert_equal
	# assert_equal is imported from bakery
	def is_expected_user(name: str, age: int, height: float) -> bool:
	    return name == "Ada" and age == 1 and height == 11.7
	''' 
	This function gives the name, age, and height of a user and determines whether or
	not it is true.
	
	Args:
	    name (str): The name of the user
	    age (int): The age of the user
	    height (float): The height of the user
	Returns:
	    bool: Whether or not the information is true
	    '''
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The code looks good and the function is_expected_user() is correctly implemented.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have not provided valid documentation for the function.
pedal_feedback_length = 9
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Torkoal_1.py]
student_code = 
	from bakery import assert_equal
	
	day_of_week = "Wednesday"
	
	def cut_day():
	    return day_of_week[:-3]
	
	assert_equal(cut_day(), "Wednes")
	assert_equal(cut_day(), "Thurs")
	assert_equal(cut_day(), "Satur")
gpt_feedback = The cut_day function is returning the expected output for the first assert_equal test case. However, it is not returning the expected output for the second and third test cases.
gpt_feedback_length = 29
gpt_error_type = 
gpt_score = 7
pedal_feedback = 2/3 of your unit tests are not passing.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Dustox_1.py]
student_code = 
	message = '"Why are you shouting?".uppercase()'.format(" ")
	a_message = message.upper()
	print(a_message)
gpt_feedback = The `.format()` method is not needed in this case. Also, the `uppercase()` method should be called on the string variable `message`, not on the string itself.
gpt_feedback_length = 26
gpt_error_type = 
gpt_score = 8
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Pansear_1.py]
student_code = 
	from cisc108 import assert_equal
	def dispatch_math(operator,num1,num2): # Function declaration
	    if operator == '+': # if plus operator given then add num1 and num2
	        return num1+num2
	    elif operator == '-': # if minus operator given then subtract num1 and num2
	        return num1-num2
	    elif operator == '*': # if multiply operator given then multiply num1 by num2
	        return num1*num2
	    elif operator == '/': # if divide operator given then divide num1 by num2
	        return num1/num2
	    else:                 # else other operator given then return 0
	        return 0
	a = 5
	b = 5
	# Function call
	print ("a + b = ",dispatch_math('+',a,b))
	print ("a - b = ",dispatch_math('-',a,b))
	print ("a * b = ",dispatch_math('*',a,b))
	print ("a / b = ",dispatch_math('/',a,b))
	print ("Anything else = ",dispatch_math('a',a,b))
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs the mathematical operation based on the given operator.
	
	However, there is a small issue with the last print statement. Instead of returning 0 for an invalid operator, it should return a message indicating that the operator is not valid. You can use the 'is_error_present' parameter to indicate if there is a problem with the code.
gpt_feedback_length = 64
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>assert_equal</code> was given a definition on line 1, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Raikou_1.py]
student_code = 
	message = "Why are you shouting?"
	
	print(message.capitalize())
gpt_feedback = The capitalize() method capitalizes the first letter of a string. However, it does not change the case of the remaining letters. So, if you want to capitalize the entire string, you can use the upper() method instead.
gpt_feedback_length = 37
gpt_error_type = 
gpt_score = 8
pedal_feedback = What is the name of the method that converts a string to uppercase? Double check the documentation!
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Dodrio_1.py]
student_code = 
	price = round(float("9.5"))
	print(price)
gpt_feedback = The round() function rounds a number to the nearest integer. However, the float() function is unnecessary in this case because the argument '9.5' is already a float. You can directly use round(9.5) instead.
gpt_feedback_length = 33
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great! Now, use [Evaluate] to call those functions again - but remember, do not print! Just call the `round` and `float` functions with a new value.
pedal_feedback_length = 26
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Magnemite_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def cut_day(day_of_week):
	    return day_of_week[:-3]
	
	assert_equal(cut_day("Wednesday"), "Wednes")
	assert_equal(cut_day("Thursday"), "Thurs")
	assert_equal(cut_day("Saturday"), "Satur")
gpt_feedback = The function looks correct and the test cases pass. Well done!
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = I ran your code.
	
	A ModuleNotFoundError occurred:
	
	<pre class='pedal-exception'>No module named 'cisc108'</pre>
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_functions_scopes_code_weekend_off/submissions/Magnemite_1.py</code>
	<pre class='pedal-python-code python'><code>from cisc108 import assert_equal
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
	</div>
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Omastar_1.py]
student_code = 
	price = round(9.5)
	print(float(price))
gpt_feedback = The round() function rounds a number to the nearest integer. In this case, the number 9.5 is rounded to 10. However, the float() function is unnecessary because the result of round() is already a float.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = You used a numeric literal on line 1. You may not use that.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Dewgong_1.py]
student_code = 
	from cisc108 import assert_equal
	
	def is_expected_user(name: str, age: int, height: float) -> bool:
	       '''
	        This function prints out the name, age, and height
	
	        Args:
	            name (str): The 
	            age (int): how old the person is
	            height (float): how tall the person is
	        Returns:
	            str: returns the name, age, and height
	       '''
	    return name == "Ada" and age == 1 and height == 11.7
	
	assert_equal(is_expected_user("Ada", 1, 11.7), True)
	assert_equal(is_expected_user("Pumpkin", 4, 9.8), False)
gpt_feedback = The function definition is indented incorrectly. It should be at the same level as the 'def' keyword.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad indentation on line 14 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 14 of file <code class='pedal-filename'>bakery_functions_docstrings_code_new_docs/submissions/Dewgong_1.py</code>
	<pre class='pedal-python-code python'><code>    return name == "Ada" and age == 1 and height == 11.7
	                                                        ^</code></pre>
	</div>
	Unindent does not match any outer indentation level.
	Suggestion: Check line 14, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 111
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Golett_1.py]
student_code = 
	print(8>7)
gpt_feedback = The code is correct. It will print 'True' because 8 is greater than 7.
gpt_feedback_length = 14
gpt_error_type = 
gpt_score = 10
pedal_feedback = You must use the function <code class='pedal-name'>print</code> at least 3 times, but you used it 1 times.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Lanturn_1.py]
student_code = 
	from bakery import assert_equal
	
	def dispatch_math(operator: str, a : int, b : int) -> int:
	    if '+-/*' not in operator:
	        return 0
	    if operator == '/' and b == 0:
	        return 0
	    return (a + operator + b) 
	    
	assert_equal(dispatch_math('&', 1, 0), 0)
	assert_equal(dispatch_math('*', 1, 0), 0)
	assert_equal(dispatch_math('/', 2, 2), 1)
gpt_feedback = The logic for checking if the operator is valid is incorrect. You should check if the operator is not in '+-/*' instead of checking if '+-/*' is not in the operator.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = You used an addition operation with an integer and a string on line 8. But you can't do that with that operator. Make sure both sides of the operator are the right type.
pedal_feedback_length = 33
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Quilladin_1.py]
student_code = 
	from bakery import assert_equal
	
	
	def dispatch_math(word:str, one:int, two:int,) -> str:
	    if word == "+":
	        return one + two
	    if word == "-":
	        return one - two
	    if word == "*":
	        return one * two
	    if word == "/":
	        return 0
	    
	assert_equal(dispatch_math("+", 2, 3), 5)
	assert_equal(dispatch_math("-", 2, 3), -1)
	assert_equal(dispatch_math("*", 2, 3), 6)
	assert_equal(dispatch_math("/", 2, 3), 0)
gpt_feedback = Great job on implementing the dispatch_math function! It correctly performs addition, subtraction, and multiplication. However, there seems to be an issue with the division operation. Take a closer look at that part of your code.
gpt_feedback_length = 35
gpt_error_type = 
gpt_score = 8
pedal_feedback = Your function returned an integer on line 14, even though you defined it to return a string. Your function should return values consistently.
pedal_feedback_length = 23
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Skiploom_1.py]
student_code = 
	precipitation = 5
	
	if precipitation > 50:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
	     
	
	# ...
gpt_feedback = Your code looks correct!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = The precipitation is not a float value.
pedal_feedback_length = 7
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Snivy_1.py]
student_code = 
	precipitation = .2
	if precipitation > 0.5
	    print("It will probably rain.")
	else precipitation < 0.5
	    print("It might not rain.")
	
	# ...
gpt_feedback = There are a couple of issues with your code. First, you need to add a colon (:) at the end of the if and else statements. Second, the else statement should not have a condition. Finally, you need to indent the print statements inside the if and else blocks.
gpt_feedback_length = 49
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 2.
	
	The traceback was:
	<div class='pedal-traceback'>Line 2 of file <code class='pedal-filename'>bakery_if_syntax_code_rainy_days/submissions/Snivy_1.py</code>
	<pre class='pedal-python-code python'><code>if precipitation > 0.5
	                      ^</code></pre>
	</div>
	Expected ':'.
	Suggestion: Check line 2, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 56
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Voltorb_1.py]
student_code = 
	precipitation = 0.1
	
	if precipitation > 0.5:
	    print("It will probably rain.")
	else:
	    print("It might not rain.")
gpt_feedback = Your code looks correct! It will print 'It might not rain.' if the precipitation is less than or equal to 0.5.
gpt_feedback_length = 21
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Gastly_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Nidorano_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You have successfully printed 'Hello World'.
gpt_feedback_length = 8
gpt_error_type = 
gpt_score = 10
pedal_feedback = Bad indentation on line 1 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 1 of file <code class='pedal-filename'>bakery_intro_errors_code_syntax/submissions/Nidorano_1.py</code>
	<pre class='pedal-python-code python'><code> print("Hello World")
	^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 1, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 36
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Whiscash_1.py]
student_code = 
	print("Hello World")
gpt_feedback = Great job! You successfully printed 'Hello World'.
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 10
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Aromatisse_1.py]
student_code = 
	2+3
	print(4+5)
gpt_feedback = Great job! The expression 2+3 evaluates to 5. The expression print(4+5) will print the result of 4+5, which is 9.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Notice how only one value was actually printed on the console? Now click the [Evaluate] button. Inside the box, enter the expression `2+3` and then press Enter.
pedal_feedback_length = 27
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Elgyem_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk:int
	    sugar:int
	    
	def merge_recipes(rec:Recipe,re:Recipe)->Recipe:
	    new=Recipe(rec.flour+re.flour,rec.eggs+re.eggs,rec.milk+re.milk,rec.sugar+re.sugar)
	    return new
	rec= Recipe(1,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(3,4,4,6))
	rec= Recipe(2,2,2,3)
	re= Recipe(2,2,2,3)
	assert_equal(merge_recipes(rec,re),Recipe(4,4,4,6))
gpt_feedback = The code looks good and the assertions pass. Well done!
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Mime Jr_1.py]
student_code = 
	print(2+3)
gpt_feedback = Great job! The code is correct.
gpt_feedback_length = 6
gpt_error_type = 
gpt_score = 10
pedal_feedback = You have changed or removed the starting code.
pedal_feedback_length = 8
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Liepard_1.py]
student_code = 
	print(8 > 7)
	print(60 < 100 and 60 < 50)
	print(2022 == 2015)
gpt_feedback = The first print statement is correct. It prints the result of the comparison 8 > 7, which is True.
	
	The second print statement is incorrect. It prints the result of the logical expression 60 < 100 and 60 < 50. However, this expression is False because both conditions need to be True for the entire expression to be True.
	
	The third print statement is incorrect. It prints the result of the comparison 2022 == 2015, which is False because 2022 is not equal to 2015.
gpt_feedback_length = 83
gpt_error_type = 
gpt_score = 8
pedal_feedback = Does your final statement include the correct operation for 'not equal to'?
pedal_feedback_length = 12
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Swampert_1.py]
student_code = 
	print(8>7)
	print(60<100, 60<50)
	print(2022-=2015)
gpt_feedback = The first two print statements are correct. However, there is a syntax error in the third print statement. The operator '-=' is not valid for subtraction. Use the '-' operator instead.
gpt_feedback_length = 31
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 3.
	
	The traceback was:
	<div class='pedal-traceback'>Line 3 of file <code class='pedal-filename'>bakery_intro_logic_code_print_logic/submissions/Swampert_1.py</code>
	<pre class='pedal-python-code python'><code>print(2022-=2015)
	          ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 3, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 41
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Blitzle_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Forretress_1.py]
student_code = 
	print("The dog's house is big and red.")
gpt_feedback = Your code looks fine!
gpt_feedback_length = 4
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Baltoy_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool  
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	    
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    rainfall = False
	    max_rain = 0
	    for forecast in forecasts:
	        reportlist = forecast.reports
	        for report in reportlist:
	            rainlist = report.rainfall
	            for rain in rainlist:
	                if rain.amount > max_rain:
	                    max_rain = rain.amount
	                    max_day = report
	    if report.weather.cloudy:
	        rainfall = True
	    return rainfall            
	
	
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	assert_equal([today, tomorrow], 0)
	assert_equal([soon], 0)
gpt_feedback = The rainiest_cloudy function is not returning the correct result. Let's debug the code to find the issue.
gpt_feedback_length = 17
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function <code class='pedal-name'>rainiest_cloudy</code> was given a definition on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Girafarig_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class WeatherOptions:
	    raining: bool
	    cloudy: bool
	    snowing: bool
	
	@dataclass
	class Measurement:
	    amount: int
	    automatic: bool
	
	@dataclass
	class Report:
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	
	@dataclass
	class Forecast:
	    when: str
	    where: str
	    reports: list[Report]
	
	def get_reports(forecasts: list[Forecast]) -> list[Report]:
	    reports = []
	    for forecast in forecasts:
	        for report in forecast.reports:
	            reports.append(report)
	    return reports
	    
	def rainiest_cloudy(forecasts: list[Forecast]) -> bool:
	    reports = get_reports(forecasts)
	    if not forecasts:
	        return False
	    max_rainfall = reports[0].rainfall[0].amount
	    most_rainy_report = reports[0]
	    for report in reports:
	        print(type(report))
	        for measurement in report.rainfall:
	            if measurement.amount > max_rainfall:
	                max_rainfall = measurement.amount
	                most_rainy_report = report
	    return most_rainy_report.weather.cloudy
	
	reports1 = [Report(52, [Measurement(2, True)], WeatherOptions(True, True, False))]
	forecast1 = Forecast('Here', '12:00', reports1)
	forecasts1 = [forecast1]
	
	assert_equal(rainiest_cloudy([forecast1]), True)
gpt_feedback = The code looks good and runs without any errors.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = The function rainiest_cloudy is printing on line 41. However, that function is not supposed to print.
pedal_feedback_length = 16
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Uxie_1.py]
student_code = 
	from dataclasses import dataclass 
	from bakery import assert_equal 
	
	@dataclass
	class Measurement: 
	    amount: int
	    automatic: bool 
	
	@dataclass
	class WeatherOptions: 
	    raining: bool 
	    cloudy: bool 
	    snowing: bool 
	    
	@dataclass
	class Report: 
	    temperature: int
	    rainfall: list[Measurement]
	    weather: WeatherOptions
	      
	@dataclass 
	class Forecast: 
	    when: str
	    where: str
	    reports: list[Report]
	    
	forecasts = [Forecast("Night", "Delaware", [Report(54, [Measurement(2, True), Measurement(1, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(0, True), Measurement(1, True)], WeatherOptions(False, True, True))])] 
	
	forecasts_2 = [Forecast("Night", "Delaware", [Report(54, [Measurement(6, True), Measurement(4, False)], WeatherOptions(True, True, False))]),
	            Forecast("Day", "New York", [Report(32, [Measurement(3, True), Measurement(2, True)], WeatherOptions(True, True, False))])] 
	
	today = Forecast("today", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(2, True)],
	        WeatherOptions(True, True, False)),
	    Report(45, [],
	        WeatherOptions(False, True, False))
	])
	
	tomorrow = Forecast("tomorrow", "Newark, DE", [
	    Report(54, [Measurement(1, True), Measurement(1, True)],
	        WeatherOptions(True, True, False)),
	    Report(65, [Measurement(3, True), Measurement(5, True), Measurement(10, False)],
	        WeatherOptions(True, True, True)),
	    Report(45, [Measurement(20, True)],
	        WeatherOptions(True, False, False))
	])
	
	soon = Forecast("soon", "Newark, DE", [
	    Report(14, [Measurement(5, False)],
	        WeatherOptions(False, True, True))
	])
	
	empty = Forecast("empty", "Newark, DE", [] )   
	    
	def rainiest_cloudy (forecasts: list[Forecast]) -> bool:
	    max_rain = 0
	    is_cloudy = False
	    for forecast in forecasts:
	        for report in forecast.reports:
	            if report.weather.cloudy == True:
	                for rainfall in report.rainfall:
	                    if rainfall.amount > max_rain:
	                        max_rain = rainfall.amount
	                        is_cloudy = True
	            else:
	                is_cloudy = False
	    return is_cloudy
	                    
	
	assert_equal(rainiest_cloudy([empty, empty]), False)
	assert_equal(rainiest_cloudy([today]), True)
	assert_equal(rainiest_cloudy([tomorrow]), False)
gpt_feedback = Great job! Your code correctly checks if there is a forecast with the maximum amount of rainfall when it is cloudy. However, there is a small issue with your code. The variable `is_cloudy` is being set to `False` whenever a report is not cloudy. This means that if there is at least one report that is not cloudy, `is_cloudy` will be set to `False` even if there is a report with the maximum amount of rainfall when it is cloudy. To fix this, you can use a flag variable to keep track of whether there is at least one report that is cloudy.
gpt_feedback_length = 103
gpt_error_type = 
gpt_score = 8
pedal_feedback = The variable <code class='pedal-name'>forecasts</code> was given a value on line 27, but was never used after that.
pedal_feedback_length = 17
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Krookodile_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class = Address
	    number = int
	    street = str
	    city = str
	    state = str
	
	location = Address(18, "Amstel Ave", "Newark", "DE")
	print(location.state)
gpt_feedback = There is a syntax error in your code. The class definition should be `class Address:` instead of `class = Address`.
gpt_feedback_length = 20
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 4.
	
	The traceback was:
	<div class='pedal-traceback'>Line 4 of file <code class='pedal-filename'>bakery_structures_dataclasses_define_address/submissions/Krookodile_1.py</code>
	<pre class='pedal-python-code python'><code>class = Address
	      ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 4, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 39
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Vanillish_1.py]
student_code = 
	from dataclasses import dataclass
	
	@dataclass
	class Address:
	    number: int
	    street: str
	    city: str
	    state: str
	    
	location = Address(18,'Amstel Ave', 'Newark','DE')
	print(location.state)
gpt_feedback = The code looks good and should run without any errors.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Cyndaquil_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour:int
	    eggs:int
	    milk:int
	    sugar:int
	    
	def merg_recipes(rec:Recipe, rec2:Recipe) -> Recipe:
	     rec = Recipe(1,3,2,2)
	         rec2 = Recipe(3,4,2,4):
	            return rec + rec2
gpt_feedback = There are a few issues with your code:
	1. You have unnecessary indentation on lines 8 and 9.
	2. You are trying to add two Recipe objects, which is not supported by the + operator.
	3. You are reassigning the rec and rec2 variables inside the function, which is not necessary.
	
	To fix these issues, remove the unnecessary indentation, use the individual attributes of the Recipe objects to perform the addition, and remove the unnecessary reassignments of rec and rec2.
gpt_feedback_length = 76
gpt_error_type = 
gpt_score = 5
pedal_feedback = Bad indentation on line 13 or adjacent line.
	
	The traceback was:
	<div class='pedal-traceback'>Line 13 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Cyndaquil_1.py</code>
	<pre class='pedal-python-code python'><code>         rec2 = Recipe(3,4,2,4):
	        ^</code></pre>
	</div>
	Unexpected indent.
	Suggestion: Check line 13, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 53
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Darumaka_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Recipe:
	    flour: int
	    eggs: int
	    milk: int
	    sugar: int
	
	def merge_recipes (rec1:Recipe, rec2:Recipe)->Recipe:
	    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	
	assert_equal(merge recipies(1,2,1,3,1,2,3,2), 3,4,3,5)
gpt_feedback = There are a few issues with your code:
	
	1. The function `merge_recipes` is missing a colon at the end of the function definition.
	2. The function `merge_recipes` is expecting two `Recipe` objects as arguments, but you are passing individual integers instead.
	3. There is a typo in the `assert_equal` statement, it should be `merge_recipes` instead of `merge recipies`.
	4. The arguments passed to `merge_recipes` in the `assert_equal` statement are not valid. You should pass two `Recipe` objects instead of individual integers.
gpt_feedback_length = 77
gpt_error_type = 
gpt_score = 7
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_merge_recipes/submissions/Darumaka_1.py</code>
	<pre class='pedal-python-code python'><code>    return rec1.flour + rec2.flour, rec1.eggs + rec2.eggs, rec1.milk + rec2.milk, rec1.suagr rec2.sugar
	                                                                                             ^</code></pre>
	</div>
	Invalid syntax.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 139
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Anorith_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	
	def point_turtle(turt: Turtle, direct: int) -> Turtle:
	    turt.direction = direct
	    return turt
	
	assert_equal(point_turtle(Turtle(2, 1), 3), Turtle(2, 3))
	assert_equal(point_turtle(Turtle(3, 1), 3), Turtle(3, 3))
	assert_equal(point_turtle(Turtle(4, 1), 3), Turtle(4, 3))
gpt_feedback = The code looks correct and the test cases pass.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Luxio_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int 
	    direction: int
	
	def point_turtle(ogTurtle: Turtle, newDirection: int):
	    return Turtle(ogTurtle.speed, newDirection)
	
	assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
gpt_feedback = You are missing a closing parenthesis at the end of the assert_equal statement.
gpt_feedback_length = 13
gpt_error_type = 
gpt_score = 8
pedal_feedback = Bad syntax on line 12.
	
	The traceback was:
	<div class='pedal-traceback'>Line 12 of file <code class='pedal-filename'>bakery_structures_dataclass_ops_point_turtle/submissions/Luxio_1.py</code>
	<pre class='pedal-python-code python'><code>assert_equal(point_turtle(Turtle(10, 5), 10), Turtle(10, 10)
	            ^</code></pre>
	</div>
	'(' was never closed.
	Suggestion: Check line 12, the line before it, and the line after it. Ignore blank lines.
pedal_feedback_length = 49
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Skuntank_1.py]
student_code = 
	from dataclasses import dataclass
	from bakery import assert_equal
	
	@dataclass
	class Turtle:
	    speed: int
	    direction: int
	    
	def point_turtle(t: Turtle, integer: int) -> Turtle:
	    t.direction = integer
	    return Turtle(t.speed, t.direction)
	
	assert_equal(point_turtle(Turtle(10,20),10), Turtle(10,10))
	assert_equal(point_turtle(Turtle(20,20),10), Turtle(20,10))
gpt_feedback = The code looks good and the assertions pass correctly.
gpt_feedback_length = 9
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Phanpy_1.py]
student_code = 
	Mfb=["dark","shark","bee"]
	print(Mfb)
gpt_feedback = 
gpt_feedback_length = 
gpt_error_type = 
gpt_score = -1
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Riolu_1.py]
student_code = 
	my_books = ["Harry Potter", "Percy Jackson", "The Prince of Mist"]
	print(my_books)
gpt_feedback = Great job! You have successfully created a list of books.
gpt_feedback_length = 10
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Torchic_1.py]
student_code = 
	books = ["book1", "book2", "book3"]
	print(books)
gpt_feedback = The code looks good! It will print the list of books.
gpt_feedback_length = 11
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Carvanha_1.py]
student_code = 
	def make_lower(upper_case:str) -> str:
	    message = "THE RENT IS TOO HIGH!"
	    lower_case = message.lower()
	    return message
	
	print(make_lower)
gpt_feedback = You are not calling the function correctly. You should use parentheses after the function name, like this: make_lower().
gpt_feedback_length = 18
gpt_error_type = 
gpt_score = 7
pedal_feedback = Student code failed instructor test.
	I ran your code.
	The variable message was not created.
pedal_feedback_length = 13
pedal_score = 0
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Happiny_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback

[bakery_structures_mutability_code_lower_rent.Victreebel_1.py]
student_code = 
	message = "THE RENT IS TOO HIGH!"
	message = message.lower()
	print(message)
gpt_feedback = Good job converting the message to lowercase!
gpt_feedback_length = 7
gpt_error_type = 
gpt_score = 8
pedal_feedback = Great work!
pedal_feedback_length = 2
pedal_score = 1
rubric_fields
instructor_feedback


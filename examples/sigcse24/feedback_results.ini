[global]
instructor = Instructor
tester = acbart
gpt_model = gpt-3.5-turbo-0613
gpt_prompt = [
	  {
	    "feedback": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "user",
	          "content": "**STUDENT CODE HERE**"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "feedback": {
	              "type": "string",
	              "description": "Helpful tips to guide a student with their problematic code."
	            },
	            "is_error_present": {
	              "type": "boolean",
	              "description": "If there is a problem with the code, this parameter is true."
	            }
	          },
	          "required": [
	            "feedback",
	            "is_error_present"
	          ]
	        }
	      },
	      0.7,
	      0.5
	    ],
	    "score": [
	      [
	        {
	          "role": "system",
	          "content": "You are an intelligent tutor for a introductory computer science course in Python. You never give answers but do give helpful tips to guide students with their code."
	        },
	        {
	          "role": "user",
	          "content": "**STUDENT CODE HERE**"
	        }
	      ],
	      {
	        "name": "add_code_feedback",
	        "description": "Adds feedback on the code for the student to view.",
	        "parameters": {
	          "type": "object",
	          "properties": {
	            "score": {
	              "type": "string",
	              "description": "On a scale from 0 to 10, what would you score their code?"
	            },
	            "error": {
	              "type": "string",
	              "description": "List all the error types the code produces."
	            }
	          },
	          "required": [
	            "score",
	            "error"
	          ]
	        }
	      },
	      0.1,
	      0.5
	    ]
	  },
	  "<function gpt_get_default_prompts.<locals>.process_prompts at 0x00000290BC6E2DC0>"
	]
gpt_prompt_approximate_length = 811

[bakery_for_composition_code_average_problem]
description = Create a function named `average` that consumes a list of numbers and returns their average by combining the results of the given `summate` and `count` function. If the list is empty, produce the special value `None`.

[bakery_for_composition_code_average_problem.Fearow_1.py]
gpt_feedback = HEllo wrold
gpt_feedback_length = 2
gpt_error_type = 
gpt_score = 0
pedal_feedback = 
pedal_feedback_length = -1
pedal_score = -1
rubric_fields
instructor_feedback

[bakery_for_composition_code_average_problem.Ferrothorn_1.py]
gpt_feedback = HEllo wrold
gpt_feedback_length = 2
gpt_error_type = 
gpt_score = 0
pedal_feedback = 
pedal_feedback_length = -1
pedal_score = -1
rubric_fields
instructor_feedback


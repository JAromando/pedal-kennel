$compiledmod = function() {
    var $scope0 = (function($forcegbl) {
        var $gbl = $forcegbl || {},
            $blk = 0,
            $exc = [],
            $loc = $gbl,
            $cell = {},
            $err = undefined;
        $loc.__file__ = new Sk.builtins.str('tifa');
        var $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope0.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        }
        if (Sk.retainGlobals) {
            if (Sk.globals) {
                $gbl = Sk.globals;
                Sk.globals = $gbl;
                $loc = $gbl;
                $loc.__file__ = new Sk.builtins.str('tifa');
            } else {
                Sk.globals = $gbl;
            }
        } else {
            Sk.globals = $gbl;
        }
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- module entry --- */ $ret = Sk.builtin.__import__('ast', $gbl, $loc, [], -1);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $module1 = $ret;
                        $loc.ast = $module1;
                        $ret = Sk.builtin.__import__('pprint', $gbl, $loc, ['pprint'], -1);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $module2 = $ret;
                        var $item3 = Sk.abstr.gattr($module2, new Sk.builtin.str('pprint'));
                        $loc.pprint = $item3;
                        $ret = Sk.builtin.__import__('pedal.report', $gbl, $loc, ['MAIN_REPORT'], -1);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $module4 = $ret;
                        var $item5 = Sk.abstr.gattr($module4, new Sk.builtin.str('MAIN_REPORT'));
                        $loc.MAIN_REPORT = $item5;
                        $ret = Sk.builtin.__import__('pedal.tifa.type_definitions', $gbl, $loc, ['UnknownType', 'RecursedType', 'FunctionType', 'ClassType', 'InstanceType', 'NumType', 'NoneType', 'BoolType', 'TupleType', 'ListType', 'StrType', 'GeneratorType', 'DictType', 'ModuleType', 'SetType', 'type_from_json', 'type_to_literal', 'get_tifa_type', 'LiteralNum', 'LiteralBool', 'LiteralNone', 'LiteralStr', 'LiteralTuple'], -1);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $module6 = $ret;
                        var $item7 = Sk.abstr.gattr($module6, new Sk.builtin.str('UnknownType'));
                        $loc.UnknownType = $item7;
                        var $item8 = Sk.abstr.gattr($module6, new Sk.builtin.str('RecursedType'));
                        $loc.RecursedType = $item8;
                        var $item9 = Sk.abstr.gattr($module6, new Sk.builtin.str('FunctionType'));
                        $loc.FunctionType = $item9;
                        var $item10 = Sk.abstr.gattr($module6, new Sk.builtin.str('ClassType'));
                        $loc.ClassType = $item10;
                        var $item11 = Sk.abstr.gattr($module6, new Sk.builtin.str('InstanceType'));
                        $loc.InstanceType = $item11;
                        var $item12 = Sk.abstr.gattr($module6, new Sk.builtin.str('NumType'));
                        $loc.NumType = $item12;
                        var $item13 = Sk.abstr.gattr($module6, new Sk.builtin.str('NoneType'));
                        $loc.NoneType = $item13;
                        var $item14 = Sk.abstr.gattr($module6, new Sk.builtin.str('BoolType'));
                        $loc.BoolType = $item14;
                        var $item15 = Sk.abstr.gattr($module6, new Sk.builtin.str('TupleType'));
                        $loc.TupleType = $item15;
                        var $item16 = Sk.abstr.gattr($module6, new Sk.builtin.str('ListType'));
                        $loc.ListType = $item16;
                        var $item17 = Sk.abstr.gattr($module6, new Sk.builtin.str('StrType'));
                        $loc.StrType = $item17;
                        var $item18 = Sk.abstr.gattr($module6, new Sk.builtin.str('GeneratorType'));
                        $loc.GeneratorType = $item18;
                        var $item19 = Sk.abstr.gattr($module6, new Sk.builtin.str('DictType'));
                        $loc.DictType = $item19;
                        var $item20 = Sk.abstr.gattr($module6, new Sk.builtin.str('ModuleType'));
                        $loc.ModuleType = $item20;
                        var $item21 = Sk.abstr.gattr($module6, new Sk.builtin.str('SetType'));
                        $loc.SetType = $item21;
                        var $item22 = Sk.abstr.gattr($module6, new Sk.builtin.str('type_from_json'));
                        $loc.type_from_json = $item22;
                        var $item23 = Sk.abstr.gattr($module6, new Sk.builtin.str('type_to_literal'));
                        $loc.type_to_literal = $item23;
                        var $item24 = Sk.abstr.gattr($module6, new Sk.builtin.str('get_tifa_type'));
                        $loc.get_tifa_type = $item24;
                        var $item25 = Sk.abstr.gattr($module6, new Sk.builtin.str('LiteralNum'));
                        $loc.LiteralNum = $item25;
                        var $item26 = Sk.abstr.gattr($module6, new Sk.builtin.str('LiteralBool'));
                        $loc.LiteralBool = $item26;
                        var $item27 = Sk.abstr.gattr($module6, new Sk.builtin.str('LiteralNone'));
                        $loc.LiteralNone = $item27;
                        var $item28 = Sk.abstr.gattr($module6, new Sk.builtin.str('LiteralStr'));
                        $loc.LiteralStr = $item28;
                        var $item29 = Sk.abstr.gattr($module6, new Sk.builtin.str('LiteralTuple'));
                        $loc.LiteralTuple = $item29;
                        $ret = Sk.builtin.__import__('pedal.tifa.builtin_definitions', $gbl, $loc, ['get_builtin_module', 'get_builtin_function'], -1);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $module30 = $ret;
                        var $item31 = Sk.abstr.gattr($module30, new Sk.builtin.str('get_builtin_module'));
                        $loc.get_builtin_module = $item31;
                        var $item32 = Sk.abstr.gattr($module30, new Sk.builtin.str('get_builtin_function'));
                        $loc.get_builtin_function = $item32;
                        $ret = Sk.builtin.__import__('pedal.tifa.type_operations', $gbl, $loc, ['merge_types', 'are_types_equal', 'VALID_UNARYOP_TYPES', 'VALID_BINOP_TYPES', 'ORDERABLE_TYPES', 'INDEXABLE_TYPES'], -1);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $module33 = $ret;
                        var $item34 = Sk.abstr.gattr($module33, new Sk.builtin.str('merge_types'));
                        $loc.merge_types = $item34;
                        var $item35 = Sk.abstr.gattr($module33, new Sk.builtin.str('are_types_equal'));
                        $loc.are_types_equal = $item35;
                        var $item36 = Sk.abstr.gattr($module33, new Sk.builtin.str('VALID_UNARYOP_TYPES'));
                        $loc.VALID_UNARYOP_TYPES = $item36;
                        var $item37 = Sk.abstr.gattr($module33, new Sk.builtin.str('VALID_BINOP_TYPES'));
                        $loc.VALID_BINOP_TYPES = $item37;
                        var $item38 = Sk.abstr.gattr($module33, new Sk.builtin.str('ORDERABLE_TYPES'));
                        $loc.ORDERABLE_TYPES = $item38;
                        var $item39 = Sk.abstr.gattr($module33, new Sk.builtin.str('INDEXABLE_TYPES'));
                        $loc.INDEXABLE_TYPES = $item39;
                        $ret = Sk.builtin.__import__('pedal.tifa.identifier', $gbl, $loc, ['Identifier'], -1);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $module40 = $ret;
                        var $item41 = Sk.abstr.gattr($module40, new Sk.builtin.str('Identifier'));
                        $loc.Identifier = $item41;
                        $ret = Sk.builtin.__import__('pedal.tifa.state', $gbl, $loc, ['State'], -1);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $module42 = $ret;
                        var $item43 = Sk.abstr.gattr($module42, new Sk.builtin.str('State'));
                        $loc.State = $item43;
                        $ret = Sk.builtin.__import__('pedal.tifa.messages', $gbl, $loc, ['_format_message'], -1);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $module44 = $ret;
                        var $item45 = Sk.abstr.gattr($module44, new Sk.builtin.str('_format_message'));
                        $loc._format_message = $item45;
                        var $elem47 = $scope0.$const46;
                        var $loadlist48 = new Sk.builtins['list']([$elem47]);
                        $loc.__all__ = $loadlist48;
                        var $loadname49 = $loc.ast !== undefined ? $loc.ast : Sk.misceval.loadname('ast', $gbl);;
                        $ret = Sk.abstr.gattr($loadname49, $scope0.$const50, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr51 = $ret;
                        $scope52.co_name = new Sk.builtins['str']('Tifa');
                        var $built2896 = Sk.misceval.buildClass($gbl, $scope52, 'Tifa', [$lattr51], $cell);
                        $loc.Tifa = $built2896;
                        return $loc;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '<module>'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope0.$const46 = new Sk.builtin.str('Tifa');
    $scope0.$const50 = new Sk.builtin.str('NodeVisitor');
    var $scope52 = (function $Tifa$class_outer($globals, $locals, $cell) {
        var $gbl = $globals,
            $loc = $locals;
        $free = $globals;
        (function $Tifa$_closure($cell) {
            var $blk = 0,
                $exc = [],
                $ret = undefined,
                $postfinally = undefined,
                $currLineNo = undefined,
                $currColNo = undefined;
            $currSource = undefined;
            if (typeof Sk.execStart === 'undefined') {
                Sk.execStart = Date.now();
                Sk.execPaused = 0
            }
            while (true) {
                try {
                    var $dateNow = Date.now();
                    if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                        throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                    }
                    switch ($blk) {
                        case 0:
                            /* --- class entry --- */ $scope54.co_name = new Sk.builtins['str']('__init__');
                            $scope54.$defaults = [Sk.builtin.bool.true$, Sk.builtin.none.none$];
                            $scope54.co_varnames = ['self', 'python_3', 'report'];
                            var $funcobj64 = new Sk.builtins['function']($scope54, $gbl);
                            $loc.__init__ = $funcobj64;
                            $scope65.co_name = new Sk.builtins['str']('_initialize_report');
                            $scope65.co_varnames = ['self'];
                            var $funcobj79 = new Sk.builtins['function']($scope65, $gbl);
                            $loc._initialize_report = $funcobj79;
                            $scope80.co_name = new Sk.builtins['str']('report_issue');
                            $scope80.$defaults = [Sk.builtin.none.none$];
                            $scope80.co_varnames = ['self', 'issue', 'data'];
                            var $funcobj125 = new Sk.builtins['function']($scope80, $gbl);
                            $loc.report_issue = $funcobj125;
                            $scope126.co_name = new Sk.builtins['str']('locate');
                            $scope126.$defaults = [Sk.builtin.none.none$];
                            $scope126.co_varnames = ['self', 'node'];
                            var $funcobj148 = new Sk.builtins['function']($scope126, $gbl);
                            $loc.locate = $funcobj148;
                            $scope150.co_name = new Sk.builtins['str']('process_code');
                            $scope150.$defaults = [$scope52.$const149];
                            $scope150.co_varnames = ['self', 'code', 'filename'];
                            var $funcobj208 = new Sk.builtins['function']($scope150, $gbl);
                            $loc.process_code = $funcobj208;
                            $scope209.co_name = new Sk.builtins['str']('process_ast');
                            $scope209.co_varnames = ['self', 'ast_tree'];
                            var $funcobj233 = new Sk.builtins['function']($scope209, $gbl);
                            $loc.process_ast = $funcobj233;
                            $scope234.co_name = new Sk.builtins['str']('_collect_top_level_variables');
                            $scope234.co_varnames = ['self'];
                            var $funcobj276 = new Sk.builtins['function']($scope234, $gbl);
                            $loc._collect_top_level_variables = $funcobj276;
                            $scope277.co_name = new Sk.builtins['str']('_reset');
                            $scope277.co_varnames = ['self'];
                            var $funcobj313 = new Sk.builtins['function']($scope277, $gbl);
                            $loc._reset = $funcobj313;
                            $scope314.co_name = new Sk.builtins['str']('find_variable_scope');
                            $scope314.co_varnames = ['self', 'name'];
                            var $funcobj354 = new Sk.builtins['function']($scope314, $gbl);
                            $loc.find_variable_scope = $funcobj354;
                            $scope355.co_name = new Sk.builtins['str']('find_variable_out_of_scope');
                            $scope355.co_varnames = ['self', 'name'];
                            var $funcobj382 = new Sk.builtins['function']($scope355, $gbl);
                            $loc.find_variable_out_of_scope = $funcobj382;
                            $scope383.co_name = new Sk.builtins['str']('find_path_parent');
                            $scope383.co_varnames = ['self', 'path_id', 'name'];
                            var $funcobj409 = new Sk.builtins['function']($scope383, $gbl);
                            $loc.find_path_parent = $funcobj409;
                            $scope410.co_name = new Sk.builtins['str']('_finish_scope');
                            $scope410.co_varnames = ['self'];
                            var $funcobj463 = new Sk.builtins['function']($scope410, $gbl);
                            $loc._finish_scope = $funcobj463;
                            $scope464.co_name = new Sk.builtins['str']('visit');
                            $scope464.co_varnames = ['self', 'node'];
                            var $funcobj525 = new Sk.builtins['function']($scope464, $gbl);
                            $loc.visit = $funcobj525;
                            $scope526.co_name = new Sk.builtins['str']('_visit_nodes');
                            $scope526.co_varnames = ['self', 'nodes'];
                            var $funcobj540 = new Sk.builtins['function']($scope526, $gbl);
                            $loc._visit_nodes = $funcobj540;
                            $scope541.co_name = new Sk.builtins['str']('walk_targets');
                            $scope541.co_varnames = ['self', 'targets', 'type', 'walker'];
                            var $funcobj547 = new Sk.builtins['function']($scope541, $gbl);
                            $loc.walk_targets = $funcobj547;
                            $scope548.co_name = new Sk.builtins['str']('_walk_target');
                            $scope548.co_varnames = ['self', 'target', 'type'];
                            var $funcobj601 = new Sk.builtins['function']($scope548, $gbl);
                            $loc._walk_target = $funcobj601;
                            $scope602.co_name = new Sk.builtins['str']('visit_AnnAssign');
                            $scope602.co_varnames = ['self', 'node'];
                            var $funcobj605 = new Sk.builtins['function']($scope602, $gbl);
                            $loc.visit_AnnAssign = $funcobj605;
                            $scope606.co_name = new Sk.builtins['str']('visit_Assign');
                            $scope606.co_varnames = ['self', 'node'];
                            var $funcobj625 = new Sk.builtins['function']($scope606, $gbl);
                            $loc.visit_Assign = $funcobj625;
                            $scope626.co_name = new Sk.builtins['str']('assign_target');
                            $scope626.co_varnames = ['self', 'target', 'type'];
                            var $funcobj757 = new Sk.builtins['function']($scope626, $gbl);
                            $loc.assign_target = $funcobj757;
                            $scope758.co_name = new Sk.builtins['str']('visit_AugAssign');
                            $scope758.co_varnames = ['self', 'node'];
                            var $funcobj831 = new Sk.builtins['function']($scope758, $gbl);
                            $loc.visit_AugAssign = $funcobj831;
                            $scope832.co_name = new Sk.builtins['str']('visit_Attribute');
                            $scope832.co_varnames = ['self', 'node'];
                            var $funcobj848 = new Sk.builtins['function']($scope832, $gbl);
                            $loc.visit_Attribute = $funcobj848;
                            $scope849.co_name = new Sk.builtins['str']('visit_BinOp');
                            $scope849.co_varnames = ['self', 'node'];
                            var $funcobj911 = new Sk.builtins['function']($scope849, $gbl);
                            $loc.visit_BinOp = $funcobj911;
                            $scope912.co_name = new Sk.builtins['str']('visit_Bool');
                            $scope912.co_varnames = ['self', 'node'];
                            var $funcobj916 = new Sk.builtins['function']($scope912, $gbl);
                            $loc.visit_Bool = $funcobj916;
                            $scope917.co_name = new Sk.builtins['str']('visit_BoolOp');
                            $scope917.co_varnames = ['self', 'node'];
                            var $funcobj932 = new Sk.builtins['function']($scope917, $gbl);
                            $loc.visit_BoolOp = $funcobj932;
                            $scope933.co_name = new Sk.builtins['str']('visit_Call');
                            $scope933.co_varnames = ['self', 'node'];
                            var $funcobj1033 = new Sk.builtins['function']($scope933, $gbl);
                            $loc.visit_Call = $funcobj1033;
                            $scope1034.co_name = new Sk.builtins['str']('visit_ClassDef');
                            $scope1034.co_varnames = ['self', 'node'];
                            var $funcobj1058 = new Sk.builtins['function']($scope1034, $gbl);
                            $loc.visit_ClassDef = $funcobj1058;
                            $scope1059.co_name = new Sk.builtins['str']('visit_Compare');
                            $scope1059.co_varnames = ['self', 'node'];
                            var $funcobj1152 = new Sk.builtins['function']($scope1059, $gbl);
                            $loc.visit_Compare = $funcobj1152;
                            $scope1153.co_name = new Sk.builtins['str']('_visit_collection_loop');
                            $scope1153.co_varnames = ['self', 'node'];
                            var $funcobj1243 = new Sk.builtins['function']($scope1153, $gbl);
                            $loc._visit_collection_loop = $funcobj1243;
                            $scope1244.co_name = new Sk.builtins['str']('visit_comprehension');
                            $scope1244.co_varnames = ['self', 'node'];
                            var $funcobj1256 = new Sk.builtins['function']($scope1244, $gbl);
                            $loc.visit_comprehension = $funcobj1256;
                            $scope1257.co_name = new Sk.builtins['str']('visit_Dict');
                            $scope1257.co_varnames = ['self', 'node'];
                            var $funcobj1307 = new Sk.builtins['function']($scope1257, $gbl);
                            $loc.visit_Dict = $funcobj1307;
                            $scope1308.co_name = new Sk.builtins['str']('visit_DictComp');
                            $scope1308.co_varnames = ['self', 'node'];
                            var $funcobj1327 = new Sk.builtins['function']($scope1308, $gbl);
                            $loc.visit_DictComp = $funcobj1327;
                            $scope1328.co_name = new Sk.builtins['str']('visit_For');
                            $scope1328.co_varnames = ['self', 'node'];
                            var $funcobj1342 = new Sk.builtins['function']($scope1328, $gbl);
                            $loc.visit_For = $funcobj1342;
                            $scope1343.co_name = new Sk.builtins['str']('visit_FunctionDef');
                            $scope1343.co_varnames = ['self', 'node'];
                            var $funcobj1503 = new Sk.builtins['function']($scope1343, $gbl);
                            $loc.visit_FunctionDef = $funcobj1503;
                            $scope1504.co_name = new Sk.builtins['str']('visit_GeneratorExp');
                            $scope1504.co_varnames = ['self', 'node'];
                            var $funcobj1519 = new Sk.builtins['function']($scope1504, $gbl);
                            $loc.visit_GeneratorExp = $funcobj1519;
                            $scope1520.co_name = new Sk.builtins['str']('visit_If');
                            $scope1520.co_varnames = ['self', 'node'];
                            var $funcobj1606 = new Sk.builtins['function']($scope1520, $gbl);
                            $loc.visit_If = $funcobj1606;
                            $scope1607.co_name = new Sk.builtins['str']('visit_IfExp');
                            $scope1607.co_varnames = ['self', 'node'];
                            var $funcobj1627 = new Sk.builtins['function']($scope1607, $gbl);
                            $loc.visit_IfExp = $funcobj1627;
                            $scope1628.co_name = new Sk.builtins['str']('visit_Import');
                            $scope1628.co_varnames = ['self', 'node'];
                            var $funcobj1648 = new Sk.builtins['function']($scope1628, $gbl);
                            $loc.visit_Import = $funcobj1648;
                            $scope1649.co_name = new Sk.builtins['str']('visit_ImportFrom');
                            $scope1649.co_varnames = ['self', 'node'];
                            var $funcobj1689 = new Sk.builtins['function']($scope1649, $gbl);
                            $loc.visit_ImportFrom = $funcobj1689;
                            $scope1690.co_name = new Sk.builtins['str']('visit_Lambda');
                            $scope1690.co_varnames = ['self', 'node'];
                            var $funcobj1766 = new Sk.builtins['function']($scope1690, $gbl);
                            $loc.visit_Lambda = $funcobj1766;
                            $scope1767.co_name = new Sk.builtins['str']('visit_List');
                            $scope1767.co_varnames = ['self', 'node'];
                            var $funcobj1782 = new Sk.builtins['function']($scope1767, $gbl);
                            $loc.visit_List = $funcobj1782;
                            $scope1783.co_name = new Sk.builtins['str']('visit_ListComp');
                            $scope1783.co_varnames = ['self', 'node'];
                            var $funcobj1798 = new Sk.builtins['function']($scope1783, $gbl);
                            $loc.visit_ListComp = $funcobj1798;
                            $scope1799.co_name = new Sk.builtins['str']('visit_NameConstant');
                            $scope1799.co_varnames = ['self', 'node'];
                            var $funcobj1811 = new Sk.builtins['function']($scope1799, $gbl);
                            $loc.visit_NameConstant = $funcobj1811;
                            $scope1812.co_name = new Sk.builtins['str']('visit_Name');
                            $scope1812.co_varnames = ['self', 'node'];
                            var $funcobj1876 = new Sk.builtins['function']($scope1812, $gbl);
                            $loc.visit_Name = $funcobj1876;
                            $scope1877.co_name = new Sk.builtins['str']('visit_Num');
                            $scope1877.co_varnames = ['self', 'node'];
                            var $funcobj1881 = new Sk.builtins['function']($scope1877, $gbl);
                            $loc.visit_Num = $funcobj1881;
                            $scope1882.co_name = new Sk.builtins['str']('visit_Return');
                            $scope1882.co_varnames = ['self', 'node'];
                            var $funcobj1912 = new Sk.builtins['function']($scope1882, $gbl);
                            $loc.visit_Return = $funcobj1912;
                            $scope1913.co_name = new Sk.builtins['str']('visit_SetComp');
                            $scope1913.co_varnames = ['self', 'node'];
                            var $funcobj1928 = new Sk.builtins['function']($scope1913, $gbl);
                            $loc.visit_SetComp = $funcobj1928;
                            $scope1929.co_name = new Sk.builtins['str']('visit_statements');
                            $scope1929.co_varnames = ['self', 'nodes'];
                            var $funcobj1951 = new Sk.builtins['function']($scope1929, $gbl);
                            $loc.visit_statements = $funcobj1951;
                            $scope1952.co_name = new Sk.builtins['str']('visit_Str');
                            $scope1952.co_varnames = ['self', 'node'];
                            var $funcobj1964 = new Sk.builtins['function']($scope1952, $gbl);
                            $loc.visit_Str = $funcobj1964;
                            $scope1965.co_name = new Sk.builtins['str']('visit_Subscript');
                            $scope1965.co_varnames = ['self', 'node'];
                            var $funcobj2036 = new Sk.builtins['function']($scope1965, $gbl);
                            $loc.visit_Subscript = $funcobj2036;
                            $scope2037.co_name = new Sk.builtins['str']('visit_Tuple');
                            $scope2037.co_varnames = ['self', 'node'];
                            var $funcobj2055 = new Sk.builtins['function']($scope2037, $gbl);
                            $loc.visit_Tuple = $funcobj2055;
                            $scope2056.co_name = new Sk.builtins['str']('visit_UnaryOp');
                            $scope2056.co_varnames = ['self', 'node'];
                            var $funcobj2102 = new Sk.builtins['function']($scope2056, $gbl);
                            $loc.visit_UnaryOp = $funcobj2102;
                            $scope2103.co_name = new Sk.builtins['str']('visit_While');
                            $scope2103.co_varnames = ['self', 'node'];
                            var $funcobj2156 = new Sk.builtins['function']($scope2103, $gbl);
                            $loc.visit_While = $funcobj2156;
                            $scope2157.co_name = new Sk.builtins['str']('visit_With');
                            $scope2157.co_varnames = ['self', 'node'];
                            var $funcobj2181 = new Sk.builtins['function']($scope2157, $gbl);
                            $loc.visit_With = $funcobj2181;
                            $scope2182.co_name = new Sk.builtins['str']('_scope_chain_str');
                            $scope2182.$defaults = [Sk.builtin.none.none$];
                            $scope2182.co_varnames = ['self', 'name'];
                            var $funcobj2203 = new Sk.builtins['function']($scope2182, $gbl);
                            $loc._scope_chain_str = $funcobj2203;
                            $scope2204.co_name = new Sk.builtins['str']('identify_caller');
                            $scope2204.co_varnames = ['self', 'node'];
                            var $funcobj2242 = new Sk.builtins['function']($scope2204, $gbl);
                            $loc.identify_caller = $funcobj2242;
                            $scope2243.co_name = new Sk.builtins['str']('iterate_variable');
                            $scope2243.$defaults = [Sk.builtin.none.none$];
                            $scope2243.co_varnames = ['self', 'name', 'position'];
                            var $funcobj2249 = new Sk.builtins['function']($scope2243, $gbl);
                            $loc.iterate_variable = $funcobj2249;
                            $scope2250.co_name = new Sk.builtins['str']('store_iter_variable');
                            $scope2250.$defaults = [Sk.builtin.none.none$];
                            $scope2250.co_varnames = ['self', 'name', 'type', 'position'];
                            var $funcobj2257 = new Sk.builtins['function']($scope2250, $gbl);
                            $loc.store_iter_variable = $funcobj2257;
                            $scope2258.co_name = new Sk.builtins['str']('return_variable');
                            $scope2258.co_varnames = ['self', 'type'];
                            var $funcobj2264 = new Sk.builtins['function']($scope2258, $gbl);
                            $loc.return_variable = $funcobj2264;
                            $scope2265.co_name = new Sk.builtins['str']('append_variable');
                            $scope2265.$defaults = [Sk.builtin.none.none$];
                            $scope2265.co_varnames = ['self', 'name', 'type', 'position'];
                            var $funcobj2270 = new Sk.builtins['function']($scope2265, $gbl);
                            $loc.append_variable = $funcobj2270;
                            $scope2271.co_name = new Sk.builtins['str']('store_variable');
                            $scope2271.$defaults = [Sk.builtin.none.none$];
                            $scope2271.co_varnames = ['self', 'name', 'type', 'position'];
                            var $funcobj2366 = new Sk.builtins['function']($scope2271, $gbl);
                            $loc.store_variable = $funcobj2366;
                            $scope2367.co_name = new Sk.builtins['str']('load_variable');
                            $scope2367.$defaults = [Sk.builtin.none.none$];
                            $scope2367.co_varnames = ['self', 'name', 'position'];
                            var $funcobj2451 = new Sk.builtins['function']($scope2367, $gbl);
                            $loc.load_variable = $funcobj2451;
                            $scope2452.co_name = new Sk.builtins['str']('load_module');
                            $scope2452.co_varnames = ['self', 'chain'];
                            var $funcobj2510 = new Sk.builtins['function']($scope2452, $gbl);
                            $loc.load_module = $funcobj2510;
                            $scope2511.co_name = new Sk.builtins['str']('combine_states');
                            $scope2511.co_varnames = ['self', 'left', 'right'];
                            var $funcobj2596 = new Sk.builtins['function']($scope2511, $gbl);
                            $loc.combine_states = $funcobj2596;
                            $scope2597.co_name = new Sk.builtins['str']('merge_paths');
                            $scope2597.co_varnames = ['self', 'parent_path_id', 'left_path_id', 'right_path_id'];
                            var $funcobj2646 = new Sk.builtins['function']($scope2597, $gbl);
                            $loc.merge_paths = $funcobj2646;
                            $scope2647.co_name = new Sk.builtins['str']('trace_state');
                            $scope2647.co_varnames = ['self', 'state', 'method', 'position'];
                            var $funcobj2653 = new Sk.builtins['function']($scope2647, $gbl);
                            $loc.trace_state = $funcobj2653;
                            var $loadname2654 = $loc.staticmethod !== undefined ? $loc.staticmethod : Sk.misceval.loadname('staticmethod', $gbl);;
                            $scope2655.co_name = new Sk.builtins['str']('in_scope');
                            $scope2655.$decorators = [$loadname2654];
                            $scope2655.co_varnames = ['full_name', 'scope_chain'];
                            $ret = Sk.misceval.callsimOrSuspendArray($scope2655.$decorators[0], [new Sk.builtins['function']($scope2655, $gbl)]);
                            if ($ret && $ret.$isSuspension) {
                                $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                            }
                            var $funcobj2676 = $ret;
                            $loc.in_scope = $funcobj2676;
                            var $loadname2677 = $loc.staticmethod !== undefined ? $loc.staticmethod : Sk.misceval.loadname('staticmethod', $gbl);;
                            $scope2678.co_name = new Sk.builtins['str']('match_rso');
                            $scope2678.$decorators = [$loadname2677];
                            $scope2678.co_varnames = ['left', 'right'];
                            $ret = Sk.misceval.callsimOrSuspendArray($scope2678.$decorators[0], [new Sk.builtins['function']($scope2678, $gbl)]);
                            if ($ret && $ret.$isSuspension) {
                                $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                            }
                            var $funcobj2684 = $ret;
                            $loc.match_rso = $funcobj2684;
                            $scope2685.co_name = new Sk.builtins['str']('get_literal');
                            $scope2685.co_varnames = ['self', 'node'];
                            var $funcobj2757 = new Sk.builtins['function']($scope2685, $gbl);
                            $loc.get_literal = $funcobj2757;
                            $scope2758.co_name = new Sk.builtins['str']('NewPath');
                            var $built2826 = Sk.misceval.buildClass($gbl, $scope2758, 'NewPath', [], $cell);
                            $loc.NewPath = $built2826;
                            $scope2827.co_name = new Sk.builtins['str']('NewScope');
                            var $built2895 = Sk.misceval.buildClass($gbl, $scope2827, 'NewScope', [], $cell);
                            $loc.NewScope = $built2895;
                            return;
                            throw new Sk.builtin.SystemError('internal error: unterminated block');
                    }
                } catch (err) {
                    if (err instanceof Sk.builtin.TimeLimitError) {
                        Sk.execStart = Date.now();
                        Sk.execPaused = 0
                    }
                    if (!(err instanceof Sk.builtin.BaseException)) {
                        err = new Sk.builtin.ExternalError(err);
                    }
                    Sk.err = err;
                    err.traceback.push({
                        lineno: $currLineNo,
                        colno: $currColNo,
                        source: $currSource,
                        filename: 'tifa',
                        scope: 'Tifa'
                    });
                    if ($exc.length > 0) {
                        $err = err;
                        $blk = $exc.pop();
                        continue
                    } else {
                        throw err;
                    }
                }
            }
        }).call(null, $cell);
    });
    $scope52.$const53 = new Sk.builtin.str('\n    TIFA Class for traversing an AST and finding common issues.\n\n    Args:\n        python_3 (bool): Whether to parse the code in regular PYTHON_3 mode or\n                         the modified AST that Skulpt uses.\n        report (Report): The report object to store data and feedback in. If\n                         left None, defaults to the global MAIN_REPORT.\n    ');
    $scope52.$const149 = new Sk.builtin.str('__main__');
    var $scope54 = (function $__init__55$(self, python_3, report) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope54.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (python_3 === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'python_3\' referenced before assignment');
                        }
                        if (report === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'report\' referenced before assignment');
                        }
                        if (report === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'report\' referenced before assignment');
                        }
                        var $compareres56 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(report, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres56 = $ret;
                        var $jfalse57 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse57) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- done --- */ var $jfalse58 = ($compareres56 === false || !Sk.misceval.isTrue($compareres56));
                        if ($jfalse58) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        var $loadgbl59 = Sk.misceval.loadname('MAIN_REPORT', $gbl);
                        report = $loadgbl59;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (report === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'report\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope54.$const60, report, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope54.$const61, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr62 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr62);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call63 = $ret;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '__init__'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope54.$const60 = new Sk.builtin.str('report');
    $scope54.$const61 = new Sk.builtin.str('_initialize_report');
    var $scope65 = (function $_initialize_report66$(self) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope65.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        var $loaddict69 = new Sk.builtins['dict']([]);
                        var $loaddict71 = new Sk.builtins['dict']([]);
                        var $loaddict73 = new Sk.builtins['dict']([]);
                        var $loaddict75 = new Sk.builtins['dict']([$scope65.$const68, Sk.builtin.bool.true$, $scope65.$const70, $loaddict69, $scope65.$const72, $loaddict71, $scope65.$const74, $loaddict73]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope65.$const76, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr77 = $ret;
                        $ret = Sk.abstr.objectSetItem($lattr77, $scope65.$const78, $loaddict75, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '_initialize_report'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope65.$const67 = new Sk.builtin.str('\n        Initialize a successful report with possible set of issues.\n        ');
    $scope65.$const68 = new Sk.builtin.str('success');
    $scope65.$const70 = new Sk.builtin.str('variables');
    $scope65.$const72 = new Sk.builtin.str('top_level_variables');
    $scope65.$const74 = new Sk.builtin.str('issues');
    $scope65.$const76 = new Sk.builtin.str('report');
    $scope65.$const78 = new Sk.builtin.str('tifa');
    var $scope80 = (function $report_issue81$(self, issue, data) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope80.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (issue === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'issue\' referenced before assignment');
                        }
                        if (data === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'data\' referenced before assignment');
                        }
                        if (data === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'data\' referenced before assignment');
                        }
                        var $compareres83 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(data, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres83 = $ret;
                        var $jfalse84 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse84) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- done --- */ var $jfalse85 = ($compareres83 === false || !Sk.misceval.isTrue($compareres83));
                        if ($jfalse85) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        var $loaddict86 = new Sk.builtins['dict']([]);
                        data = $loaddict86;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ var $compareres88 = null;
                        if (data === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'data\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($scope80.$const87, data, 'NotIn', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres88 = $ret;
                        var $jfalse89 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse89) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- done --- */ var $jfalse90 = ($compareres88 === false || !Sk.misceval.isTrue($compareres88));
                        if ($jfalse90) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope80.$const91, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr92 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr92);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call93 = $ret;
                        if (data === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'data\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem(data, $scope80.$const87, $call93, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ var $loadgbl94 = Sk.misceval.loadname('_format_message', $gbl);
                        if (issue === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'issue\' referenced before assignment');
                        }
                        if (data === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'data\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl94, [issue, data]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call95 = $ret;
                        if (data === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'data\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem(data, $scope80.$const96, $call95, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (issue === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'issue\' referenced before assignment');
                        }
                        var $compareres97 = null;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope80.$const98, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr99 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr99, $scope80.$const100, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr101 = $ret;
                        $ret = Sk.abstr.objectGetItem($lsubscr101, $scope80.$const102, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr103 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(issue, $lsubscr103, 'NotIn', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres97 = $ret;
                        var $jfalse104 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse104) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- done --- */ var $jfalse105 = ($compareres97 === false || !Sk.misceval.isTrue($compareres97));
                        if ($jfalse105) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        var $loadlist106 = new Sk.builtins['list']([]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope80.$const98, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr107 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr107, $scope80.$const100, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr108 = $ret;
                        $ret = Sk.abstr.objectGetItem($lsubscr108, $scope80.$const102, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr109 = $ret;
                        if (issue === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'issue\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem($lsubscr109, issue, $loadlist106, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope80.$const98, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr110 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr110, $scope80.$const100, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr111 = $ret;
                        $ret = Sk.abstr.objectGetItem($lsubscr111, $scope80.$const102, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr112 = $ret;
                        if (issue === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'issue\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lsubscr112, issue, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr113 = $ret;
                        $ret = Sk.abstr.gattr($lsubscr113, $scope80.$const114, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr115 = $ret;
                        if (data === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'data\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr115, [data]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call116 = $ret;
                        if (data === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'data\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem(data, $scope80.$const96, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr117 = $ret;
                        var $jfalse118 = ($lsubscr117 === false || !Sk.misceval.isTrue($lsubscr117));
                        if ($jfalse118) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope80.$const98, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr119 = $ret;
                        $ret = Sk.abstr.gattr($lattr119, $scope80.$const120, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr121 = $ret;
                        if (issue === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'issue\' referenced before assignment');
                        }
                        if (data === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'data\' referenced before assignment');
                        }
                        $ret = Sk.misceval.applyOrSuspend($lattr121, undefined, undefined, ['category', $scope80.$const122, 'tool', $scope80.$const123, 'mistake', data], [issue]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call124 = $ret;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'report_issue'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope80.$const82 = new Sk.builtin.str('\n        Report the given issue with associated metadata, including the position\n        if not explicitly included.\n        ');
    $scope80.$const87 = new Sk.builtin.str('position');
    $scope80.$const91 = new Sk.builtin.str('locate');
    $scope80.$const96 = new Sk.builtin.str('message');
    $scope80.$const98 = new Sk.builtin.str('report');
    $scope80.$const100 = new Sk.builtin.str('tifa');
    $scope80.$const102 = new Sk.builtin.str('issues');
    $scope80.$const114 = new Sk.builtin.str('append');
    $scope80.$const120 = new Sk.builtin.str('attach');
    $scope80.$const122 = new Sk.builtin.str('Analyzer');
    $scope80.$const123 = new Sk.builtin.str('TIFA');
    var $scope126 = (function $locate127$(self, node) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope126.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $compareres129 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(node, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres129 = $ret;
                        var $jfalse130 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse130) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- done --- */ var $jfalse131 = ($compareres129 === false || !Sk.misceval.isTrue($compareres129));
                        if ($jfalse131) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope126.$const132, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr133 = $ret;
                        var $jfalse134 = ($lattr133 === false || !Sk.misceval.isTrue($lattr133));
                        if ($jfalse134) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope126.$const132, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr135 = $ret;
                        var $unaryop137 = Sk.abstr.numberUnaryOp($scope126.$const136, 'USub');
                        $ret = Sk.abstr.objectGetItem($lattr135, $unaryop137, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr138 = $ret;
                        node = $lsubscr138;
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope126.$const141, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr142 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope126.$const144, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr145 = $ret;
                        var $loaddict147 = new Sk.builtins['dict']([$scope126.$const143, $lattr142, $scope126.$const146, $lattr145]);
                        return $loaddict147;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 4:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope126.$const139, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr140 = $ret;
                        node = $lattr140;
                        $blk = 3; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'locate'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope126.$const128 = new Sk.builtin.str("\n        Return a dictionary representing the current location within the\n        AST.\n\n        Returns:\n            Position dict: A dictionary with the fields 'column' and 'line',\n                           indicating the current position in the source code.\n        ");
    $scope126.$const132 = new Sk.builtin.str('node_chain');
    $scope126.$const136 = new Sk.builtin.int_(1);
    $scope126.$const139 = new Sk.builtin.str('final_node');
    $scope126.$const141 = new Sk.builtin.str('col_offset');
    $scope126.$const143 = new Sk.builtin.str('column');
    $scope126.$const144 = new Sk.builtin.str('lineno');
    $scope126.$const146 = new Sk.builtin.str('line');
    var $scope150 = (function $process_code151$(self, code, filename) {
        var ast_tree, error; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope150.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (code === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'code\' referenced before assignment');
                        }
                        if (filename === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'filename\' referenced before assignment');
                        }
                        var $res153 = null;
                        if (code === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'code\' referenced before assignment');
                        }
                        var $jfalse154 = (code === false || !Sk.misceval.isTrue(code));
                        if ($jfalse154) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (code === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'code\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(code, $scope150.$const155, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr156 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr156, [$scope150.$const157]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call158 = $ret;
                        $res153 = $call158;
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- end of ifexp --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope150.$const160, $res153, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (filename === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'filename\' referenced before assignment');
                        }
                        filename = filename;
                        $exc.push(3);
                        var $loadgbl161 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl161, $scope150.$const162, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr163 = $ret;
                        if (code === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'code\' referenced before assignment');
                        }
                        if (filename === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'filename\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr163, [code, filename]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call164 = $ret;
                        ast_tree = $call164;
                        $exc.pop();
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- orelse --- */ $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- end --- */ $exc.push(7);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope150.$const188, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr189 = $ret;
                        if (ast_tree === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'ast_tree\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr189, [ast_tree]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call190 = $ret;
                        return $call190;
                        $exc.pop();
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- orelse --- */ $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- end --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 1:
                        /* --- next of ifexp --- */ var $loadlist159 = new Sk.builtins['list']([]);
                        $res153 = $loadlist159;
                        $blk = 2; /* jump */
                        continue;
                    case 3:
                        /* --- except_0_ --- */ var $loadgbl165 = Sk.misceval.loadname('Exception', $gbl);
                        var $instance166 = Sk.misceval.isTrue(Sk.builtin.isinstance($err, $loadgbl165));
                        var $jfalse167 = ($instance166 === false || !Sk.misceval.isTrue($instance166));
                        if ($jfalse167) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        error = $err;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope150.$const168, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr169 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr169, $scope150.$const170, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr171 = $ret;
                        $ret = Sk.abstr.objectSetItem($lsubscr171, $scope150.$const172, Sk.builtin.bool.false$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (error === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'error\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope150.$const168, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr173 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr173, $scope150.$const170, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr174 = $ret;
                        $ret = Sk.abstr.objectSetItem($lsubscr174, $scope150.$const175, error, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope150.$const168, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr176 = $ret;
                        $ret = Sk.abstr.gattr($lattr176, $scope150.$const177, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr178 = $ret;
                        if (error === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'error\' referenced before assignment');
                        }
                        var $loaddict184 = new Sk.builtins['dict']([$scope150.$const183, $scope150.$const182, $scope150.$const175, error]);
                        $ret = Sk.misceval.applyOrSuspend($lattr178, undefined, undefined, ['category', $scope150.$const180, 'tool', $scope150.$const181, 'mistake', $loaddict184], [$scope150.$const179]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call185 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope150.$const168, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr186 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr186, $scope150.$const170, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr187 = $ret;
                        return $lsubscr187;
                        $blk = 6; /* jump */
                        continue;
                    case 4:
                        /* --- unhandled --- */ throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 7:
                        /* --- except_0_ --- */ var $loadgbl191 = Sk.misceval.loadname('Exception', $gbl);
                        var $instance192 = Sk.misceval.isTrue(Sk.builtin.isinstance($err, $loadgbl191));
                        var $jfalse193 = ($instance192 === false || !Sk.misceval.isTrue($instance192));
                        if ($jfalse193) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        error = $err;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope150.$const168, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr194 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr194, $scope150.$const170, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr195 = $ret;
                        $ret = Sk.abstr.objectSetItem($lsubscr195, $scope150.$const172, Sk.builtin.bool.false$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (error === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'error\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope150.$const168, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr196 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr196, $scope150.$const170, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr197 = $ret;
                        $ret = Sk.abstr.objectSetItem($lsubscr197, $scope150.$const175, error, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope150.$const168, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr198 = $ret;
                        $ret = Sk.abstr.gattr($lattr198, $scope150.$const177, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr199 = $ret;
                        var $loadgbl201 = Sk.misceval.loadname('str', $gbl);
                        if (error === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'error\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl201, [error]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call202 = $ret;
                        var $binop203 = Sk.abstr.numberBinOp($scope150.$const200, $call202, 'Add');
                        if (error === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'error\' referenced before assignment');
                        }
                        var $loaddict204 = new Sk.builtins['dict']([$scope150.$const183, $binop203, $scope150.$const175, error]);
                        $ret = Sk.misceval.applyOrSuspend($lattr199, undefined, undefined, ['category', $scope150.$const180, 'tool', $scope150.$const181, 'mistake', $loaddict204], [$scope150.$const179]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call205 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope150.$const168, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr206 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr206, $scope150.$const170, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr207 = $ret;
                        return $lsubscr207;
                        $blk = 10; /* jump */
                        continue;
                    case 8:
                        /* --- unhandled --- */ throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'process_code'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope150.$const152 = new Sk.builtin.str('\n        Processes the AST of the given source code to generate a report.\n\n        Args:\n            code (str): The Python source code\n            filename (str): The filename of the source code (defaults to __main__)\n        Returns:\n            Report: The successful or successful report object\n        ');
    $scope150.$const155 = new Sk.builtin.str('split');
    $scope150.$const157 = new Sk.builtin.str('\n');
    $scope150.$const160 = new Sk.builtin.str('source');
    $scope150.$const162 = new Sk.builtin.str('parse');
    $scope150.$const168 = new Sk.builtin.str('report');
    $scope150.$const170 = new Sk.builtin.str('tifa');
    $scope150.$const172 = new Sk.builtin.str('success');
    $scope150.$const175 = new Sk.builtin.str('error');
    $scope150.$const177 = new Sk.builtin.str('attach');
    $scope150.$const179 = new Sk.builtin.str('tifa_error');
    $scope150.$const180 = new Sk.builtin.str('Analyzer');
    $scope150.$const181 = new Sk.builtin.str('TIFA');
    $scope150.$const182 = new Sk.builtin.str('Could not parse code');
    $scope150.$const183 = new Sk.builtin.str('message');
    $scope150.$const188 = new Sk.builtin.str('process_ast');
    $scope150.$const200 = new Sk.builtin.str('Could not process code: ');
    var $scope209 = (function $process_ast210$(self, ast_tree) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope209.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (ast_tree === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'ast_tree\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope209.$const212, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr213 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr213);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call214 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope209.$const215, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr216 = $ret;
                        if (ast_tree === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'ast_tree\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr216, [ast_tree]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call217 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope209.$const218, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr219 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope209.$const220, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr221 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr221, $scope209.$const222, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr223 = $ret;
                        $ret = Sk.abstr.objectSetItem($lsubscr223, $scope209.$const224, $lattr219, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope209.$const225, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr226 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr226);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call227 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope209.$const228, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr229 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr229);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call230 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope209.$const220, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr231 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr231, $scope209.$const222, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr232 = $ret;
                        return $lsubscr232;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'process_ast'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope209.$const211 = new Sk.builtin.str('\n        Given an AST, actually performs the type and flow analyses to return a \n        report.\n\n        Args:\n            ast_tree (Ast): The AST object\n        Returns:\n            Report: The final report object created (also available as a field).\n        ');
    $scope209.$const212 = new Sk.builtin.str('_reset');
    $scope209.$const215 = new Sk.builtin.str('visit');
    $scope209.$const218 = new Sk.builtin.str('name_map');
    $scope209.$const220 = new Sk.builtin.str('report');
    $scope209.$const222 = new Sk.builtin.str('tifa');
    $scope209.$const224 = new Sk.builtin.str('variables');
    $scope209.$const225 = new Sk.builtin.str('_finish_scope');
    $scope209.$const228 = new Sk.builtin.str('_collect_top_level_variables');
    var $scope234 = (function $_collect_top_level_variables235$(self) {
        var full_name, main_path_vars, name_$rn$, split_name, top_level_variables; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope234.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope234.$const237, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr238 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr238, $scope234.$const239, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr240 = $ret;
                        $ret = Sk.abstr.objectGetItem($lsubscr240, $scope234.$const241, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr242 = $ret;
                        top_level_variables = $lsubscr242;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope234.$const243, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr244 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope234.$const245, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr246 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr246, $scope234.$const247, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr248 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr244, $lsubscr248, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr249 = $ret;
                        main_path_vars = $lsubscr249;
                        if (main_path_vars === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'main_path_vars\' referenced before assignment');
                        }
                        var $iter250 = Sk.abstr.iter(main_path_vars);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter250, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next251 = $ret;
                        if ($next251 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        full_name = $next251;
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(full_name, $scope234.$const252, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr253 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr253, [$scope234.$const254]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call255 = $ret;
                        split_name = $call255;
                        var $loadgbl256 = Sk.misceval.loadname('len', $gbl);
                        if (split_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'split_name\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl256, [split_name]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call257 = $ret;
                        var $compareres258 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call257, $scope234.$const259, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres258 = $ret;
                        var $jfalse260 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse260) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- done --- */ var $boolopsucc261 = $compareres258;
                        $boolopsucc261 = $compareres258;
                        var $jfalse262 = ($compareres258 === false || !Sk.misceval.isTrue($compareres258));
                        if ($jfalse262) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        if (split_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'split_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem(split_name, $scope234.$const247, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr263 = $ret;
                        var $compareres264 = null;
                        var $loadgbl265 = Sk.misceval.loadname('str', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope234.$const266, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr267 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr267, $scope234.$const247, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr268 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl265, [$lsubscr268]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call269 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lsubscr263, $call269, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres264 = $ret;
                        var $jfalse270 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse270) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- done --- */ $boolopsucc261 = $compareres264;
                        var $jfalse271 = ($compareres264 === false || !Sk.misceval.isTrue($compareres264));
                        if ($jfalse271) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of boolop --- */ var $jfalse272 = ($boolopsucc261 === false || !Sk.misceval.isTrue($boolopsucc261));
                        if ($jfalse272) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        if (split_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'split_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem(split_name, $scope234.$const273, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr274 = $ret;
                        name_$rn$ = $lsubscr274;
                        if (main_path_vars === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'main_path_vars\' referenced before assignment');
                        }
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem(main_path_vars, full_name, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr275 = $ret;
                        if (top_level_variables === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'top_level_variables\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem(top_level_variables, name_$rn$, $lsubscr275, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '_collect_top_level_variables'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope234.$const236 = new Sk.builtin.str('\n        Walk through the variables and add any at the top level to the\n        top_level_variables field of the report.\n        ');
    $scope234.$const237 = new Sk.builtin.str('report');
    $scope234.$const239 = new Sk.builtin.str('tifa');
    $scope234.$const241 = new Sk.builtin.str('top_level_variables');
    $scope234.$const243 = new Sk.builtin.str('name_map');
    $scope234.$const245 = new Sk.builtin.str('path_chain');
    $scope234.$const247 = new Sk.builtin.int_(0);
    $scope234.$const252 = new Sk.builtin.str('split');
    $scope234.$const254 = new Sk.builtin.str('/');
    $scope234.$const259 = new Sk.builtin.int_(2);
    $scope234.$const266 = new Sk.builtin.str('scope_chain');
    $scope234.$const273 = new Sk.builtin.int_(1);
    var $scope277 = (function $_reset278$(self) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope277.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const281, $scope277.$const280, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const282, $scope277.$const280, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const283, $scope277.$const280, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $elem285 = $scope277.$const284;
                        var $loadlist286 = new Sk.builtins['list']([$elem285]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const287, $loadlist286, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $elem288 = $scope277.$const284;
                        var $loadlist289 = new Sk.builtins['list']([$elem288]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const290, $loadlist289, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loadlist291 = new Sk.builtins['list']([]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const292, $loadlist291, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope277.$const282, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr293 = $ret;
                        var $elem294 = $lattr293;
                        var $loadlist295 = new Sk.builtins['list']([$elem294]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const296, $loadlist295, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope277.$const281, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr297 = $ret;
                        var $elem298 = $lattr297;
                        var $loadlist299 = new Sk.builtins['list']([$elem298]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const300, $loadlist299, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loaddict301 = new Sk.builtins['dict']([]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const302, $loaddict301, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loaddict303 = new Sk.builtins['dict']([]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope277.$const302, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr304 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope277.$const281, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr305 = $ret;
                        $ret = Sk.abstr.objectSetItem($lattr304, $lattr305, $loaddict303, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loadlist306 = new Sk.builtins['list']([]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const307, $loadlist306, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loaddict308 = new Sk.builtins['dict']([]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const309, $loaddict308, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const310, Sk.builtin.none.none$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loaddict311 = new Sk.builtins['dict']([]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope277.$const312, $loaddict311, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '_reset'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope277.$const279 = new Sk.builtin.str('\n        Reinitialize fields for maintaining the system\n        ');
    $scope277.$const280 = new Sk.builtin.int_(0);
    $scope277.$const281 = new Sk.builtin.str('path_id');
    $scope277.$const282 = new Sk.builtin.str('scope_id');
    $scope277.$const283 = new Sk.builtin.str('ast_id');
    $scope277.$const284 = new Sk.builtin.str('*Module');
    $scope277.$const287 = new Sk.builtin.str('path_names');
    $scope277.$const290 = new Sk.builtin.str('scope_names');
    $scope277.$const292 = new Sk.builtin.str('node_chain');
    $scope277.$const296 = new Sk.builtin.str('scope_chain');
    $scope277.$const300 = new Sk.builtin.str('path_chain');
    $scope277.$const302 = new Sk.builtin.str('name_map');
    $scope277.$const307 = new Sk.builtin.str('definition_chain');
    $scope277.$const309 = new Sk.builtin.str('path_parents');
    $scope277.$const310 = new Sk.builtin.str('final_node');
    $scope277.$const312 = new Sk.builtin.str('class_scopes');
    var $scope314 = (function $find_variable_scope315$(self, name_$rn$) {
        var full_name, is_root_scope, name_$rn$, path, path_id, scope, scope_level; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope314.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loadgbl317 = Sk.misceval.loadname('enumerate', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope314.$const318, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr319 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl317, [$lattr319]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call320 = $ret;
                        var $iter321 = Sk.abstr.iter($call320);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter321, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next322 = $ret;
                        if ($next322 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        var $items323 = Sk.abstr.sequenceUnpack($next322, 2);
                        scope_level = $items323[0];
                        scope = $items323[1];
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope314.$const324, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr325 = $ret;
                        var $iter326 = Sk.abstr.iter($lattr325);
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter326, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next327 = $ret;
                        if ($next327 === undefined) {
                            $blk = 5;
                            continue;
                        }
                        path_id = $next327;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope314.$const328, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr329 = $ret;
                        if (path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr329, path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr330 = $ret;
                        path = $lsubscr330;
                        $ret = Sk.abstr.gattr($scope314.$const331, $scope314.$const332, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr333 = $ret;
                        var $loadgbl334 = Sk.misceval.loadname('map', $gbl);
                        var $loadgbl335 = Sk.misceval.loadname('str', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope314.$const318, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr336 = $ret;
                        if (scope_level === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'scope_level\' referenced before assignment');
                        }
                        var $slice337 = new Sk.builtins['slice'](scope_level, Sk.builtin.none.none$, Sk.builtin.none.none$);
                        $ret = Sk.abstr.objectGetItem($lattr336, $slice337, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr338 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl334, [$loadgbl335, $lsubscr338]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call339 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr333, [$call339]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call340 = $ret;
                        var $binop341 = Sk.abstr.numberBinOp($call340, $scope314.$const331, 'Add');
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $binop342 = Sk.abstr.numberBinOp($binop341, name_$rn$, 'Add');
                        full_name = $binop342;
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        var $compareres343 = null;
                        if (path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(full_name, path, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres343 = $ret;
                        var $jfalse344 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse344) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- done --- */ var $jfalse345 = ($compareres343 === false || !Sk.misceval.isTrue($compareres343));
                        if ($jfalse345) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        if (scope_level === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'scope_level\' referenced before assignment');
                        }
                        var $compareres346 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(scope_level, $scope314.$const347, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres346 = $ret;
                        var $jfalse348 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse348) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- done --- */ is_root_scope = $compareres346;
                        var $loadgbl349 = Sk.misceval.loadname('Identifier', $gbl);
                        if (is_root_scope === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'is_root_scope\' referenced before assignment');
                        }
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        if (path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path\' referenced before assignment');
                        }
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem(path, full_name, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr350 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl349, [Sk.builtin.bool.true$, is_root_scope, full_name, $lsubscr350]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call351 = $ret;
                        return $call351;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ $blk = 4; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ var $loadgbl352 = Sk.misceval.loadname('Identifier', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl352, [Sk.builtin.bool.false$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call353 = $ret;
                        return $call353;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 5:
                        /* --- for cleanup --- */ $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- for end --- */ $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'find_variable_scope'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope314.$const316 = new Sk.builtin.str('\n        Walk through this scope and all enclosing scopes, finding the relevant\n        identifier given by `name`.\n\n        Args:\n            name (str): The name of the variable\n        Returns:\n            Identifier: An Identifier for the variable, which could potentially\n                        not exist.\n        ');
    $scope314.$const318 = new Sk.builtin.str('scope_chain');
    $scope314.$const324 = new Sk.builtin.str('path_chain');
    $scope314.$const328 = new Sk.builtin.str('name_map');
    $scope314.$const331 = new Sk.builtin.str('/');
    $scope314.$const332 = new Sk.builtin.str('join');
    $scope314.$const347 = new Sk.builtin.int_(0);
    var $scope355 = (function $find_variable_out_of_scope356$(self, name_$rn$) {
        var full_name, name_$rn$, path, unscoped_name; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope355.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope355.$const358, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr359 = $ret;
                        $ret = Sk.abstr.gattr($lattr359, $scope355.$const360, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr361 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr361);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call362 = $ret;
                        var $iter363 = Sk.abstr.iter($call362);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter363, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next364 = $ret;
                        if ($next364 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        path = $next364;
                        if (path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path\' referenced before assignment');
                        }
                        var $iter365 = Sk.abstr.iter(path);
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter365, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next366 = $ret;
                        if ($next366 === undefined) {
                            $blk = 5;
                            continue;
                        }
                        full_name = $next366;
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(full_name, $scope355.$const367, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr368 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr368, [$scope355.$const369]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call370 = $ret;
                        var $unaryop372 = Sk.abstr.numberUnaryOp($scope355.$const371, 'USub');
                        $ret = Sk.abstr.objectGetItem($call370, $unaryop372, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr373 = $ret;
                        unscoped_name = $lsubscr373;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $compareres374 = null;
                        if (unscoped_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'unscoped_name\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(name_$rn$, unscoped_name, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres374 = $ret;
                        var $jfalse375 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse375) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- done --- */ var $jfalse376 = ($compareres374 === false || !Sk.misceval.isTrue($compareres374));
                        if ($jfalse376) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        var $loadgbl377 = Sk.misceval.loadname('Identifier', $gbl);
                        if (unscoped_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'unscoped_name\' referenced before assignment');
                        }
                        if (path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path\' referenced before assignment');
                        }
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem(path, full_name, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr378 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl377, [Sk.builtin.bool.true$, Sk.builtin.bool.false$, unscoped_name, $lsubscr378]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call379 = $ret;
                        return $call379;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ $blk = 4; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ var $loadgbl380 = Sk.misceval.loadname('Identifier', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl380, [Sk.builtin.bool.false$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call381 = $ret;
                        return $call381;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 5:
                        /* --- for cleanup --- */ $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- for end --- */ $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'find_variable_out_of_scope'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope355.$const357 = new Sk.builtin.str('\n        Walk through every scope and determine if this variable can be found\n        elsewhere (which would be an issue).\n\n        Args:\n            name (str): The name of the variable\n        Returns:\n            Identifier: An Identifier for the variable, which could potentially\n                        not exist.\n        ');
    $scope355.$const358 = new Sk.builtin.str('name_map');
    $scope355.$const360 = new Sk.builtin.str('values');
    $scope355.$const367 = new Sk.builtin.str('split');
    $scope355.$const369 = new Sk.builtin.str('/');
    $scope355.$const371 = new Sk.builtin.int_(1);
    var $scope383 = (function $find_path_parent384$(self, path_id, name_$rn$) {
        var name_$rn$, path_parent; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope383.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path_id\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $compareres385 = null;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope383.$const386, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr387 = $ret;
                        if (path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr387, path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr388 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(name_$rn$, $lsubscr388, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres385 = $ret;
                        var $jfalse389 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse389) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- done --- */ var $jfalse390 = ($compareres385 === false || !Sk.misceval.isTrue($compareres385));
                        if ($jfalse390) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        var $loadgbl391 = Sk.misceval.loadname('Identifier', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope383.$const386, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr392 = $ret;
                        if (path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr392, path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr393 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lsubscr393, name_$rn$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr394 = $ret;
                        $ret = Sk.misceval.applyOrSuspend($loadgbl391, undefined, undefined, ['state', $lsubscr394], [Sk.builtin.bool.true$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call395 = $ret;
                        return $call395;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope383.$const396, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr397 = $ret;
                        $ret = Sk.abstr.gattr($lattr397, $scope383.$const398, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr399 = $ret;
                        if (path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path_id\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr399, [path_id]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call400 = $ret;
                        path_parent = $call400;
                        if (path_parent === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path_parent\' referenced before assignment');
                        }
                        var $compareres401 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(path_parent, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres401 = $ret;
                        var $jfalse402 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse402) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- done --- */ var $jfalse403 = ($compareres401 === false || !Sk.misceval.isTrue($compareres401));
                        if ($jfalse403) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        var $loadgbl404 = Sk.misceval.loadname('Identifier', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl404, [Sk.builtin.bool.false$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call405 = $ret;
                        return $call405;
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 5:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope383.$const406, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr407 = $ret;
                        if (path_parent === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path_parent\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr407, [path_parent, name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call408 = $ret;
                        return $call408;
                        $blk = 4; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'find_path_parent'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope383.$const386 = new Sk.builtin.str('name_map');
    $scope383.$const396 = new Sk.builtin.str('path_parents');
    $scope383.$const398 = new Sk.builtin.str('get');
    $scope383.$const406 = new Sk.builtin.str('find_path_parent');
    var $scope410 = (function $_finish_scope411$(self) {
        var name_$rn$, path_id, position, state; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope410.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope410.$const413, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr414 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr414, $scope410.$const415, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr416 = $ret;
                        path_id = $lsubscr416;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope410.$const417, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr418 = $ret;
                        if (path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr418, path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr419 = $ret;
                        var $iter420 = Sk.abstr.iter($lsubscr419);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter420, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next421 = $ret;
                        if ($next421 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        name_$rn$ = $next421;
                        var $loadgbl422 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl422, $scope410.$const423, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr424 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope410.$const425, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr426 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr424, [name_$rn$, $lattr426]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call427 = $ret;
                        var $jfalse428 = ($call427 === false || !Sk.misceval.isTrue($call427));
                        if ($jfalse428) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope410.$const417, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr429 = $ret;
                        if (path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr429, path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr430 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lsubscr430, name_$rn$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr431 = $ret;
                        state = $lsubscr431;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope410.$const432, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr433 = $ret;
                        var $compareres434 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr433, $scope410.$const435, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres434 = $ret;
                        var $jfalse436 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse436) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- done --- */ var $jfalse437 = ($compareres434 === false || !Sk.misceval.isTrue($compareres434));
                        if ($jfalse437) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope410.$const438, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr439 = $ret;
                        position = $lattr439;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope410.$const440, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr441 = $ret;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope410.$const443, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr444 = $ret;
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        var $loaddict447 = new Sk.builtins['dict']([$scope410.$const445, $lattr444, $scope410.$const446, position]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr441, [$scope410.$const442, $loaddict447]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call448 = $ret;
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope410.$const449, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr450 = $ret;
                        var $compareres451 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr450, $scope410.$const452, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres451 = $ret;
                        var $jfalse453 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse453) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- done --- */ var $jfalse454 = ($compareres451 === false || !Sk.misceval.isTrue($compareres451));
                        if ($jfalse454) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope410.$const440, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr455 = $ret;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope410.$const443, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr457 = $ret;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope410.$const458, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr459 = $ret;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope410.$const446, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr460 = $ret;
                        var $loaddict461 = new Sk.builtins['dict']([$scope410.$const445, $lattr457, $scope410.$const458, $lattr459, $scope410.$const446, $lattr460]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr455, [$scope410.$const456, $loaddict461]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call462 = $ret;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '_finish_scope'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope410.$const412 = new Sk.builtin.str('\n        Walk through all the variables present in this scope and ensure that\n        they have been read and not overwritten.\n        ');
    $scope410.$const413 = new Sk.builtin.str('path_chain');
    $scope410.$const415 = new Sk.builtin.int_(0);
    $scope410.$const417 = new Sk.builtin.str('name_map');
    $scope410.$const423 = new Sk.builtin.str('in_scope');
    $scope410.$const425 = new Sk.builtin.str('scope_chain');
    $scope410.$const432 = new Sk.builtin.str('over');
    $scope410.$const435 = new Sk.builtin.str('yes');
    $scope410.$const438 = new Sk.builtin.str('over_position');
    $scope410.$const440 = new Sk.builtin.str('report_issue');
    $scope410.$const442 = new Sk.builtin.str('Overwritten Variable');
    $scope410.$const443 = new Sk.builtin.str('name_$rn$');
    $scope410.$const445 = new Sk.builtin.str('name');
    $scope410.$const446 = new Sk.builtin.str('position');
    $scope410.$const449 = new Sk.builtin.str('read');
    $scope410.$const452 = new Sk.builtin.str('no');
    $scope410.$const456 = new Sk.builtin.str('Unused Variable');
    $scope410.$const458 = new Sk.builtin.str('type');
    var $scope464 = (function $visit465$(self, node) {
        var result, return_state; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope464.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope464.$const467, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr468 = $ret;
                        $ret = Sk.abstr.gattr($lattr468, $scope464.$const469, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr470 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr470, [node]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call471 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope464.$const472, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr473 = $ret;
                        var $inplbinopattr475 = Sk.abstr.numberInplaceBinOp($lattr473, $scope464.$const474, 'Add');
                        $ret = undefined;
                        if ($inplbinopattr475 !== undefined) {
                            $ret = Sk.abstr.sattr(self, $scope464.$const472, $inplbinopattr475, true);
                        }
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loadgbl476 = Sk.misceval.loadname('len', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope464.$const477, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr478 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl476, [$lattr478]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call479 = $ret;
                        var $compareres480 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call479, $scope464.$const474, 'Gt', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres480 = $ret;
                        var $jfalse481 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse481) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- done --- */ var $jfalse482 = ($compareres480 === false || !Sk.misceval.isTrue($compareres480));
                        if ($jfalse482) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope464.$const483, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr484 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr484, [$scope464.$const485]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call486 = $ret;
                        return_state = $call486;
                        if (return_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(return_state, $scope464.$const487, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr488 = $ret;
                        var $boolopsucc489 = $lattr488;
                        $boolopsucc489 = $lattr488;
                        var $jfalse490 = ($lattr488 === false || !Sk.misceval.isTrue($lattr488));
                        if ($jfalse490) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        if (return_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(return_state, $scope464.$const491, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr492 = $ret;
                        $boolopsucc489 = $lattr492;
                        var $jfalse493 = ($lattr492 === false || !Sk.misceval.isTrue($lattr492));
                        if ($jfalse493) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of boolop --- */ var $jfalse494 = ($boolopsucc489 === false || !Sk.misceval.isTrue($boolopsucc489));
                        if ($jfalse494) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        if (return_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(return_state, $scope464.$const495, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr496 = $ret;
                        $ret = Sk.abstr.gattr($lattr496, $scope464.$const497, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr498 = $ret;
                        var $compareres499 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr498, $scope464.$const500, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres499 = $ret;
                        var $jfalse501 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse501) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- done --- */ var $jfalse502 = ($compareres499 === false || !Sk.misceval.isTrue($compareres499));
                        if ($jfalse502) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope464.$const503, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr504 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr504, [$scope464.$const505]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call506 = $ret;
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope464.$const507, node, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loadgbl508 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl508, $scope464.$const509, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr510 = $ret;
                        $ret = Sk.abstr.gattr($lattr510, $scope464.$const511, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr512 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr512, [self, node]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call513 = $ret;
                        result = $call513;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope464.$const472, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr514 = $ret;
                        var $inplbinopattr515 = Sk.abstr.numberInplaceBinOp($lattr514, $scope464.$const474, 'Sub');
                        $ret = undefined;
                        if ($inplbinopattr515 !== undefined) {
                            $ret = Sk.abstr.sattr(self, $scope464.$const472, $inplbinopattr515, true);
                        }
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope464.$const467, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr516 = $ret;
                        $ret = Sk.abstr.gattr($lattr516, $scope464.$const517, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr518 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr518);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call519 = $ret;
                        if (result === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result\' referenced before assignment');
                        }
                        var $compareres520 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(result, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres520 = $ret;
                        var $jfalse521 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse521) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- done --- */ var $jfalse522 = ($compareres520 === false || !Sk.misceval.isTrue($compareres520));
                        if ($jfalse522) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        var $loadgbl523 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl523);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call524 = $ret;
                        return $call524;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 8:
                        /* --- next branch of if --- */ if (result === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result\' referenced before assignment');
                        }
                        return result;
                        $blk = 7; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope464.$const466 = new Sk.builtin.str('\n        Process this node by calling its appropriate visit_*\n\n        Args:\n            node (AST): The node to visit\n        Returns:\n            Type: The type calculated during the visit.\n        ');
    $scope464.$const467 = new Sk.builtin.str('node_chain');
    $scope464.$const469 = new Sk.builtin.str('append');
    $scope464.$const472 = new Sk.builtin.str('ast_id');
    $scope464.$const474 = new Sk.builtin.int_(1);
    $scope464.$const477 = new Sk.builtin.str('scope_chain');
    $scope464.$const483 = new Sk.builtin.str('find_variable_scope');
    $scope464.$const485 = new Sk.builtin.str('*return');
    $scope464.$const487 = new Sk.builtin.str('exists');
    $scope464.$const491 = new Sk.builtin.str('in_scope');
    $scope464.$const495 = new Sk.builtin.str('state');
    $scope464.$const497 = new Sk.builtin.str('set');
    $scope464.$const500 = new Sk.builtin.str('yes');
    $scope464.$const503 = new Sk.builtin.str('report_issue');
    $scope464.$const505 = new Sk.builtin.str('Action after return');
    $scope464.$const507 = new Sk.builtin.str('final_node');
    $scope464.$const509 = new Sk.builtin.str('NodeVisitor');
    $scope464.$const511 = new Sk.builtin.str('visit');
    $scope464.$const517 = new Sk.builtin.str('pop');
    var $scope526 = (function $_visit_nodes527$(self, nodes) {
        var node; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope526.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (nodes === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'nodes\' referenced before assignment');
                        }
                        if (nodes === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'nodes\' referenced before assignment');
                        }
                        var $iter529 = Sk.abstr.iter(nodes);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter529, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next530 = $ret;
                        if ($next530 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        node = $next530;
                        var $loadgbl531 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl532 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl532, $scope526.$const533, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr534 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl531, [node, $lattr534]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call535 = $ret;
                        var $jfalse536 = ($call535 === false || !Sk.misceval.isTrue($call535));
                        if ($jfalse536) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope526.$const537, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr538 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr538, [node]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call539 = $ret;
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '_visit_nodes'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope526.$const528 = new Sk.builtin.str('\n        Visit all the nodes in the given list.\n\n        Args:\n            nodes (list): A list of values, of which any AST nodes will be\n                          visited.\n        ');
    $scope526.$const533 = new Sk.builtin.str('AST');
    $scope526.$const537 = new Sk.builtin.str('visit');
    var $scope541 = (function $walk_targets542$(self, targets, type, walker) {
        var target; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope541.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (targets === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'targets\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (walker === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'walker\' referenced before assignment');
                        }
                        if (targets === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'targets\' referenced before assignment');
                        }
                        var $iter544 = Sk.abstr.iter(targets);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter544, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next545 = $ret;
                        if ($next545 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        target = $next545;
                        if (walker === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'walker\' referenced before assignment');
                        }
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray(walker, [target, type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call546 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'walk_targets'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope541.$const543 = new Sk.builtin.str('\n        Iterate through the targets and call the given function on each one.\n\n        Args:\n            targets (list of Ast nodes): A list of potential targets to be\n                                         traversed.\n            type (Type): The given type to be unraveled and applied to the\n                         targets.\n            walker (Ast Node, Type -> None): A function that will process\n                                             each target and unravel the type.\n        ');
    var $scope548 = (function $_walk_target549$(self, target, type) {
        var elt, elt_type, i, potential_name, result; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope548.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        var $loadgbl551 = Sk.misceval.loadname('isinstance', $gbl);
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        var $loadgbl552 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl552, $scope548.$const553, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr554 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl551, [target, $lattr554]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call555 = $ret;
                        var $jfalse556 = ($call555 === false || !Sk.misceval.isTrue($call555));
                        if ($jfalse556) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope548.$const557, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr558 = $ret;
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope548.$const559, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr560 = $ret;
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope548.$const561, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr562 = $ret;
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr562, [target]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call563 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr558, [$lattr560, type, $call563]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call564 = $ret;
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope548.$const559, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr565 = $ret;
                        return $lattr565;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl566 = Sk.misceval.loadname('isinstance', $gbl);
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        var $loadgbl567 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl567, $scope548.$const568, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr569 = $ret;
                        var $loadgbl570 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl570, $scope548.$const571, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr572 = $ret;
                        var $elem573 = $lattr569;
                        var $elem574 = $lattr572;
                        var $loadtuple575 = new Sk.builtins['tuple']([$elem573, $elem574]);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl566, [target, $loadtuple575]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call576 = $ret;
                        var $jfalse577 = ($call576 === false || !Sk.misceval.isTrue($call576));
                        if ($jfalse577) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        result = Sk.builtin.none.none$;
                        var $loadgbl578 = Sk.misceval.loadname('enumerate', $gbl);
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope548.$const579, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr580 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl578, [$lattr580]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call581 = $ret;
                        var $iter582 = Sk.abstr.iter($call581);
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter582, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next583 = $ret;
                        if ($next583 === undefined) {
                            $blk = 5;
                            continue;
                        }
                        var $items584 = Sk.abstr.sequenceUnpack($next583, 2);
                        i = $items584[0];
                        elt = $items584[1];
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(type, $scope548.$const585, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr586 = $ret;
                        var $loadgbl587 = Sk.misceval.loadname('LiteralNum', $gbl);
                        if (i === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'i\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl587, [i]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call588 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr586, [$call588]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call589 = $ret;
                        elt_type = $call589;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope548.$const590, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr591 = $ret;
                        if (elt === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'elt\' referenced before assignment');
                        }
                        if (elt_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'elt_type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr591, [elt, elt_type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call592 = $ret;
                        potential_name = $call592;
                        if (potential_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'potential_name\' referenced before assignment');
                        }
                        var $compareres593 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(potential_name, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres593 = $ret;
                        var $jfalse594 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse594) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- done --- */ var $boolopsucc595 = $compareres593;
                        $boolopsucc595 = $compareres593;
                        var $jfalse596 = ($compareres593 === false || !Sk.misceval.isTrue($compareres593));
                        if ($jfalse596) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        if (result === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result\' referenced before assignment');
                        }
                        var $compareres597 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(result, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres597 = $ret;
                        var $jfalse598 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse598) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- done --- */ $boolopsucc595 = $compareres597;
                        var $jfalse599 = ($compareres597 === false || !Sk.misceval.isTrue($compareres597));
                        if ($jfalse599) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- end of boolop --- */ var $jfalse600 = ($boolopsucc595 === false || !Sk.misceval.isTrue($boolopsucc595));
                        if ($jfalse600) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        if (potential_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'potential_name\' referenced before assignment');
                        }
                        result = potential_name;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ $blk = 4; /* jump */
                        continue;
                    case 3:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 5:
                        /* --- for cleanup --- */ $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- for end --- */ if (result === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result\' referenced before assignment');
                        }
                        return result;
                        $blk = 3; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '_walk_target'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope548.$const550 = new Sk.builtin.str('\n        Recursively apply the type to the target\n\n        Args:\n            target (Ast): The current AST node to process\n            type (Type): The type to apply to this node\n        ');
    $scope548.$const553 = new Sk.builtin.str('Name');
    $scope548.$const557 = new Sk.builtin.str('store_iter_variable');
    $scope548.$const559 = new Sk.builtin.str('id');
    $scope548.$const561 = new Sk.builtin.str('locate');
    $scope548.$const568 = new Sk.builtin.str('Tuple');
    $scope548.$const571 = new Sk.builtin.str('List');
    $scope548.$const579 = new Sk.builtin.str('elts');
    $scope548.$const585 = new Sk.builtin.str('index');
    $scope548.$const590 = new Sk.builtin.str('_walk_target');
    var $scope602 = (function $visit_AnnAssign603$(self, node) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope602.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_AnnAssign'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope602.$const604 = new Sk.builtin.str('\n        TODO: Implement!\n        ');
    var $scope606 = (function $visit_Assign607$(self, node) {
        var value_type; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope606.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope606.$const609, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr610 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope606.$const611, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr612 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr610, [$lattr612]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call613 = $ret;
                        value_type = $call613;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope606.$const614, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr615 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope606.$const616, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr617 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr615, [$lattr617]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call618 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope606.$const619, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr620 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope606.$const616, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr621 = $ret;
                        if (value_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value_type\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope606.$const622, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr623 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr620, [$lattr621, value_type, $lattr623]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call624 = $ret;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Assign'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope606.$const608 = new Sk.builtin.str('\n        Simple assignment statement:\n        __targets__ = __value__\n\n        Args:\n            node (AST): An Assign node\n        Returns:\n            None\n        ');
    $scope606.$const609 = new Sk.builtin.str('visit');
    $scope606.$const611 = new Sk.builtin.str('value');
    $scope606.$const614 = new Sk.builtin.str('_visit_nodes');
    $scope606.$const616 = new Sk.builtin.str('targets');
    $scope606.$const619 = new Sk.builtin.str('walk_targets');
    $scope606.$const622 = new Sk.builtin.str('assign_target');
    var $scope626 = (function $assign_target627$(self, target, type) {
        var elt, eltType, i, key_type, left_hand_type, literal, original_type; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope626.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        var $loadgbl628 = Sk.misceval.loadname('isinstance', $gbl);
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        var $loadgbl629 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl629, $scope626.$const630, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr631 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl628, [target, $lattr631]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call632 = $ret;
                        var $jfalse633 = ($call632 === false || !Sk.misceval.isTrue($call632));
                        if ($jfalse633) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope626.$const634, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr635 = $ret;
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope626.$const636, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr637 = $ret;
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr635, [$lattr637, type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call638 = $ret;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl639 = Sk.misceval.loadname('isinstance', $gbl);
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        var $loadgbl640 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl640, $scope626.$const641, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr642 = $ret;
                        var $loadgbl643 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl643, $scope626.$const644, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr645 = $ret;
                        var $elem646 = $lattr642;
                        var $elem647 = $lattr645;
                        var $loadtuple648 = new Sk.builtins['tuple']([$elem646, $elem647]);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl639, [target, $loadtuple648]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call649 = $ret;
                        var $jfalse650 = ($call649 === false || !Sk.misceval.isTrue($call649));
                        if ($jfalse650) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        var $loadgbl651 = Sk.misceval.loadname('enumerate', $gbl);
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope626.$const652, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr653 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl651, [$lattr653]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call654 = $ret;
                        var $iter655 = Sk.abstr.iter($call654);
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter655, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next656 = $ret;
                        if ($next656 === undefined) {
                            $blk = 6;
                            continue;
                        }
                        var $items657 = Sk.abstr.sequenceUnpack($next656, 2);
                        i = $items657[0];
                        elt = $items657[1];
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(type, $scope626.$const658, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr659 = $ret;
                        var $loadgbl660 = Sk.misceval.loadname('LiteralNum', $gbl);
                        if (i === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'i\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl660, [i]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call661 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr659, [$call661]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call662 = $ret;
                        eltType = $call662;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope626.$const663, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr664 = $ret;
                        if (elt === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'elt\' referenced before assignment');
                        }
                        if (eltType === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'eltType\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr664, [elt, eltType]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call665 = $ret;
                        $blk = 5; /* jump */
                        continue;
                    case 3:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 4:
                        /* --- next branch of if --- */ var $loadgbl666 = Sk.misceval.loadname('isinstance', $gbl);
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        var $loadgbl667 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl667, $scope626.$const668, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr669 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl666, [target, $lattr669]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call670 = $ret;
                        var $jfalse671 = ($call670 === false || !Sk.misceval.isTrue($call670));
                        if ($jfalse671) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope626.$const672, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr673 = $ret;
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope626.$const674, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr675 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr673, [$lattr675]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call676 = $ret;
                        left_hand_type = $call676;
                        var $loadgbl677 = Sk.misceval.loadname('isinstance', $gbl);
                        if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        var $loadgbl678 = Sk.misceval.loadname('ListType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl677, [left_hand_type, $loadgbl678]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call679 = $ret;
                        var $jfalse680 = ($call679 === false || !Sk.misceval.isTrue($call679));
                        if ($jfalse680) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- end of if --- */ $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- end of if --- */ $blk = 3; /* jump */
                        continue;
                    case 6:
                        /* --- for cleanup --- */ $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- for end --- */ $blk = 3; /* jump */
                        continue;
                    case 9:
                        /* --- next branch of if --- */ var $loadgbl739 = Sk.misceval.loadname('isinstance', $gbl);
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        var $loadgbl740 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl740, $scope626.$const741, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr742 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl739, [target, $lattr742]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call743 = $ret;
                        var $jfalse744 = ($call743 === false || !Sk.misceval.isTrue($call743));
                        if ($jfalse744) {
                            /*test failed */
                            $blk = 20;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope626.$const672, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr745 = $ret;
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope626.$const674, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr746 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr745, [$lattr746]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call747 = $ret;
                        left_hand_type = $call747;
                        var $loadgbl748 = Sk.misceval.loadname('isinstance', $gbl);
                        if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        var $loadgbl749 = Sk.misceval.loadname('InstanceType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl748, [left_hand_type, $loadgbl749]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call750 = $ret;
                        var $jfalse751 = ($call750 === false || !Sk.misceval.isTrue($call750));
                        if ($jfalse751) {
                            /*test failed */
                            $blk = 21;
                            continue;
                        }
                        if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left_hand_type, $scope626.$const752, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr753 = $ret;
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope626.$const754, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr755 = $ret;
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr753, [$lattr755, type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call756 = $ret;
                        $blk = 21; /* allowing case fallthrough */
                    case 21:
                        /* --- end of if --- */ $blk = 20; /* allowing case fallthrough */
                    case 20:
                        /* --- end of if --- */ $blk = 8; /* jump */
                        continue;
                    case 11:
                        /* --- next branch of if --- */ var $loadgbl681 = Sk.misceval.loadname('isinstance', $gbl);
                        if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        var $loadgbl682 = Sk.misceval.loadname('DictType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl681, [left_hand_type, $loadgbl682]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call683 = $ret;
                        var $jfalse684 = ($call683 === false || !Sk.misceval.isTrue($call683));
                        if ($jfalse684) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        var $loadgbl685 = Sk.misceval.loadname('isinstance', $gbl);
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope626.$const686, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr687 = $ret;
                        var $loadgbl688 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl688, $scope626.$const689, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr690 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl685, [$lattr687, $lattr690]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call691 = $ret;
                        var $unaryop692 = Sk.abstr.numberUnaryOp($call691, 'Not');
                        var $jfalse693 = ($unaryop692 === false || !Sk.misceval.isTrue($unaryop692));
                        if ($jfalse693) {
                            /*test failed */
                            $blk = 13;
                            continue;
                        }
                        return Sk.builtin.none.none$;
                        $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope626.$const694, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr695 = $ret;
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope626.$const686, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr696 = $ret;
                        $ret = Sk.abstr.gattr($lattr696, $scope626.$const674, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr697 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr695, [$lattr697]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call698 = $ret;
                        literal = $call698;
                        if (literal === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'literal\' referenced before assignment');
                        }
                        var $unaryop699 = Sk.abstr.numberUnaryOp(literal, 'Not');
                        var $jfalse700 = ($unaryop699 === false || !Sk.misceval.isTrue($unaryop699));
                        if ($jfalse700) {
                            /*test failed */
                            $blk = 15;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope626.$const672, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr701 = $ret;
                        if (target === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'target\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(target, $scope626.$const686, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr702 = $ret;
                        $ret = Sk.abstr.gattr($lattr702, $scope626.$const674, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr703 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr701, [$lattr703]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call704 = $ret;
                        key_type = $call704;
                        if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(left_hand_type, $scope626.$const705, Sk.builtin.bool.false$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (key_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'key_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(key_type, $scope626.$const706, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr707 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr707);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call708 = $ret;
                        if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(left_hand_type, $scope626.$const709, $call708, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(type, $scope626.$const706, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr710 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr710);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call711 = $ret;
                        if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(left_hand_type, $scope626.$const712, $call711, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 14; /* allowing case fallthrough */
                    case 14:
                        /* --- end of if --- */ $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- end of if --- */ $blk = 10; /* jump */
                        continue;
                    case 15:
                        /* --- next branch of if --- */ if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left_hand_type, $scope626.$const713, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr714 = $ret;
                        var $jfalse715 = ($lattr714 === false || !Sk.misceval.isTrue($lattr714));
                        if ($jfalse715) {
                            /*test failed */
                            $blk = 16;
                            continue;
                        }
                        if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left_hand_type, $scope626.$const716, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr717 = $ret;
                        if (literal === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'literal\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr717, [literal]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call718 = $ret;
                        original_type = $call718;
                        if (original_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'original_type\' referenced before assignment');
                        }
                        var $unaryop719 = Sk.abstr.numberUnaryOp(original_type, 'Not');
                        var $jfalse720 = ($unaryop719 === false || !Sk.misceval.isTrue($unaryop719));
                        if ($jfalse720) {
                            /*test failed */
                            $blk = 18;
                            continue;
                        }
                        if (left_hand_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_hand_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left_hand_type, $scope626.$const721, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr722 = $ret;
                        if (literal === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'literal\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(type, $scope626.$const706, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr723 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr723);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call724 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr722, [literal, $call724]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call725 = $ret;
                        $blk = 17; /* allowing case fallthrough */
                    case 17:
                        /* --- end of if --- */ $blk = 16; /* allowing case fallthrough */
                    case 16:
                        /* --- end of if --- */ $blk = 14; /* jump */
                        continue;
                    case 18:
                        /* --- next branch of if --- */ var $loadgbl726 = Sk.misceval.loadname('are_types_equal', $gbl);
                        if (original_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'original_type\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl726, [original_type, type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call727 = $ret;
                        var $unaryop728 = Sk.abstr.numberUnaryOp($call727, 'Not');
                        var $jfalse729 = ($unaryop728 === false || !Sk.misceval.isTrue($unaryop728));
                        if ($jfalse729) {
                            /*test failed */
                            $blk = 19;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope626.$const730, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr731 = $ret;
                        if (original_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'original_type\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        var $loaddict737 = new Sk.builtins['dict']([$scope626.$const734, $scope626.$const733, $scope626.$const735, original_type, $scope626.$const736, type]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr731, [$scope626.$const732, $loaddict737]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call738 = $ret;
                        $blk = 19; /* allowing case fallthrough */
                    case 19:
                        /* --- end of if --- */ $blk = 17; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'assign_target'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope626.$const630 = new Sk.builtin.str('Name');
    $scope626.$const634 = new Sk.builtin.str('store_variable');
    $scope626.$const636 = new Sk.builtin.str('id');
    $scope626.$const641 = new Sk.builtin.str('Tuple');
    $scope626.$const644 = new Sk.builtin.str('List');
    $scope626.$const652 = new Sk.builtin.str('elts');
    $scope626.$const658 = new Sk.builtin.str('index');
    $scope626.$const663 = new Sk.builtin.str('assign_target');
    $scope626.$const668 = new Sk.builtin.str('Subscript');
    $scope626.$const672 = new Sk.builtin.str('visit');
    $scope626.$const674 = new Sk.builtin.str('value');
    $scope626.$const686 = new Sk.builtin.str('slice');
    $scope626.$const689 = new Sk.builtin.str('Index');
    $scope626.$const694 = new Sk.builtin.str('get_literal');
    $scope626.$const705 = new Sk.builtin.str('empty');
    $scope626.$const706 = new Sk.builtin.str('clone');
    $scope626.$const709 = new Sk.builtin.str('keys');
    $scope626.$const712 = new Sk.builtin.str('values');
    $scope626.$const713 = new Sk.builtin.str('literals');
    $scope626.$const716 = new Sk.builtin.str('has_literal');
    $scope626.$const721 = new Sk.builtin.str('update_key');
    $scope626.$const730 = new Sk.builtin.str('report_issue');
    $scope626.$const732 = new Sk.builtin.str('Type changes');
    $scope626.$const733 = new Sk.builtin.str('Dictionary');
    $scope626.$const734 = new Sk.builtin.str('name');
    $scope626.$const735 = new Sk.builtin.str('old');
    $scope626.$const736 = new Sk.builtin.str('new');
    $scope626.$const741 = new Sk.builtin.str('Attribute');
    $scope626.$const752 = new Sk.builtin.str('add_attr');
    $scope626.$const754 = new Sk.builtin.str('attr');
    var $scope758 = (function $visit_AugAssign759$(self, node) {
        var left, name_$rn$, op_lookup, result_type, right; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope758.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope758.$const760, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr761 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope758.$const762, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr763 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr761, [$lattr763]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call764 = $ret;
                        right = $call764;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope758.$const760, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr765 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope758.$const766, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr767 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr765, [$lattr767]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call768 = $ret;
                        left = $call768;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope758.$const769, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr770 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope758.$const766, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr771 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr770, [$lattr771]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call772 = $ret;
                        name_$rn$ = $call772;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope758.$const773, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr774 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr774, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call775 = $ret;
                        var $loadgbl776 = Sk.misceval.loadname('isinstance', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        var $loadgbl777 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl776, [left, $loadgbl777]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call778 = $ret;
                        var $boolopsucc779 = $call778;
                        $boolopsucc779 = $call778;
                        var $jtrue780 = ($call778 === true || Sk.misceval.isTrue($call778));
                        if ($jtrue780) {
                            /*test passed */
                            $blk = 3;
                            continue;
                        }
                        var $loadgbl781 = Sk.misceval.loadname('isinstance', $gbl);
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        var $loadgbl782 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl781, [right, $loadgbl782]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call783 = $ret;
                        $boolopsucc779 = $call783;
                        var $jtrue784 = ($call783 === true || Sk.misceval.isTrue($call783));
                        if ($jtrue784) {
                            /*test passed */
                            $blk = 3;
                            continue;
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of boolop --- */ var $jfalse785 = ($boolopsucc779 === false || !Sk.misceval.isTrue($boolopsucc779));
                        if ($jfalse785) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        var $loadgbl786 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl786);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call787 = $ret;
                        return $call787;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope758.$const822, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr823 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope758.$const789, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr827 = $ret;
                        var $loaddict829 = new Sk.builtins['dict']([$scope758.$const825, left, $scope758.$const826, right, $scope758.$const828, $lattr827]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr823, [$scope758.$const824, $loaddict829]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call830 = $ret;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl788 = Sk.misceval.loadname('type', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope758.$const789, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr790 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl788, [$lattr790]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call791 = $ret;
                        var $compareres792 = null;
                        var $loadgbl793 = Sk.misceval.loadname('VALID_BINOP_TYPES', $gbl);
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call791, $loadgbl793, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres792 = $ret;
                        var $jfalse794 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse794) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- done --- */ var $jfalse795 = ($compareres792 === false || !Sk.misceval.isTrue($compareres792));
                        if ($jfalse795) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        var $loadgbl796 = Sk.misceval.loadname('VALID_BINOP_TYPES', $gbl);
                        var $loadgbl797 = Sk.misceval.loadname('type', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope758.$const789, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr798 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl797, [$lattr798]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call799 = $ret;
                        $ret = Sk.abstr.objectGetItem($loadgbl796, $call799, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr800 = $ret;
                        op_lookup = $lsubscr800;
                        var $loadgbl801 = Sk.misceval.loadname('type', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl801, [left]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call802 = $ret;
                        var $compareres803 = null;
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call802, op_lookup, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres803 = $ret;
                        var $jfalse804 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse804) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- done --- */ var $jfalse805 = ($compareres803 === false || !Sk.misceval.isTrue($compareres803));
                        if ($jfalse805) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        var $loadgbl806 = Sk.misceval.loadname('type', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl806, [left]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call807 = $ret;
                        $ret = Sk.abstr.objectGetItem(op_lookup, $call807, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr808 = $ret;
                        op_lookup = $lsubscr808;
                        var $loadgbl809 = Sk.misceval.loadname('type', $gbl);
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl809, [right]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call810 = $ret;
                        var $compareres811 = null;
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call810, op_lookup, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres811 = $ret;
                        var $jfalse812 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse812) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- done --- */ var $jfalse813 = ($compareres811 === false || !Sk.misceval.isTrue($compareres811));
                        if ($jfalse813) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        var $loadgbl814 = Sk.misceval.loadname('type', $gbl);
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl814, [right]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call815 = $ret;
                        $ret = Sk.abstr.objectGetItem(op_lookup, $call815, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr816 = $ret;
                        op_lookup = $lsubscr816;
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray(op_lookup, [left, right]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call817 = $ret;
                        result_type = $call817;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope758.$const818, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr819 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope758.$const766, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr820 = $ret;
                        if (result_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result_type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr819, [$lattr820, result_type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call821 = $ret;
                        if (result_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result_type\' referenced before assignment');
                        }
                        return result_type;
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- end of if --- */ $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- end of if --- */ $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_AugAssign'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope758.$const760 = new Sk.builtin.str('visit');
    $scope758.$const762 = new Sk.builtin.str('value');
    $scope758.$const766 = new Sk.builtin.str('target');
    $scope758.$const769 = new Sk.builtin.str('identify_caller');
    $scope758.$const773 = new Sk.builtin.str('load_variable');
    $scope758.$const789 = new Sk.builtin.str('op');
    $scope758.$const818 = new Sk.builtin.str('assign_target');
    $scope758.$const822 = new Sk.builtin.str('report_issue');
    $scope758.$const824 = new Sk.builtin.str('Incompatible types');
    $scope758.$const825 = new Sk.builtin.str('left');
    $scope758.$const826 = new Sk.builtin.str('right');
    $scope758.$const828 = new Sk.builtin.str('operation');
    var $scope832 = (function $visit_Attribute833$(self, node) {
        var value_type; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope832.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope832.$const834, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr835 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope832.$const836, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr837 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr835, [$lattr837]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call838 = $ret;
                        value_type = $call838;
                        if (value_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(value_type, $scope832.$const839, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr840 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope832.$const841, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr842 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope832.$const836, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr843 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope832.$const844, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr845 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr845);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call846 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr840, [$lattr842, self, $lattr843, $call846]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call847 = $ret;
                        return $call847;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Attribute'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope832.$const834 = new Sk.builtin.str('visit');
    $scope832.$const836 = new Sk.builtin.str('value');
    $scope832.$const839 = new Sk.builtin.str('load_attr');
    $scope832.$const841 = new Sk.builtin.str('attr');
    $scope832.$const844 = new Sk.builtin.str('locate');
    var $scope849 = (function $visit_BinOp850$(self, node) {
        var left, op_lookup, right; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope849.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope849.$const851, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr852 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope849.$const853, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr854 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr852, [$lattr854]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call855 = $ret;
                        left = $call855;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope849.$const851, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr856 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope849.$const857, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr858 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr856, [$lattr858]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call859 = $ret;
                        right = $call859;
                        var $loadgbl860 = Sk.misceval.loadname('isinstance', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        var $loadgbl861 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl860, [left, $loadgbl861]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call862 = $ret;
                        var $boolopsucc863 = $call862;
                        $boolopsucc863 = $call862;
                        var $jtrue864 = ($call862 === true || Sk.misceval.isTrue($call862));
                        if ($jtrue864) {
                            /*test passed */
                            $blk = 3;
                            continue;
                        }
                        var $loadgbl865 = Sk.misceval.loadname('isinstance', $gbl);
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        var $loadgbl866 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl865, [right, $loadgbl866]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call867 = $ret;
                        $boolopsucc863 = $call867;
                        var $jtrue868 = ($call867 === true || Sk.misceval.isTrue($call867));
                        if ($jtrue868) {
                            /*test passed */
                            $blk = 3;
                            continue;
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of boolop --- */ var $jfalse869 = ($boolopsucc863 === false || !Sk.misceval.isTrue($boolopsucc863));
                        if ($jfalse869) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        var $loadgbl870 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl870);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call871 = $ret;
                        return $call871;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope849.$const902, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr903 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope849.$const873, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr905 = $ret;
                        var $loaddict907 = new Sk.builtins['dict']([$scope849.$const853, left, $scope849.$const857, right, $scope849.$const906, $lattr905]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr903, [$scope849.$const904, $loaddict907]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call908 = $ret;
                        var $loadgbl909 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl909);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call910 = $ret;
                        return $call910;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl872 = Sk.misceval.loadname('type', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope849.$const873, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr874 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl872, [$lattr874]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call875 = $ret;
                        var $compareres876 = null;
                        var $loadgbl877 = Sk.misceval.loadname('VALID_BINOP_TYPES', $gbl);
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call875, $loadgbl877, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres876 = $ret;
                        var $jfalse878 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse878) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- done --- */ var $jfalse879 = ($compareres876 === false || !Sk.misceval.isTrue($compareres876));
                        if ($jfalse879) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        var $loadgbl880 = Sk.misceval.loadname('VALID_BINOP_TYPES', $gbl);
                        var $loadgbl881 = Sk.misceval.loadname('type', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope849.$const873, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr882 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl881, [$lattr882]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call883 = $ret;
                        $ret = Sk.abstr.objectGetItem($loadgbl880, $call883, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr884 = $ret;
                        op_lookup = $lsubscr884;
                        var $loadgbl885 = Sk.misceval.loadname('type', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl885, [left]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call886 = $ret;
                        var $compareres887 = null;
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call886, op_lookup, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres887 = $ret;
                        var $jfalse888 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse888) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- done --- */ var $jfalse889 = ($compareres887 === false || !Sk.misceval.isTrue($compareres887));
                        if ($jfalse889) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        var $loadgbl890 = Sk.misceval.loadname('type', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl890, [left]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call891 = $ret;
                        $ret = Sk.abstr.objectGetItem(op_lookup, $call891, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr892 = $ret;
                        op_lookup = $lsubscr892;
                        var $loadgbl893 = Sk.misceval.loadname('type', $gbl);
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl893, [right]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call894 = $ret;
                        var $compareres895 = null;
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call894, op_lookup, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres895 = $ret;
                        var $jfalse896 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse896) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- done --- */ var $jfalse897 = ($compareres895 === false || !Sk.misceval.isTrue($compareres895));
                        if ($jfalse897) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        var $loadgbl898 = Sk.misceval.loadname('type', $gbl);
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl898, [right]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call899 = $ret;
                        $ret = Sk.abstr.objectGetItem(op_lookup, $call899, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr900 = $ret;
                        op_lookup = $lsubscr900;
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray(op_lookup, [left, right]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call901 = $ret;
                        return $call901;
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- end of if --- */ $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- end of if --- */ $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_BinOp'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope849.$const851 = new Sk.builtin.str('visit');
    $scope849.$const853 = new Sk.builtin.str('left');
    $scope849.$const857 = new Sk.builtin.str('right');
    $scope849.$const873 = new Sk.builtin.str('op');
    $scope849.$const902 = new Sk.builtin.str('report_issue');
    $scope849.$const904 = new Sk.builtin.str('Incompatible types');
    $scope849.$const906 = new Sk.builtin.str('operation');
    var $scope912 = (function $visit_Bool913$(self, node) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope912.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl914 = Sk.misceval.loadname('BoolType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl914);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call915 = $ret;
                        return $call915;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Bool'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    var $scope917 = (function $visit_BoolOp918$(self, node) {
        var value, values; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope917.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadlist919 = new Sk.builtins['list']([]);
                        values = $loadlist919;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope917.$const920, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr921 = $ret;
                        var $iter922 = Sk.abstr.iter($lattr921);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter922, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next923 = $ret;
                        if ($next923 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        value = $next923;
                        if (values === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'values\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(values, $scope917.$const924, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr925 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope917.$const926, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr927 = $ret;
                        if (value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr927, [value]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call928 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr925, [$call928]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call929 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ var $loadgbl930 = Sk.misceval.loadname('BoolType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl930);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call931 = $ret;
                        return $call931;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_BoolOp'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope917.$const920 = new Sk.builtin.str('values');
    $scope917.$const924 = new Sk.builtin.str('append');
    $scope917.$const926 = new Sk.builtin.str('visit');
    var $scope933 = (function $visit_Call934$(self, node) {
        var arg, arguments, callee, constructor_$rn$, function_type, initializer, result; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope933.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const935, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr936 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope933.$const937, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr938 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr936, [$lattr938]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call939 = $ret;
                        function_type = $call939;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const940, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr941 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr941, [node]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call942 = $ret;
                        callee = $call942;
                        var $res943 = null;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope933.$const944, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr945 = $ret;
                        var $jfalse946 = ($lattr945 === false || !Sk.misceval.isTrue($lattr945));
                        if ($jfalse946) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        var $_compr947 = new Sk.builtins['list']([]);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope933.$const944, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr948 = $ret;
                        var $iter949 = Sk.abstr.iter($lattr948);
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- list comp start --- */ $ret = Sk.abstr.iternext($iter949, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next950 = $ret;
                        if ($next950 === undefined) {
                            $blk = 5;
                            continue;
                        }
                        arg = $next950;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const935, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr951 = $ret;
                        if (arg === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'arg\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr951, [arg]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call952 = $ret;
                        $_compr947.v.push($call952);
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- list comp skip --- */ $blk = 3; /* jump */
                        continue;
                    case 1:
                        /* --- next of ifexp --- */ var $loadlist953 = new Sk.builtins['list']([]);
                        $res943 = $loadlist953;
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- end of ifexp --- */ arguments = $res943;
                        var $loadgbl954 = Sk.misceval.loadname('isinstance', $gbl);
                        if (function_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_type\' referenced before assignment');
                        }
                        var $loadgbl955 = Sk.misceval.loadname('FunctionType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl954, [function_type, $loadgbl955]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call956 = $ret;
                        var $jfalse957 = ($call956 === false || !Sk.misceval.isTrue($call956));
                        if ($jfalse957) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        if (function_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(function_type, $scope933.$const958, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr959 = $ret;
                        var $compareres960 = null;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const961, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr962 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr959, $lattr962, 'NotIn', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres960 = $ret;
                        var $jfalse963 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse963) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- done --- */ var $jfalse964 = ($compareres960 === false || !Sk.misceval.isTrue($compareres960));
                        if ($jfalse964) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const961, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr965 = $ret;
                        $ret = Sk.abstr.gattr($lattr965, $scope933.$const966, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr967 = $ret;
                        if (function_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(function_type, $scope933.$const958, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr968 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr967, [$lattr968]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call969 = $ret;
                        if (function_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(function_type, $scope933.$const958, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr970 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (function_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_type\' referenced before assignment');
                        }
                        if (callee === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'callee\' referenced before assignment');
                        }
                        if (arguments === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'arguments\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const971, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr972 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr972);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call973 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr970, [self, function_type, callee, arguments, $call973]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call974 = $ret;
                        result = $call974;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const961, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr975 = $ret;
                        $ret = Sk.abstr.gattr($lattr975, $scope933.$const976, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr977 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr977);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call978 = $ret;
                        if (result === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result\' referenced before assignment');
                        }
                        return result;
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- end of if --- */ $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- end of if --- */ var $loadgbl1031 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1031);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1032 = $ret;
                        return $call1032;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 5:
                        /* --- list comp anchor --- */ $res943 = $_compr947;
                        $blk = 2; /* jump */
                        continue;
                    case 7:
                        /* --- next branch of if --- */ var $loadgbl985 = Sk.misceval.loadname('isinstance', $gbl);
                        if (function_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_type\' referenced before assignment');
                        }
                        var $loadgbl986 = Sk.misceval.loadname('ClassType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl985, [function_type, $loadgbl986]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call987 = $ret;
                        var $jfalse988 = ($call987 === false || !Sk.misceval.isTrue($call987));
                        if ($jfalse988) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        if (function_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(function_type, $scope933.$const989, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr990 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr990);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call991 = $ret;
                        $ret = Sk.abstr.gattr($call991, $scope933.$const958, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr992 = $ret;
                        constructor_$rn$ = $lattr992;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const961, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr993 = $ret;
                        $ret = Sk.abstr.gattr($lattr993, $scope933.$const966, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr994 = $ret;
                        if (constructor_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'constructor_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr994, [constructor_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call995 = $ret;
                        if (constructor_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'constructor_$rn$\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (constructor_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'constructor_$rn$\' referenced before assignment');
                        }
                        if (callee === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'callee\' referenced before assignment');
                        }
                        if (arguments === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'arguments\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const971, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr996 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr996);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call997 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray(constructor_$rn$, [self, constructor_$rn$, callee, arguments, $call997]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call998 = $ret;
                        result = $call998;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const961, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr999 = $ret;
                        $ret = Sk.abstr.gattr($lattr999, $scope933.$const976, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1000 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1000);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1001 = $ret;
                        var $compareres1003 = null;
                        if (function_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(function_type, $scope933.$const1004, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1005 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($scope933.$const1002, $lattr1005, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1003 = $ret;
                        var $jfalse1006 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1006) {
                            /*test failed */
                            $blk = 14;
                            continue;
                        }
                        $blk = 14; /* allowing case fallthrough */
                    case 14:
                        /* --- done --- */ var $jfalse1007 = ($compareres1003 === false || !Sk.misceval.isTrue($compareres1003));
                        if ($jfalse1007) {
                            /*test failed */
                            $blk = 13;
                            continue;
                        }
                        if (function_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(function_type, $scope933.$const1004, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1008 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr1008, $scope933.$const1002, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr1009 = $ret;
                        initializer = $lsubscr1009;
                        var $loadgbl1010 = Sk.misceval.loadname('isinstance', $gbl);
                        if (initializer === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'initializer\' referenced before assignment');
                        }
                        var $loadgbl1011 = Sk.misceval.loadname('FunctionType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1010, [initializer, $loadgbl1011]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1012 = $ret;
                        var $jfalse1013 = ($call1012 === false || !Sk.misceval.isTrue($call1012));
                        if ($jfalse1013) {
                            /*test failed */
                            $blk = 15;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const961, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1014 = $ret;
                        $ret = Sk.abstr.gattr($lattr1014, $scope933.$const966, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1015 = $ret;
                        if (initializer === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'initializer\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1015, [initializer]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1016 = $ret;
                        if (initializer === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'initializer\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(initializer, $scope933.$const958, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1017 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (initializer === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'initializer\' referenced before assignment');
                        }
                        if (result === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result\' referenced before assignment');
                        }
                        if (result === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result\' referenced before assignment');
                        }
                        var $elem1018 = result;
                        var $loadlist1019 = new Sk.builtins['list']([$elem1018]);
                        if (arguments === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'arguments\' referenced before assignment');
                        }
                        var $binop1020 = Sk.abstr.numberBinOp($loadlist1019, arguments, 'Add');
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const971, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1021 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1021);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1022 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1017, [self, initializer, result, $binop1020, $call1022]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1023 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const961, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1024 = $ret;
                        $ret = Sk.abstr.gattr($lattr1024, $scope933.$const976, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1025 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1025);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1026 = $ret;
                        $blk = 15; /* allowing case fallthrough */
                    case 15:
                        /* --- end of if --- */ $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- end of if --- */ if (result === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'result\' referenced before assignment');
                        }
                        return result;
                        $blk = 11; /* allowing case fallthrough */
                    case 11:
                        /* --- end of if --- */ $blk = 6; /* jump */
                        continue;
                    case 9:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const979, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr980 = $ret;
                        if (callee === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'callee\' referenced before assignment');
                        }
                        var $loaddict983 = new Sk.builtins['dict']([$scope933.$const982, callee]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr980, [$scope933.$const981, $loaddict983]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call984 = $ret;
                        $blk = 8; /* jump */
                        continue;
                    case 12:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope933.$const979, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1027 = $ret;
                        if (callee === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'callee\' referenced before assignment');
                        }
                        var $loaddict1029 = new Sk.builtins['dict']([$scope933.$const982, callee]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1027, [$scope933.$const1028, $loaddict1029]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1030 = $ret;
                        $blk = 11; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Call'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope933.$const935 = new Sk.builtin.str('visit');
    $scope933.$const937 = new Sk.builtin.str('func');
    $scope933.$const940 = new Sk.builtin.str('identify_caller');
    $scope933.$const944 = new Sk.builtin.str('args');
    $scope933.$const958 = new Sk.builtin.str('definition');
    $scope933.$const961 = new Sk.builtin.str('definition_chain');
    $scope933.$const966 = new Sk.builtin.str('append');
    $scope933.$const971 = new Sk.builtin.str('locate');
    $scope933.$const976 = new Sk.builtin.str('pop');
    $scope933.$const979 = new Sk.builtin.str('report_issue');
    $scope933.$const981 = new Sk.builtin.str('Recursive Call');
    $scope933.$const982 = new Sk.builtin.str('name');
    $scope933.$const989 = new Sk.builtin.str('get_constructor');
    $scope933.$const1002 = new Sk.builtin.str('__init__');
    $scope933.$const1004 = new Sk.builtin.str('fields');
    $scope933.$const1028 = new Sk.builtin.str('Not a function');
    var $scope1034 = (function $visit_ClassDef1035$(self, node) {
        var class_name, class_scope, definitions_scope, new_class_type; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1034.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1034.$const1036, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1037 = $ret;
                        class_name = $lattr1037;
                        var $loadgbl1038 = Sk.misceval.loadname('ClassType', $gbl);
                        if (class_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'class_name\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1038, [class_name]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1039 = $ret;
                        new_class_type = $call1039;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1034.$const1040, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1041 = $ret;
                        if (class_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'class_name\' referenced before assignment');
                        }
                        if (new_class_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_class_type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1041, [class_name, new_class_type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1042 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1034.$const1043, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1044 = $ret;
                        var $slice1045 = new Sk.builtins['slice'](Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$);
                        $ret = Sk.abstr.objectGetItem($lattr1044, $slice1045, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr1046 = $ret;
                        definitions_scope = $lsubscr1046;
                        var $loadgbl1047 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1047, $scope1034.$const1048, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1049 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (definitions_scope === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'definitions_scope\' referenced before assignment');
                        }
                        if (new_class_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_class_type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.applyOrSuspend($lattr1049, undefined, undefined, ['class_type', new_class_type], [self, definitions_scope]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1050 = $ret;
                        class_scope = $call1050;
                        if (class_scope === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'class_scope\' referenced before assignment');
                        }
                        var $mgr1051 = class_scope;
                        $ret = Sk.abstr.gattr($mgr1051, Sk.builtin.str.$exit, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $exit1052 = $ret;
                        $ret = Sk.abstr.gattr($mgr1051, Sk.builtin.str.$enter, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($ret);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $value1053 = $ret;
                        $exc.push(1);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1034.$const1054, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1055 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1055, [node]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1056 = $ret;
                        $exc.pop();
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- withtidyup --- */ $ret = Sk.misceval.callsimOrSuspendArray($exit1052, [Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if ($postfinally !== undefined) {
                            if ($postfinally.returning) {
                                return $postfinally.returning;
                            } else {
                                $blk = $postfinally.gotoBlock;
                                $postfinally = undefined;
                                continue;
                            }
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- withcarryon --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 1:
                        /* --- withexh --- */ $ret = Sk.misceval.applyOrSuspend($exit1052, undefined, Sk.builtin.getExcInfo($err), undefined, []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $jtrue1057 = ($ret === true || Sk.misceval.isTrue($ret));
                        if ($jtrue1057) {
                            /*test passed */
                            $blk = 3;
                            continue;
                        }
                        throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_ClassDef'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1034.$const1036 = new Sk.builtin.str('name_$rn$');
    $scope1034.$const1040 = new Sk.builtin.str('store_variable');
    $scope1034.$const1043 = new Sk.builtin.str('scope_chain');
    $scope1034.$const1048 = new Sk.builtin.str('NewScope');
    $scope1034.$const1054 = new Sk.builtin.str('generic_visit');
    var $scope1059 = (function $visit_Compare1060$(self, node) {
        var comparators, compare, left, op, right; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1059.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1059.$const1061, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1062 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1059.$const1063, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1064 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1062, [$lattr1064]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1065 = $ret;
                        left = $call1065;
                        var $_compr1066 = new Sk.builtins['list']([]);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1059.$const1067, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1068 = $ret;
                        var $iter1069 = Sk.abstr.iter($lattr1068);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- list comp start --- */ $ret = Sk.abstr.iternext($iter1069, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1070 = $ret;
                        if ($next1070 === undefined) {
                            $blk = 3;
                            continue;
                        }
                        compare = $next1070;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1059.$const1061, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1071 = $ret;
                        if (compare === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'compare\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1071, [compare]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1072 = $ret;
                        $_compr1066.v.push($call1072);
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- list comp skip --- */ $blk = 1; /* jump */
                        continue;
                    case 3:
                        /* --- list comp anchor --- */ comparators = $_compr1066;
                        var $loadgbl1073 = Sk.misceval.loadname('zip', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1059.$const1074, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1075 = $ret;
                        if (comparators === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'comparators\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1073, [$lattr1075, comparators]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1076 = $ret;
                        var $iter1077 = Sk.abstr.iter($call1076);
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1077, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1078 = $ret;
                        if ($next1078 === undefined) {
                            $blk = 5;
                            continue;
                        }
                        var $items1079 = Sk.abstr.sequenceUnpack($next1078, 2);
                        op = $items1079[0];
                        right = $items1079[1];
                        var $loadgbl1080 = Sk.misceval.loadname('isinstance', $gbl);
                        if (op === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op\' referenced before assignment');
                        }
                        var $loadgbl1081 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1081, $scope1059.$const1082, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1083 = $ret;
                        var $loadgbl1084 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1084, $scope1059.$const1085, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1086 = $ret;
                        var $loadgbl1087 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1087, $scope1059.$const1088, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1089 = $ret;
                        var $loadgbl1090 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1090, $scope1059.$const1091, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1092 = $ret;
                        var $elem1093 = $lattr1083;
                        var $elem1094 = $lattr1086;
                        var $elem1095 = $lattr1089;
                        var $elem1096 = $lattr1092;
                        var $loadtuple1097 = new Sk.builtins['tuple']([$elem1093, $elem1094, $elem1095, $elem1096]);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1080, [op, $loadtuple1097]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1098 = $ret;
                        var $jfalse1099 = ($call1098 === false || !Sk.misceval.isTrue($call1098));
                        if ($jfalse1099) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 4; /* jump */
                        continue;
                    case 5:
                        /* --- for cleanup --- */ $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- for end --- */ var $loadgbl1150 = Sk.misceval.loadname('BoolType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1150);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1151 = $ret;
                        return $call1151;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 7:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1059.$const1143, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1144 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        if (op === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op\' referenced before assignment');
                        }
                        var $loaddict1148 = new Sk.builtins['dict']([$scope1059.$const1063, left, $scope1059.$const1146, right, $scope1059.$const1147, op]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1144, [$scope1059.$const1145, $loaddict1148]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1149 = $ret;
                        $blk = 4; /* jump */
                        continue;
                    case 8:
                        /* --- next branch of if --- */ var $loadgbl1100 = Sk.misceval.loadname('isinstance', $gbl);
                        if (op === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op\' referenced before assignment');
                        }
                        var $loadgbl1101 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1101, $scope1059.$const1102, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1103 = $ret;
                        var $loadgbl1104 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1104, $scope1059.$const1105, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1106 = $ret;
                        var $loadgbl1107 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1107, $scope1059.$const1108, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1109 = $ret;
                        var $loadgbl1110 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1110, $scope1059.$const1111, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1112 = $ret;
                        var $elem1113 = $lattr1103;
                        var $elem1114 = $lattr1106;
                        var $elem1115 = $lattr1109;
                        var $elem1116 = $lattr1112;
                        var $loadtuple1117 = new Sk.builtins['tuple']([$elem1113, $elem1114, $elem1115, $elem1116]);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1100, [op, $loadtuple1117]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1118 = $ret;
                        var $jfalse1119 = ($call1118 === false || !Sk.misceval.isTrue($call1118));
                        if ($jfalse1119) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        var $loadgbl1120 = Sk.misceval.loadname('are_types_equal', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1120, [left, right]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1121 = $ret;
                        var $jfalse1122 = ($call1121 === false || !Sk.misceval.isTrue($call1121));
                        if ($jfalse1122) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        var $loadgbl1123 = Sk.misceval.loadname('isinstance', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        var $loadgbl1124 = Sk.misceval.loadname('ORDERABLE_TYPES', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1123, [left, $loadgbl1124]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1125 = $ret;
                        var $jfalse1126 = ($call1125 === false || !Sk.misceval.isTrue($call1125));
                        if ($jfalse1126) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        $blk = 4; /* jump */
                        continue;
                    case 9:
                        /* --- end of if --- */ $blk = 7; /* jump */
                        continue;
                    case 10:
                        /* --- next branch of if --- */ var $loadgbl1127 = Sk.misceval.loadname('isinstance', $gbl);
                        if (op === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op\' referenced before assignment');
                        }
                        var $loadgbl1128 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1128, $scope1059.$const1129, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1130 = $ret;
                        var $loadgbl1131 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1131, $scope1059.$const1132, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1133 = $ret;
                        var $elem1134 = $lattr1130;
                        var $elem1135 = $lattr1133;
                        var $loadtuple1136 = new Sk.builtins['tuple']([$elem1134, $elem1135]);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1127, [op, $loadtuple1136]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1137 = $ret;
                        var $jfalse1138 = ($call1137 === false || !Sk.misceval.isTrue($call1137));
                        if ($jfalse1138) {
                            /*test failed */
                            $blk = 13;
                            continue;
                        }
                        var $loadgbl1139 = Sk.misceval.loadname('isinstance', $gbl);
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        var $loadgbl1140 = Sk.misceval.loadname('INDEXABLE_TYPES', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1139, [right, $loadgbl1140]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1141 = $ret;
                        var $jfalse1142 = ($call1141 === false || !Sk.misceval.isTrue($call1141));
                        if ($jfalse1142) {
                            /*test failed */
                            $blk = 14;
                            continue;
                        }
                        $blk = 4; /* jump */
                        continue;
                    case 11:
                        /* --- end of if --- */ $blk = 9; /* jump */
                        continue;
                    case 12:
                        /* --- end of if --- */ $blk = 11; /* jump */
                        continue;
                    case 13:
                        /* --- end of if --- */ $blk = 9; /* jump */
                        continue;
                    case 14:
                        /* --- end of if --- */ $blk = 13; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Compare'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1059.$const1061 = new Sk.builtin.str('visit');
    $scope1059.$const1063 = new Sk.builtin.str('left');
    $scope1059.$const1067 = new Sk.builtin.str('comparators');
    $scope1059.$const1074 = new Sk.builtin.str('ops');
    $scope1059.$const1082 = new Sk.builtin.str('Eq');
    $scope1059.$const1085 = new Sk.builtin.str('NotEq');
    $scope1059.$const1088 = new Sk.builtin.str('Is');
    $scope1059.$const1091 = new Sk.builtin.str('IsNot');
    $scope1059.$const1102 = new Sk.builtin.str('Lt');
    $scope1059.$const1105 = new Sk.builtin.str('LtE');
    $scope1059.$const1108 = new Sk.builtin.str('GtE');
    $scope1059.$const1111 = new Sk.builtin.str('Gt');
    $scope1059.$const1129 = new Sk.builtin.str('In');
    $scope1059.$const1132 = new Sk.builtin.str('NotIn');
    $scope1059.$const1143 = new Sk.builtin.str('report_issue');
    $scope1059.$const1145 = new Sk.builtin.str('Incompatible types');
    $scope1059.$const1146 = new Sk.builtin.str('right');
    $scope1059.$const1147 = new Sk.builtin.str('operation');
    var $scope1153 = (function $_visit_collection_loop1154$(self, node) {
        var iter, iter_list_name, iter_subtype, iter_type, iter_variable_name, state; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1153.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1153.$const1155, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1156 = $ret;
                        iter = $lattr1156;
                        iter_list_name = Sk.builtin.none.none$;
                        var $loadgbl1157 = Sk.misceval.loadname('isinstance', $gbl);
                        if (iter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter\' referenced before assignment');
                        }
                        var $loadgbl1158 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1158, $scope1153.$const1159, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1160 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1157, [iter, $lattr1160]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1161 = $ret;
                        var $jfalse1162 = ($call1161 === false || !Sk.misceval.isTrue($call1161));
                        if ($jfalse1162) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (iter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(iter, $scope1153.$const1163, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1164 = $ret;
                        iter_list_name = $lattr1164;
                        if (iter_list_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_list_name\' referenced before assignment');
                        }
                        var $compareres1165 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(iter_list_name, $scope1153.$const1166, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1165 = $ret;
                        var $jfalse1167 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1167) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- done --- */ var $jfalse1168 = ($compareres1165 === false || !Sk.misceval.isTrue($compareres1165));
                        if ($jfalse1168) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1169, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1170 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1172, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1173 = $ret;
                        if (iter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1173, [iter]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1174 = $ret;
                        var $loaddict1176 = new Sk.builtins['dict']([$scope1153.$const1175, $call1174]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1170, [$scope1153.$const1171, $loaddict1176]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1177 = $ret;
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1178, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1179 = $ret;
                        if (iter_list_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_list_name\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1172, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1180 = $ret;
                        if (iter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1180, [iter]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1181 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1179, [iter_list_name, $call1181]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1182 = $ret;
                        state = $call1182;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope1153.$const1183, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1184 = $ret;
                        iter_type = $lattr1184;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (iter_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(iter_type, $scope1153.$const1188, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1189 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1189);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1190 = $ret;
                        var $jfalse1191 = ($call1190 === false || !Sk.misceval.isTrue($call1190));
                        if ($jfalse1191) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        var $loadgbl1192 = Sk.misceval.loadname('len', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1193, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1194 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1192, [$lattr1194]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1195 = $ret;
                        var $compareres1196 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call1195, $scope1153.$const1197, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1196 = $ret;
                        var $jfalse1198 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1198) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- done --- */ var $jfalse1199 = ($compareres1196 === false || !Sk.misceval.isTrue($compareres1196));
                        if ($jfalse1199) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1169, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1200 = $ret;
                        if (iter_list_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_list_name\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1172, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1203 = $ret;
                        if (iter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1203, [iter]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1204 = $ret;
                        var $loaddict1205 = new Sk.builtins['dict']([$scope1153.$const1202, iter_list_name, $scope1153.$const1175, $call1204]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1200, [$scope1153.$const1201, $loaddict1205]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1206 = $ret;
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- end of if --- */ $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ var $loadgbl1207 = Sk.misceval.loadname('isinstance', $gbl);
                        if (iter_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_type\' referenced before assignment');
                        }
                        var $loadgbl1208 = Sk.misceval.loadname('INDEXABLE_TYPES', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1207, [iter_type, $loadgbl1208]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1209 = $ret;
                        var $unaryop1210 = Sk.abstr.numberUnaryOp($call1209, 'Not');
                        var $jfalse1211 = ($unaryop1210 === false || !Sk.misceval.isTrue($unaryop1210));
                        if ($jfalse1211) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1169, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1212 = $ret;
                        if (iter_list_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_list_name\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1172, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1214 = $ret;
                        if (iter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1214, [iter]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1215 = $ret;
                        var $loaddict1216 = new Sk.builtins['dict']([$scope1153.$const1202, iter_list_name, $scope1153.$const1175, $call1215]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1212, [$scope1153.$const1213, $loaddict1216]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1217 = $ret;
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- end of if --- */ if (iter_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(iter_type, $scope1153.$const1218, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1219 = $ret;
                        var $loadgbl1220 = Sk.misceval.loadname('LiteralNum', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1220, [$scope1153.$const1221]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1222 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1219, [$call1222]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1223 = $ret;
                        iter_subtype = $call1223;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1224, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1225 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1153.$const1226, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1227 = $ret;
                        if (iter_subtype === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_subtype\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1225, [$lattr1227, iter_subtype]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1228 = $ret;
                        iter_variable_name = $call1228;
                        if (iter_variable_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_variable_name\' referenced before assignment');
                        }
                        var $boolopsucc1229 = iter_variable_name;
                        $boolopsucc1229 = iter_variable_name;
                        var $jfalse1230 = (iter_variable_name === false || !Sk.misceval.isTrue(iter_variable_name));
                        if ($jfalse1230) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        if (iter_list_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_list_name\' referenced before assignment');
                        }
                        $boolopsucc1229 = iter_list_name;
                        var $jfalse1231 = (iter_list_name === false || !Sk.misceval.isTrue(iter_list_name));
                        if ($jfalse1231) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- end of boolop --- */ var $jfalse1232 = ($boolopsucc1229 === false || !Sk.misceval.isTrue($boolopsucc1229));
                        if ($jfalse1232) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        if (iter_variable_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_variable_name\' referenced before assignment');
                        }
                        var $compareres1233 = null;
                        if (iter_list_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_list_name\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(iter_variable_name, iter_list_name, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1233 = $ret;
                        var $jfalse1234 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1234) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- done --- */ var $jfalse1235 = ($compareres1233 === false || !Sk.misceval.isTrue($compareres1233));
                        if ($jfalse1235) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1169, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1236 = $ret;
                        if (iter_variable_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter_variable_name\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1172, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1238 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1153.$const1226, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1239 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1238, [$lattr1239]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1240 = $ret;
                        var $loaddict1241 = new Sk.builtins['dict']([$scope1153.$const1202, iter_variable_name, $scope1153.$const1175, $call1240]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1236, [$scope1153.$const1237, $loaddict1241]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1242 = $ret;
                        $blk = 11; /* allowing case fallthrough */
                    case 11:
                        /* --- end of if --- */ $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1153.$const1185, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1186 = $ret;
                        if (iter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'iter\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1186, [iter]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1187 = $ret;
                        iter_type = $call1187;
                        $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '_visit_collection_loop'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1153.$const1155 = new Sk.builtin.str('iter');
    $scope1153.$const1159 = new Sk.builtin.str('Name');
    $scope1153.$const1163 = new Sk.builtin.str('id');
    $scope1153.$const1166 = new Sk.builtin.str('___');
    $scope1153.$const1169 = new Sk.builtin.str('report_issue');
    $scope1153.$const1171 = new Sk.builtin.str('Unconnected blocks');
    $scope1153.$const1172 = new Sk.builtin.str('locate');
    $scope1153.$const1175 = new Sk.builtin.str('position');
    $scope1153.$const1178 = new Sk.builtin.str('iterate_variable');
    $scope1153.$const1183 = new Sk.builtin.str('type');
    $scope1153.$const1185 = new Sk.builtin.str('visit');
    $scope1153.$const1188 = new Sk.builtin.str('is_empty');
    $scope1153.$const1193 = new Sk.builtin.str('scope_chain');
    $scope1153.$const1197 = new Sk.builtin.int_(1);
    $scope1153.$const1201 = new Sk.builtin.str('Iterating over empty list');
    $scope1153.$const1202 = new Sk.builtin.str('name');
    $scope1153.$const1213 = new Sk.builtin.str('Iterating over Non-list');
    $scope1153.$const1218 = new Sk.builtin.str('index');
    $scope1153.$const1221 = new Sk.builtin.int_(0);
    $scope1153.$const1224 = new Sk.builtin.str('_walk_target');
    $scope1153.$const1226 = new Sk.builtin.str('target');
    $scope1153.$const1237 = new Sk.builtin.str('Iteration Problem');
    var $scope1244 = (function $visit_comprehension1245$(self, node) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1244.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1244.$const1246, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1247 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1247, [node]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1248 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1244.$const1249, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1250 = $ret;
                        var $jfalse1251 = ($lattr1250 === false || !Sk.misceval.isTrue($lattr1250));
                        if ($jfalse1251) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1244.$const1252, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1253 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1244.$const1249, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1254 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1253, [$lattr1254]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1255 = $ret;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_comprehension'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1244.$const1246 = new Sk.builtin.str('_visit_collection_loop');
    $scope1244.$const1249 = new Sk.builtin.str('ifs');
    $scope1244.$const1252 = new Sk.builtin.str('visit_statements');
    var $scope1257 = (function $visit_Dict1258$(self, node) {
        var all_literals, key, keys, literal, literals, type, value, values; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1257.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl1260 = Sk.misceval.loadname('DictType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1260);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1261 = $ret;
                        type = $call1261;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1257.$const1262, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1263 = $ret;
                        var $unaryop1264 = Sk.abstr.numberUnaryOp($lattr1263, 'Not');
                        var $jfalse1265 = ($unaryop1264 === false || !Sk.misceval.isTrue($unaryop1264));
                        if ($jfalse1265) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope1257.$const1266, Sk.builtin.bool.true$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        return type;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope1257.$const1266, Sk.builtin.bool.false$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        all_literals = Sk.builtin.bool.true$;
                        var $loadlist1267 = new Sk.builtins['list']([]);
                        var $loadlist1268 = new Sk.builtins['list']([]);
                        var $loadlist1269 = new Sk.builtins['list']([]);
                        var $elem1270 = $loadlist1267;
                        var $elem1271 = $loadlist1268;
                        var $elem1272 = $loadlist1269;
                        var $loadtuple1273 = new Sk.builtins['tuple']([$elem1270, $elem1271, $elem1272]);
                        var $items1274 = Sk.abstr.sequenceUnpack($loadtuple1273, 3);
                        keys = $items1274[0];
                        values = $items1274[1];
                        literals = $items1274[2];
                        var $loadgbl1275 = Sk.misceval.loadname('zip', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1257.$const1262, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1276 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1257.$const1277, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1278 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1275, [$lattr1276, $lattr1278]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1279 = $ret;
                        var $iter1280 = Sk.abstr.iter($call1279);
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1280, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1281 = $ret;
                        if ($next1281 === undefined) {
                            $blk = 4;
                            continue;
                        }
                        var $items1282 = Sk.abstr.sequenceUnpack($next1281, 2);
                        key = $items1282[0];
                        value = $items1282[1];
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1257.$const1283, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1284 = $ret;
                        if (key === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'key\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1284, [key]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1285 = $ret;
                        literal = $call1285;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1257.$const1286, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1287 = $ret;
                        if (key === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'key\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1287, [key]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1288 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1257.$const1286, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1289 = $ret;
                        if (value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1289, [value]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1290 = $ret;
                        var $elem1291 = $call1288;
                        var $elem1292 = $call1290;
                        var $loadtuple1293 = new Sk.builtins['tuple']([$elem1291, $elem1292]);
                        var $items1294 = Sk.abstr.sequenceUnpack($loadtuple1293, 2);
                        key = $items1294[0];
                        value = $items1294[1];
                        if (values === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'values\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(values, $scope1257.$const1295, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1296 = $ret;
                        if (value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1296, [value]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1297 = $ret;
                        if (keys === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'keys\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(keys, $scope1257.$const1295, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1298 = $ret;
                        if (key === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'key\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1298, [key]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1299 = $ret;
                        if (literal === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'literal\' referenced before assignment');
                        }
                        var $compareres1300 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(literal, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1300 = $ret;
                        var $jfalse1301 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1301) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- done --- */ var $jfalse1302 = ($compareres1300 === false || !Sk.misceval.isTrue($compareres1300));
                        if ($jfalse1302) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        if (literals === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'literals\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(literals, $scope1257.$const1295, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1303 = $ret;
                        if (literal === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'literal\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1303, [literal]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1304 = $ret;
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- end of if --- */ $blk = 3; /* jump */
                        continue;
                    case 4:
                        /* --- for cleanup --- */ $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- for end --- */ if (all_literals === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'all_literals\' referenced before assignment');
                        }
                        var $jfalse1305 = (all_literals === false || !Sk.misceval.isTrue(all_literals));
                        if ($jfalse1305) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        if (literals === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'literals\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope1257.$const1306, literals, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (values === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'values\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope1257.$const1277, values, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 7:
                        /* --- next branch of if --- */ all_literals = Sk.builtin.bool.false$;
                        $blk = 6; /* jump */
                        continue;
                    case 10:
                        /* --- next branch of if --- */ if (key === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'key\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope1257.$const1262, key, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope1257.$const1277, value, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 9; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Dict'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1257.$const1259 = new Sk.builtin.str('\n        Three types of dictionaries\n        - empty\n        - uniform type\n        - record\n        TODO: Handle records appropriately\n        ');
    $scope1257.$const1262 = new Sk.builtin.str('keys');
    $scope1257.$const1266 = new Sk.builtin.str('empty');
    $scope1257.$const1277 = new Sk.builtin.str('values');
    $scope1257.$const1283 = new Sk.builtin.str('get_literal');
    $scope1257.$const1286 = new Sk.builtin.str('visit');
    $scope1257.$const1295 = new Sk.builtin.str('append');
    $scope1257.$const1306 = new Sk.builtin.str('literals');
    var $scope1308 = (function $visit_DictComp1309$(self, node) {
        var generator, keys, values; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1308.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1308.$const1310, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1311 = $ret;
                        var $iter1312 = Sk.abstr.iter($lattr1311);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1312, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1313 = $ret;
                        if ($next1313 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        generator = $next1313;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1308.$const1314, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1315 = $ret;
                        if (generator === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'generator\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1315, [generator]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1316 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1308.$const1314, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1317 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1308.$const1318, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1319 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1317, [$lattr1319]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1320 = $ret;
                        keys = $call1320;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1308.$const1314, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1321 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1308.$const1322, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1323 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1321, [$lattr1323]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1324 = $ret;
                        values = $call1324;
                        var $loadgbl1325 = Sk.misceval.loadname('DictType', $gbl);
                        if (keys === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'keys\' referenced before assignment');
                        }
                        if (values === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'values\' referenced before assignment');
                        }
                        $ret = Sk.misceval.applyOrSuspend($loadgbl1325, undefined, undefined, ['keys', keys, 'values', values], []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1326 = $ret;
                        return $call1326;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_DictComp'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1308.$const1310 = new Sk.builtin.str('generators');
    $scope1308.$const1314 = new Sk.builtin.str('visit');
    $scope1308.$const1318 = new Sk.builtin.str('key');
    $scope1308.$const1322 = new Sk.builtin.str('value');
    var $scope1328 = (function $visit_For1329$(self, node) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1328.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1328.$const1330, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1331 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1331, [node]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1332 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1328.$const1333, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1334 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1328.$const1335, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1336 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1334, [$lattr1336]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1337 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1328.$const1333, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1338 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1328.$const1339, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1340 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1338, [$lattr1340]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1341 = $ret;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_For'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1328.$const1330 = new Sk.builtin.str('_visit_collection_loop');
    $scope1328.$const1333 = new Sk.builtin.str('visit_statements');
    $scope1328.$const1335 = new Sk.builtin.str('body');
    $scope1328.$const1339 = new Sk.builtin.str('orelse');
    var $scope1343 = (function $visit_FunctionDef1344$(self, node) {
        // has cell
        var definition, function_$rw$, function_name; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1343.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {
            $cell.self = self;
            $cell.node = node;
        }
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ $ret = Sk.abstr.gattr($cell.node, $scope1343.$const1345, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1346 = $ret;
                        function_name = $lattr1346;
                        $ret = Sk.abstr.gattr($cell.self, $scope1343.$const1347, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1348 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1348);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1349 = $ret;
                        $cell.position = $call1349;
                        $ret = Sk.abstr.gattr($cell.self, $scope1343.$const1350, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1351 = $ret;
                        var $slice1352 = new Sk.builtins['slice'](Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$);
                        $ret = Sk.abstr.objectGetItem($lattr1351, $slice1352, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr1353 = $ret;
                        $cell.definitions_scope = $lsubscr1353;
                        $scope1354.co_name = new Sk.builtins['str']('definition');
                        $scope1354.co_varnames = ['tifa', 'call_type', 'call_name', 'parameters', 'call_position'];
                        var $funcobj1497 = new Sk.builtins['function']($scope1354, $gbl, $cell);
                        definition = $funcobj1497;
                        var $loadgbl1498 = Sk.misceval.loadname('FunctionType', $gbl);
                        if (definition === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'definition\' referenced before assignment');
                        }
                        if (function_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_name\' referenced before assignment');
                        }
                        $ret = Sk.misceval.applyOrSuspend($loadgbl1498, undefined, undefined, ['definition', definition, 'name', function_name], []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1499 = $ret;
                        function_$rw$ = $call1499;
                        $ret = Sk.abstr.gattr($cell.self, $scope1343.$const1500, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1501 = $ret;
                        if (function_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_name\' referenced before assignment');
                        }
                        if (function_$rw$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_$rw$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1501, [function_name, function_$rw$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1502 = $ret;
                        if (function_$rw$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_$rw$\' referenced before assignment');
                        }
                        return function_$rw$;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_FunctionDef'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1343.$const1345 = new Sk.builtin.str('name_$rn$');
    $scope1343.$const1347 = new Sk.builtin.str('locate');
    $scope1343.$const1350 = new Sk.builtin.str('scope_chain');
    $scope1343.$const1500 = new Sk.builtin.str('store_variable');
    var $scope1354 = (function $definition1355$(tifa, call_type, call_name, parameters, call_position, $free) {
        // has free
        var annotation, arg, args, function_scope, name_$rn$, parameter, return_state, return_value, returns, undefined_parameter; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1354.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (tifa === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'tifa\' referenced before assignment');
                        }
                        if (call_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'call_type\' referenced before assignment');
                        }
                        if (call_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'call_name\' referenced before assignment');
                        }
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        if (call_position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'call_position\' referenced before assignment');
                        }
                        var $loadgbl1356 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1356, $scope1354.$const1357, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1358 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1358, [$free.self, $free.definitions_scope]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1359 = $ret;
                        function_scope = $call1359;
                        if (function_scope === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_scope\' referenced before assignment');
                        }
                        var $mgr1360 = function_scope;
                        $ret = Sk.abstr.gattr($mgr1360, Sk.builtin.str.$exit, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $exit1361 = $ret;
                        $ret = Sk.abstr.gattr($mgr1360, Sk.builtin.str.$enter, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($ret);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $value1362 = $ret;
                        $exc.push(1);
                        $ret = Sk.abstr.gattr($free.node, $scope1354.$const1363, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1364 = $ret;
                        $ret = Sk.abstr.gattr($lattr1364, $scope1354.$const1363, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1365 = $ret;
                        args = $lattr1365;
                        var $loadgbl1366 = Sk.misceval.loadname('len', $gbl);
                        if (args === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'args\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1366, [args]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1367 = $ret;
                        var $compareres1368 = null;
                        var $loadgbl1369 = Sk.misceval.loadname('len', $gbl);
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1369, [parameters]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1370 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call1367, $call1370, 'NotEq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1368 = $ret;
                        var $jfalse1371 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1371) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- done --- */ var $jfalse1372 = ($compareres1368 === false || !Sk.misceval.isTrue($compareres1368));
                        if ($jfalse1372) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        $ret = Sk.abstr.gattr($free.self, $scope1354.$const1373, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1374 = $ret;
                        var $loaddict1377 = new Sk.builtins['dict']([$scope1354.$const1376, $free.position]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1374, [$scope1354.$const1375, $loaddict1377]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1378 = $ret;
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ var $loadgbl1379 = Sk.misceval.loadname('zip', $gbl);
                        if (args === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'args\' referenced before assignment');
                        }
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1379, [args, parameters]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1380 = $ret;
                        var $iter1381 = Sk.abstr.iter($call1380);
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1381, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1382 = $ret;
                        if ($next1382 === undefined) {
                            $blk = 7;
                            continue;
                        }
                        var $items1383 = Sk.abstr.sequenceUnpack($next1382, 2);
                        arg = $items1383[0];
                        parameter = $items1383[1];
                        if (arg === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'arg\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(arg, $scope1354.$const1384, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1385 = $ret;
                        name_$rn$ = $lattr1385;
                        if (arg === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'arg\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(arg, $scope1354.$const1386, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1387 = $ret;
                        var $jfalse1388 = ($lattr1387 === false || !Sk.misceval.isTrue($lattr1387));
                        if ($jfalse1388) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $ret = Sk.abstr.gattr($free.self, $scope1354.$const1389, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1390 = $ret;
                        if (arg === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'arg\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(arg, $scope1354.$const1386, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1391 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1390, [$lattr1391]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1392 = $ret;
                        var $loadgbl1393 = Sk.misceval.loadname('get_tifa_type', $gbl);
                        if (arg === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'arg\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(arg, $scope1354.$const1386, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1394 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1393, [$lattr1394, $free.self]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1395 = $ret;
                        annotation = $call1395;
                        var $loadgbl1396 = Sk.misceval.loadname('isinstance', $gbl);
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        var $loadgbl1397 = Sk.misceval.loadname('ListType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1396, [parameter, $loadgbl1397]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1398 = $ret;
                        var $boolopsucc1399 = $call1398;
                        $boolopsucc1399 = $call1398;
                        var $jfalse1400 = ($call1398 === false || !Sk.misceval.isTrue($call1398));
                        if ($jfalse1400) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        var $loadgbl1401 = Sk.misceval.loadname('isinstance', $gbl);
                        if (annotation === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'annotation\' referenced before assignment');
                        }
                        var $loadgbl1402 = Sk.misceval.loadname('ListType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1401, [annotation, $loadgbl1402]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1403 = $ret;
                        $boolopsucc1399 = $call1403;
                        var $jfalse1404 = ($call1403 === false || !Sk.misceval.isTrue($call1403));
                        if ($jfalse1404) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        $blk = 11; /* allowing case fallthrough */
                    case 11:
                        /* --- end of boolop --- */ var $jfalse1405 = ($boolopsucc1399 === false || !Sk.misceval.isTrue($boolopsucc1399));
                        if ($jfalse1405) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        var $loadgbl1406 = Sk.misceval.loadname('isinstance', $gbl);
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(parameter, $scope1354.$const1407, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1408 = $ret;
                        var $loadgbl1409 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1406, [$lattr1408, $loadgbl1409]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1410 = $ret;
                        var $jfalse1411 = ($call1410 === false || !Sk.misceval.isTrue($call1410));
                        if ($jfalse1411) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        if (annotation === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'annotation\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(annotation, $scope1354.$const1407, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1412 = $ret;
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(parameter, $scope1354.$const1407, $lattr1412, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- end of if --- */ $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- end of if --- */ var $loadgbl1413 = Sk.misceval.loadname('are_types_equal', $gbl);
                        if (annotation === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'annotation\' referenced before assignment');
                        }
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1413, [annotation, parameter, Sk.builtin.bool.true$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1414 = $ret;
                        var $unaryop1415 = Sk.abstr.numberUnaryOp($call1414, 'Not');
                        var $jfalse1416 = ($unaryop1415 === false || !Sk.misceval.isTrue($unaryop1415));
                        if ($jfalse1416) {
                            /*test failed */
                            $blk = 13;
                            continue;
                        }
                        $ret = Sk.abstr.gattr($free.self, $scope1354.$const1373, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1417 = $ret;
                        if (annotation === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'annotation\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        var $loaddict1422 = new Sk.builtins['dict']([$scope1354.$const1419, annotation, $scope1354.$const1420, name_$rn$, $scope1354.$const1421, parameter]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1417, [$scope1354.$const1418, $loaddict1422]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1423 = $ret;
                        $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- end of if --- */ $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- end of if --- */ if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        var $compareres1424 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(parameter, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1424 = $ret;
                        var $jfalse1425 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1425) {
                            /*test failed */
                            $blk = 15;
                            continue;
                        }
                        $blk = 15; /* allowing case fallthrough */
                    case 15:
                        /* --- done --- */ var $jfalse1426 = ($compareres1424 === false || !Sk.misceval.isTrue($compareres1424));
                        if ($jfalse1426) {
                            /*test failed */
                            $blk = 14;
                            continue;
                        }
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(parameter, $scope1354.$const1427, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1428 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1428);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1429 = $ret;
                        parameter = $call1429;
                        $ret = Sk.abstr.gattr($free.self, $scope1354.$const1430, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1431 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1431, [name_$rn$, parameter, $free.position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1432 = $ret;
                        $blk = 14; /* allowing case fallthrough */
                    case 14:
                        /* --- end of if --- */ $blk = 6; /* jump */
                        continue;
                    case 1:
                        /* --- withexh --- */ $ret = Sk.misceval.applyOrSuspend($exit1361, undefined, Sk.builtin.getExcInfo($err), undefined, []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $jtrue1496 = ($ret === true || Sk.misceval.isTrue($ret));
                        if ($jtrue1496) {
                            /*test passed */
                            $blk = 3;
                            continue;
                        }
                        throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- withtidyup --- */ $ret = Sk.misceval.callsimOrSuspendArray($exit1361, [Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if ($postfinally !== undefined) {
                            if ($postfinally.returning) {
                                return $postfinally.returning;
                            } else {
                                $blk = $postfinally.gotoBlock;
                                $postfinally = undefined;
                                continue;
                            }
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- withcarryon --- */ if (return_value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_value\' referenced before assignment');
                        }
                        return return_value;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 7:
                        /* --- for cleanup --- */ $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- for end --- */ var $loadgbl1433 = Sk.misceval.loadname('len', $gbl);
                        if (args === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'args\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1433, [args]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1434 = $ret;
                        var $compareres1435 = null;
                        var $loadgbl1436 = Sk.misceval.loadname('len', $gbl);
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1436, [parameters]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1437 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call1434, $call1437, 'Lt', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1435 = $ret;
                        var $jfalse1438 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1438) {
                            /*test failed */
                            $blk = 17;
                            continue;
                        }
                        $blk = 17; /* allowing case fallthrough */
                    case 17:
                        /* --- done --- */ var $jfalse1439 = ($compareres1435 === false || !Sk.misceval.isTrue($compareres1435));
                        if ($jfalse1439) {
                            /*test failed */
                            $blk = 16;
                            continue;
                        }
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        var $loadgbl1440 = Sk.misceval.loadname('len', $gbl);
                        if (args === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'args\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1440, [args]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1441 = $ret;
                        var $slice1442 = new Sk.builtins['slice']($call1441, Sk.builtin.none.none$, Sk.builtin.none.none$);
                        $ret = Sk.abstr.objectGetItem(parameters, $slice1442, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr1443 = $ret;
                        var $iter1444 = Sk.abstr.iter($lsubscr1443);
                        $blk = 18; /* allowing case fallthrough */
                    case 18:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1444, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1445 = $ret;
                        if ($next1445 === undefined) {
                            $blk = 19;
                            continue;
                        }
                        undefined_parameter = $next1445;
                        $ret = Sk.abstr.gattr($free.self, $scope1354.$const1430, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1446 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loadgbl1447 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1447);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1448 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1446, [name_$rn$, $call1448, $free.position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1449 = $ret;
                        $blk = 18; /* jump */
                        continue;
                    case 16:
                        /* --- end of if --- */ $ret = Sk.abstr.gattr($free.self, $scope1354.$const1450, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1451 = $ret;
                        $ret = Sk.abstr.gattr($free.node, $scope1354.$const1452, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1453 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1451, [$lattr1453]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1454 = $ret;
                        $ret = Sk.abstr.gattr($free.self, $scope1354.$const1455, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1456 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1456, [$scope1354.$const1457]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1458 = $ret;
                        return_state = $call1458;
                        var $loadgbl1459 = Sk.misceval.loadname('NoneType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1459);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1460 = $ret;
                        return_value = $call1460;
                        if (return_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(return_state, $scope1354.$const1461, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1462 = $ret;
                        var $boolopsucc1463 = $lattr1462;
                        $boolopsucc1463 = $lattr1462;
                        var $jfalse1464 = ($lattr1462 === false || !Sk.misceval.isTrue($lattr1462));
                        if ($jfalse1464) {
                            /*test failed */
                            $blk = 22;
                            continue;
                        }
                        if (return_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(return_state, $scope1354.$const1465, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1466 = $ret;
                        $boolopsucc1463 = $lattr1466;
                        var $jfalse1467 = ($lattr1466 === false || !Sk.misceval.isTrue($lattr1466));
                        if ($jfalse1467) {
                            /*test failed */
                            $blk = 22;
                            continue;
                        }
                        $blk = 22; /* allowing case fallthrough */
                    case 22:
                        /* --- end of boolop --- */ var $jfalse1468 = ($boolopsucc1463 === false || !Sk.misceval.isTrue($boolopsucc1463));
                        if ($jfalse1468) {
                            /*test failed */
                            $blk = 21;
                            continue;
                        }
                        $ret = Sk.abstr.gattr($free.self, $scope1354.$const1469, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1470 = $ret;
                        if (call_position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'call_position\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1470, [$scope1354.$const1457, call_position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1471 = $ret;
                        return_state = $call1471;
                        if (return_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(return_state, $scope1354.$const1472, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1473 = $ret;
                        return_value = $lattr1473;
                        $ret = Sk.abstr.gattr($free.node, $scope1354.$const1474, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1475 = $ret;
                        var $jfalse1476 = ($lattr1475 === false || !Sk.misceval.isTrue($lattr1475));
                        if ($jfalse1476) {
                            /*test failed */
                            $blk = 23;
                            continue;
                        }
                        var $loadgbl1477 = Sk.misceval.loadname('get_tifa_type', $gbl);
                        $ret = Sk.abstr.gattr($free.node, $scope1354.$const1474, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1478 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1477, [$lattr1478, $free.self]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1479 = $ret;
                        returns = $call1479;
                        var $loadgbl1480 = Sk.misceval.loadname('are_types_equal', $gbl);
                        if (return_value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_value\' referenced before assignment');
                        }
                        if (returns === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'returns\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1480, [return_value, returns, Sk.builtin.bool.true$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1481 = $ret;
                        var $unaryop1482 = Sk.abstr.numberUnaryOp($call1481, 'Not');
                        var $jfalse1483 = ($unaryop1482 === false || !Sk.misceval.isTrue($unaryop1482));
                        if ($jfalse1483) {
                            /*test failed */
                            $blk = 24;
                            continue;
                        }
                        $ret = Sk.abstr.gattr($free.self, $scope1354.$const1373, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1484 = $ret;
                        if (returns === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'returns\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(returns, $scope1354.$const1486, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1487 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1487);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1488 = $ret;
                        if (return_value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_value\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(return_value, $scope1354.$const1486, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1490 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1490);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1491 = $ret;
                        if (return_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(return_state, $scope1354.$const1376, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1493 = $ret;
                        var $loaddict1494 = new Sk.builtins['dict']([$scope1354.$const1489, $call1488, $scope1354.$const1492, $call1491, $scope1354.$const1376, $lattr1493]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1484, [$scope1354.$const1485, $loaddict1494]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1495 = $ret;
                        $blk = 24; /* allowing case fallthrough */
                    case 24:
                        /* --- end of if --- */ $blk = 23; /* allowing case fallthrough */
                    case 23:
                        /* --- end of if --- */ $blk = 21; /* allowing case fallthrough */
                    case 21:
                        /* --- end of if --- */ $exc.pop();
                        $blk = 2; /* jump */
                        continue;
                    case 19:
                        /* --- for cleanup --- */ $blk = 20; /* allowing case fallthrough */
                    case 20:
                        /* --- for end --- */ $blk = 16; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'definition'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1354.$const1357 = new Sk.builtin.str('NewScope');
    $scope1354.$const1363 = new Sk.builtin.str('args');
    $scope1354.$const1373 = new Sk.builtin.str('report_issue');
    $scope1354.$const1375 = new Sk.builtin.str('Incorrect Arity');
    $scope1354.$const1376 = new Sk.builtin.str('position');
    $scope1354.$const1384 = new Sk.builtin.str('arg');
    $scope1354.$const1386 = new Sk.builtin.str('annotation');
    $scope1354.$const1389 = new Sk.builtin.str('visit');
    $scope1354.$const1407 = new Sk.builtin.str('subtype');
    $scope1354.$const1418 = new Sk.builtin.str('Parameter Type Mismatch');
    $scope1354.$const1419 = new Sk.builtin.str('parameter');
    $scope1354.$const1420 = new Sk.builtin.str('parameter_name');
    $scope1354.$const1421 = new Sk.builtin.str('argument');
    $scope1354.$const1427 = new Sk.builtin.str('clone_mutably');
    $scope1354.$const1430 = new Sk.builtin.str('store_variable');
    $scope1354.$const1450 = new Sk.builtin.str('visit_statements');
    $scope1354.$const1452 = new Sk.builtin.str('body');
    $scope1354.$const1455 = new Sk.builtin.str('find_variable_scope');
    $scope1354.$const1457 = new Sk.builtin.str('*return');
    $scope1354.$const1461 = new Sk.builtin.str('exists');
    $scope1354.$const1465 = new Sk.builtin.str('in_scope');
    $scope1354.$const1469 = new Sk.builtin.str('load_variable');
    $scope1354.$const1472 = new Sk.builtin.str('type');
    $scope1354.$const1474 = new Sk.builtin.str('returns');
    $scope1354.$const1485 = new Sk.builtin.str('Multiple Return Types');
    $scope1354.$const1486 = new Sk.builtin.str('precise_description');
    $scope1354.$const1489 = new Sk.builtin.str('expected');
    $scope1354.$const1492 = new Sk.builtin.str('actual');
    var $scope1504 = (function $visit_GeneratorExp1505$(self, node) {
        var generator; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1504.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1504.$const1506, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1507 = $ret;
                        var $iter1508 = Sk.abstr.iter($lattr1507);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1508, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1509 = $ret;
                        if ($next1509 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        generator = $next1509;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1504.$const1510, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1511 = $ret;
                        if (generator === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'generator\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1511, [generator]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1512 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ var $loadgbl1513 = Sk.misceval.loadname('GeneratorType', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1504.$const1510, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1514 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1504.$const1515, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1516 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1514, [$lattr1516]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1517 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1513, [$call1517]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1518 = $ret;
                        return $call1518;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_GeneratorExp'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1504.$const1506 = new Sk.builtin.str('generators');
    $scope1504.$const1510 = new Sk.builtin.str('visit');
    $scope1504.$const1515 = new Sk.builtin.str('elt');
    var $scope1520 = (function $visit_If1521$(self, node) {
        var else_path, if_path, statement, this_path_id; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1520.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1520.$const1522, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1523 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1520.$const1524, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1525 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1523, [$lattr1525]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1526 = $ret;
                        var $loadgbl1527 = Sk.misceval.loadname('len', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1520.$const1528, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1529 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1527, [$lattr1529]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1530 = $ret;
                        var $compareres1531 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call1530, $scope1520.$const1532, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1531 = $ret;
                        var $jfalse1533 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1533) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- done --- */ var $boolopsucc1534 = $compareres1531;
                        $boolopsucc1534 = $compareres1531;
                        var $jfalse1535 = ($compareres1531 === false || !Sk.misceval.isTrue($compareres1531));
                        if ($jfalse1535) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        var $loadgbl1536 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1520.$const1528, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1537 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr1537, $scope1520.$const1538, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr1539 = $ret;
                        var $loadgbl1540 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1540, $scope1520.$const1541, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1542 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1536, [$lsubscr1539, $lattr1542]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1543 = $ret;
                        $boolopsucc1534 = $call1543;
                        var $jfalse1544 = ($call1543 === false || !Sk.misceval.isTrue($call1543));
                        if ($jfalse1544) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of boolop --- */ var $jfalse1545 = ($boolopsucc1534 === false || !Sk.misceval.isTrue($boolopsucc1534));
                        if ($jfalse1545) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1520.$const1546, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1547 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1547, [$scope1520.$const1548]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1549 = $ret;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1520.$const1570, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1571 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr1571, $scope1520.$const1538, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr1572 = $ret;
                        this_path_id = $lsubscr1572;
                        var $loadgbl1573 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1573, $scope1520.$const1574, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1575 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (this_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'this_path_id\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1575, [self, this_path_id, $scope1520.$const1576]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1577 = $ret;
                        if_path = $call1577;
                        if (if_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'if_path\' referenced before assignment');
                        }
                        var $mgr1578 = if_path;
                        $ret = Sk.abstr.gattr($mgr1578, Sk.builtin.str.$exit, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $exit1579 = $ret;
                        $ret = Sk.abstr.gattr($mgr1578, Sk.builtin.str.$enter, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($ret);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $value1580 = $ret;
                        $exc.push(9);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1520.$const1551, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1581 = $ret;
                        var $iter1582 = Sk.abstr.iter($lattr1581);
                        $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1582, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1583 = $ret;
                        if ($next1583 === undefined) {
                            $blk = 13;
                            continue;
                        }
                        statement = $next1583;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1520.$const1522, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1584 = $ret;
                        if (statement === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'statement\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1584, [statement]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1585 = $ret;
                        $blk = 12; /* jump */
                        continue;
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl1550 = Sk.misceval.loadname('len', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1520.$const1551, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1552 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1550, [$lattr1552]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1553 = $ret;
                        var $compareres1554 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call1553, $scope1520.$const1532, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1554 = $ret;
                        var $jfalse1555 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1555) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- done --- */ var $boolopsucc1556 = $compareres1554;
                        $boolopsucc1556 = $compareres1554;
                        var $jfalse1557 = ($compareres1554 === false || !Sk.misceval.isTrue($compareres1554));
                        if ($jfalse1557) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        var $loadgbl1558 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1520.$const1551, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1559 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr1559, $scope1520.$const1538, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr1560 = $ret;
                        var $loadgbl1561 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1561, $scope1520.$const1541, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1562 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1558, [$lsubscr1560, $lattr1562]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1563 = $ret;
                        $boolopsucc1556 = $call1563;
                        var $jfalse1564 = ($call1563 === false || !Sk.misceval.isTrue($call1563));
                        if ($jfalse1564) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- end of boolop --- */ var $jfalse1565 = ($boolopsucc1556 === false || !Sk.misceval.isTrue($boolopsucc1556));
                        if ($jfalse1565) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1520.$const1528, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1566 = $ret;
                        var $jfalse1567 = ($lattr1566 === false || !Sk.misceval.isTrue($lattr1566));
                        if ($jfalse1567) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1520.$const1546, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1568 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1568, [$scope1520.$const1548]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1569 = $ret;
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- end of if --- */ $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 9:
                        /* --- withexh --- */ $ret = Sk.misceval.applyOrSuspend($exit1579, undefined, Sk.builtin.getExcInfo($err), undefined, []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $jtrue1586 = ($ret === true || Sk.misceval.isTrue($ret));
                        if ($jtrue1586) {
                            /*test passed */
                            $blk = 11;
                            continue;
                        }
                        throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 10:
                        /* --- withtidyup --- */ $ret = Sk.misceval.callsimOrSuspendArray($exit1579, [Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if ($postfinally !== undefined) {
                            if ($postfinally.returning) {
                                return $postfinally.returning;
                            } else {
                                $blk = $postfinally.gotoBlock;
                                $postfinally = undefined;
                                continue;
                            }
                        }
                        $blk = 11; /* allowing case fallthrough */
                    case 11:
                        /* --- withcarryon --- */ var $loadgbl1587 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1587, $scope1520.$const1574, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1588 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (this_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'this_path_id\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1588, [self, this_path_id, $scope1520.$const1589]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1590 = $ret;
                        else_path = $call1590;
                        if (else_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'else_path\' referenced before assignment');
                        }
                        var $mgr1591 = else_path;
                        $ret = Sk.abstr.gattr($mgr1591, Sk.builtin.str.$exit, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $exit1592 = $ret;
                        $ret = Sk.abstr.gattr($mgr1591, Sk.builtin.str.$enter, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($ret);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $value1593 = $ret;
                        $exc.push(15);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1520.$const1528, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1594 = $ret;
                        var $iter1595 = Sk.abstr.iter($lattr1594);
                        $blk = 18; /* allowing case fallthrough */
                    case 18:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1595, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1596 = $ret;
                        if ($next1596 === undefined) {
                            $blk = 19;
                            continue;
                        }
                        statement = $next1596;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1520.$const1522, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1597 = $ret;
                        if (statement === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'statement\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1597, [statement]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1598 = $ret;
                        $blk = 18; /* jump */
                        continue;
                    case 13:
                        /* --- for cleanup --- */ $blk = 14; /* allowing case fallthrough */
                    case 14:
                        /* --- for end --- */ $exc.pop();
                        $blk = 10; /* jump */
                        continue;
                    case 15:
                        /* --- withexh --- */ $ret = Sk.misceval.applyOrSuspend($exit1592, undefined, Sk.builtin.getExcInfo($err), undefined, []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $jtrue1599 = ($ret === true || Sk.misceval.isTrue($ret));
                        if ($jtrue1599) {
                            /*test passed */
                            $blk = 17;
                            continue;
                        }
                        throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 16:
                        /* --- withtidyup --- */ $ret = Sk.misceval.callsimOrSuspendArray($exit1592, [Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if ($postfinally !== undefined) {
                            if ($postfinally.returning) {
                                return $postfinally.returning;
                            } else {
                                $blk = $postfinally.gotoBlock;
                                $postfinally = undefined;
                                continue;
                            }
                        }
                        $blk = 17; /* allowing case fallthrough */
                    case 17:
                        /* --- withcarryon --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1520.$const1600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1601 = $ret;
                        if (this_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'this_path_id\' referenced before assignment');
                        }
                        if (if_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'if_path\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(if_path, $scope1520.$const1602, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1603 = $ret;
                        if (else_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'else_path\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(else_path, $scope1520.$const1602, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1604 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1601, [this_path_id, $lattr1603, $lattr1604]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1605 = $ret;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 19:
                        /* --- for cleanup --- */ $blk = 20; /* allowing case fallthrough */
                    case 20:
                        /* --- for end --- */ $exc.pop();
                        $blk = 16; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_If'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1520.$const1522 = new Sk.builtin.str('visit');
    $scope1520.$const1524 = new Sk.builtin.str('test');
    $scope1520.$const1528 = new Sk.builtin.str('orelse');
    $scope1520.$const1532 = new Sk.builtin.int_(1);
    $scope1520.$const1538 = new Sk.builtin.int_(0);
    $scope1520.$const1541 = new Sk.builtin.str('Pass');
    $scope1520.$const1546 = new Sk.builtin.str('report_issue');
    $scope1520.$const1548 = new Sk.builtin.str('Malformed Conditional');
    $scope1520.$const1551 = new Sk.builtin.str('body');
    $scope1520.$const1570 = new Sk.builtin.str('path_chain');
    $scope1520.$const1574 = new Sk.builtin.str('NewPath');
    $scope1520.$const1576 = new Sk.builtin.str('i');
    $scope1520.$const1589 = new Sk.builtin.str('e');
    $scope1520.$const1600 = new Sk.builtin.str('merge_paths');
    $scope1520.$const1602 = new Sk.builtin.str('id');
    var $scope1607 = (function $visit_IfExp1608$(self, node) {
        var body, orelse; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1607.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1607.$const1609, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1610 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1607.$const1611, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1612 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1610, [$lattr1612]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1613 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1607.$const1609, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1614 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1607.$const1615, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1616 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1614, [$lattr1616]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1617 = $ret;
                        body = $call1617;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1607.$const1609, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1618 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1607.$const1619, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1620 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1618, [$lattr1620]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1621 = $ret;
                        orelse = $call1621;
                        var $loadgbl1622 = Sk.misceval.loadname('are_types_equal', $gbl);
                        if (body === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'body\' referenced before assignment');
                        }
                        if (orelse === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'orelse\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1622, [body, orelse]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1623 = $ret;
                        var $jfalse1624 = ($call1623 === false || !Sk.misceval.isTrue($call1623));
                        if ($jfalse1624) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (body === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'body\' referenced before assignment');
                        }
                        return body;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ var $loadgbl1625 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1625);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1626 = $ret;
                        return $call1626;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_IfExp'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1607.$const1609 = new Sk.builtin.str('visit');
    $scope1607.$const1611 = new Sk.builtin.str('test');
    $scope1607.$const1615 = new Sk.builtin.str('body');
    $scope1607.$const1619 = new Sk.builtin.str('orelse');
    var $scope1628 = (function $visit_Import1629$(self, node) {
        var alias, asname, module_type; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1628.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1628.$const1630, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1631 = $ret;
                        var $iter1632 = Sk.abstr.iter($lattr1631);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1632, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1633 = $ret;
                        if ($next1633 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        alias = $next1633;
                        if (alias === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'alias\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(alias, $scope1628.$const1634, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1635 = $ret;
                        var $boolopsucc1636 = $lattr1635;
                        $boolopsucc1636 = $lattr1635;
                        var $jtrue1637 = ($lattr1635 === true || Sk.misceval.isTrue($lattr1635));
                        if ($jtrue1637) {
                            /*test passed */
                            $blk = 4;
                            continue;
                        }
                        if (alias === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'alias\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(alias, $scope1628.$const1638, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1639 = $ret;
                        $boolopsucc1636 = $lattr1639;
                        var $jtrue1640 = ($lattr1639 === true || Sk.misceval.isTrue($lattr1639));
                        if ($jtrue1640) {
                            /*test passed */
                            $blk = 4;
                            continue;
                        }
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of boolop --- */ asname = $boolopsucc1636;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1628.$const1641, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1642 = $ret;
                        if (alias === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'alias\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(alias, $scope1628.$const1638, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1643 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1642, [$lattr1643]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1644 = $ret;
                        module_type = $call1644;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1628.$const1645, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1646 = $ret;
                        if (asname === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'asname\' referenced before assignment');
                        }
                        if (module_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'module_type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1646, [asname, module_type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1647 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Import'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1628.$const1630 = new Sk.builtin.str('names');
    $scope1628.$const1634 = new Sk.builtin.str('asname');
    $scope1628.$const1638 = new Sk.builtin.str('name_$rn$');
    $scope1628.$const1641 = new Sk.builtin.str('load_module');
    $scope1628.$const1645 = new Sk.builtin.str('store_variable');
    var $scope1649 = (function $visit_ImportFrom1650$(self, node) {
        var alias, asname, module_name, module_type, name_type; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1649.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1649.$const1651, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1652 = $ret;
                        var $iter1653 = Sk.abstr.iter($lattr1652);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1653, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1654 = $ret;
                        if ($next1654 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        alias = $next1654;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1649.$const1655, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1656 = $ret;
                        var $compareres1657 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr1656, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1657 = $ret;
                        var $jfalse1658 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1658) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- done --- */ var $jfalse1659 = ($compareres1657 === false || !Sk.misceval.isTrue($compareres1657));
                        if ($jfalse1659) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        if (alias === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'alias\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(alias, $scope1649.$const1660, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1661 = $ret;
                        var $boolopsucc1662 = $lattr1661;
                        $boolopsucc1662 = $lattr1661;
                        var $jtrue1663 = ($lattr1661 === true || Sk.misceval.isTrue($lattr1661));
                        if ($jtrue1663) {
                            /*test passed */
                            $blk = 7;
                            continue;
                        }
                        if (alias === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'alias\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(alias, $scope1649.$const1664, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1665 = $ret;
                        $boolopsucc1662 = $lattr1665;
                        var $jtrue1666 = ($lattr1665 === true || Sk.misceval.isTrue($lattr1665));
                        if ($jtrue1666) {
                            /*test passed */
                            $blk = 7;
                            continue;
                        }
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of boolop --- */ asname = $boolopsucc1662;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1649.$const1667, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1668 = $ret;
                        if (alias === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'alias\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(alias, $scope1649.$const1664, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1669 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1668, [$lattr1669]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1670 = $ret;
                        module_type = $call1670;
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ if (module_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'module_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(module_type, $scope1649.$const1679, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1680 = $ret;
                        if (alias === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'alias\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(alias, $scope1649.$const1664, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1681 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1649.$const1682, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1683 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1683);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1684 = $ret;
                        $ret = Sk.misceval.applyOrSuspend($lattr1680, undefined, undefined, ['callee_position', $call1684], [$lattr1681, self]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1685 = $ret;
                        name_type = $call1685;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1649.$const1686, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1687 = $ret;
                        if (asname === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'asname\' referenced before assignment');
                        }
                        if (name_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1687, [asname, name_type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1688 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 5:
                        /* --- next branch of if --- */ if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1649.$const1655, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1671 = $ret;
                        module_name = $lattr1671;
                        if (alias === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'alias\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(alias, $scope1649.$const1660, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1672 = $ret;
                        var $boolopsucc1673 = $lattr1672;
                        $boolopsucc1673 = $lattr1672;
                        var $jtrue1674 = ($lattr1672 === true || Sk.misceval.isTrue($lattr1672));
                        if ($jtrue1674) {
                            /*test passed */
                            $blk = 8;
                            continue;
                        }
                        if (alias === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'alias\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(alias, $scope1649.$const1664, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1675 = $ret;
                        $boolopsucc1673 = $lattr1675;
                        var $jtrue1676 = ($lattr1675 === true || Sk.misceval.isTrue($lattr1675));
                        if ($jtrue1676) {
                            /*test passed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- end of boolop --- */ asname = $boolopsucc1673;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1649.$const1667, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1677 = $ret;
                        if (module_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'module_name\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1677, [module_name]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1678 = $ret;
                        module_type = $call1678;
                        $blk = 4; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_ImportFrom'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1649.$const1651 = new Sk.builtin.str('names');
    $scope1649.$const1655 = new Sk.builtin.str('module');
    $scope1649.$const1660 = new Sk.builtin.str('asname');
    $scope1649.$const1664 = new Sk.builtin.str('name_$rn$');
    $scope1649.$const1667 = new Sk.builtin.str('load_module');
    $scope1649.$const1679 = new Sk.builtin.str('load_attr');
    $scope1649.$const1682 = new Sk.builtin.str('locate');
    $scope1649.$const1686 = new Sk.builtin.str('store_variable');
    var $scope1690 = (function $visit_Lambda1691$(self, node) {
        // has cell
        var definition; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1690.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {
            $cell.self = self;
            $cell.node = node;
        }
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ $ret = Sk.abstr.gattr($cell.self, $scope1690.$const1692, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1693 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1693);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1694 = $ret;
                        $cell.position = $call1694;
                        $ret = Sk.abstr.gattr($cell.self, $scope1690.$const1695, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1696 = $ret;
                        var $slice1697 = new Sk.builtins['slice'](Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$);
                        $ret = Sk.abstr.objectGetItem($lattr1696, $slice1697, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr1698 = $ret;
                        $cell.definitions_scope = $lsubscr1698;
                        $scope1699.co_name = new Sk.builtins['str']('definition');
                        $scope1699.co_varnames = ['tifa', 'call_type', 'call_name', 'parameters', 'call_position'];
                        var $funcobj1763 = new Sk.builtins['function']($scope1699, $gbl, $cell);
                        definition = $funcobj1763;
                        var $loadgbl1764 = Sk.misceval.loadname('FunctionType', $gbl);
                        if (definition === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'definition\' referenced before assignment');
                        }
                        $ret = Sk.misceval.applyOrSuspend($loadgbl1764, undefined, undefined, ['definition', definition], []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1765 = $ret;
                        return $call1765;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Lambda'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1690.$const1692 = new Sk.builtin.str('locate');
    $scope1690.$const1695 = new Sk.builtin.str('scope_chain');
    var $scope1699 = (function $definition1700$(tifa, call_type, call_name, parameters, call_position, $free) {
        // has free
        var arg, args, function_scope, name_$rn$, parameter, return_value, undefined_parameter; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1699.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (tifa === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'tifa\' referenced before assignment');
                        }
                        if (call_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'call_type\' referenced before assignment');
                        }
                        if (call_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'call_name\' referenced before assignment');
                        }
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        if (call_position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'call_position\' referenced before assignment');
                        }
                        var $loadgbl1701 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1701, $scope1699.$const1702, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1703 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1703, [$free.self, $free.definitions_scope]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1704 = $ret;
                        function_scope = $call1704;
                        if (function_scope === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'function_scope\' referenced before assignment');
                        }
                        var $mgr1705 = function_scope;
                        $ret = Sk.abstr.gattr($mgr1705, Sk.builtin.str.$exit, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $exit1706 = $ret;
                        $ret = Sk.abstr.gattr($mgr1705, Sk.builtin.str.$enter, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($ret);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $value1707 = $ret;
                        $exc.push(1);
                        $ret = Sk.abstr.gattr($free.node, $scope1699.$const1708, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1709 = $ret;
                        $ret = Sk.abstr.gattr($lattr1709, $scope1699.$const1708, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1710 = $ret;
                        args = $lattr1710;
                        var $loadgbl1711 = Sk.misceval.loadname('len', $gbl);
                        if (args === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'args\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1711, [args]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1712 = $ret;
                        var $compareres1713 = null;
                        var $loadgbl1714 = Sk.misceval.loadname('len', $gbl);
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1714, [parameters]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1715 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call1712, $call1715, 'NotEq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1713 = $ret;
                        var $jfalse1716 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1716) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- done --- */ var $jfalse1717 = ($compareres1713 === false || !Sk.misceval.isTrue($compareres1713));
                        if ($jfalse1717) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        $ret = Sk.abstr.gattr($free.self, $scope1699.$const1718, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1719 = $ret;
                        var $loaddict1722 = new Sk.builtins['dict']([$scope1699.$const1721, $free.position]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1719, [$scope1699.$const1720, $loaddict1722]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1723 = $ret;
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ var $loadgbl1724 = Sk.misceval.loadname('zip', $gbl);
                        if (args === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'args\' referenced before assignment');
                        }
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1724, [args, parameters]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1725 = $ret;
                        var $iter1726 = Sk.abstr.iter($call1725);
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1726, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1727 = $ret;
                        if ($next1727 === undefined) {
                            $blk = 7;
                            continue;
                        }
                        var $items1728 = Sk.abstr.sequenceUnpack($next1727, 2);
                        arg = $items1728[0];
                        parameter = $items1728[1];
                        if (arg === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'arg\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(arg, $scope1699.$const1729, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1730 = $ret;
                        name_$rn$ = $lattr1730;
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        var $compareres1731 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(parameter, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1731 = $ret;
                        var $jfalse1732 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1732) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- done --- */ var $jfalse1733 = ($compareres1731 === false || !Sk.misceval.isTrue($compareres1731));
                        if ($jfalse1733) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(parameter, $scope1699.$const1734, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1735 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1735);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1736 = $ret;
                        parameter = $call1736;
                        $ret = Sk.abstr.gattr($free.self, $scope1699.$const1737, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1738 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (parameter === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameter\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1738, [name_$rn$, parameter, $free.position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1739 = $ret;
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- end of if --- */ $blk = 6; /* jump */
                        continue;
                    case 1:
                        /* --- withexh --- */ $ret = Sk.misceval.applyOrSuspend($exit1706, undefined, Sk.builtin.getExcInfo($err), undefined, []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $jtrue1762 = ($ret === true || Sk.misceval.isTrue($ret));
                        if ($jtrue1762) {
                            /*test passed */
                            $blk = 3;
                            continue;
                        }
                        throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- withtidyup --- */ $ret = Sk.misceval.callsimOrSuspendArray($exit1706, [Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if ($postfinally !== undefined) {
                            if ($postfinally.returning) {
                                return $postfinally.returning;
                            } else {
                                $blk = $postfinally.gotoBlock;
                                $postfinally = undefined;
                                continue;
                            }
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- withcarryon --- */ if (return_value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'return_value\' referenced before assignment');
                        }
                        return return_value;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 7:
                        /* --- for cleanup --- */ $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- for end --- */ var $loadgbl1740 = Sk.misceval.loadname('len', $gbl);
                        if (args === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'args\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1740, [args]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1741 = $ret;
                        var $compareres1742 = null;
                        var $loadgbl1743 = Sk.misceval.loadname('len', $gbl);
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1743, [parameters]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1744 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call1741, $call1744, 'Lt', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1742 = $ret;
                        var $jfalse1745 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1745) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- done --- */ var $jfalse1746 = ($compareres1742 === false || !Sk.misceval.isTrue($compareres1742));
                        if ($jfalse1746) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        if (parameters === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parameters\' referenced before assignment');
                        }
                        var $loadgbl1747 = Sk.misceval.loadname('len', $gbl);
                        if (args === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'args\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1747, [args]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1748 = $ret;
                        var $slice1749 = new Sk.builtins['slice']($call1748, Sk.builtin.none.none$, Sk.builtin.none.none$);
                        $ret = Sk.abstr.objectGetItem(parameters, $slice1749, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr1750 = $ret;
                        var $iter1751 = Sk.abstr.iter($lsubscr1750);
                        $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1751, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1752 = $ret;
                        if ($next1752 === undefined) {
                            $blk = 14;
                            continue;
                        }
                        undefined_parameter = $next1752;
                        $ret = Sk.abstr.gattr($free.self, $scope1699.$const1737, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1753 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loadgbl1754 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1754);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1755 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1753, [name_$rn$, $call1755, $free.position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1756 = $ret;
                        $blk = 13; /* jump */
                        continue;
                    case 11:
                        /* --- end of if --- */ $ret = Sk.abstr.gattr($free.self, $scope1699.$const1757, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1758 = $ret;
                        $ret = Sk.abstr.gattr($free.node, $scope1699.$const1759, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1760 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1758, [$lattr1760]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1761 = $ret;
                        return_value = $call1761;
                        $exc.pop();
                        $blk = 2; /* jump */
                        continue;
                    case 14:
                        /* --- for cleanup --- */ $blk = 15; /* allowing case fallthrough */
                    case 15:
                        /* --- for end --- */ $blk = 11; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'definition'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1699.$const1702 = new Sk.builtin.str('NewScope');
    $scope1699.$const1708 = new Sk.builtin.str('args');
    $scope1699.$const1718 = new Sk.builtin.str('report_issue');
    $scope1699.$const1720 = new Sk.builtin.str('Incorrect Arity');
    $scope1699.$const1721 = new Sk.builtin.str('position');
    $scope1699.$const1729 = new Sk.builtin.str('arg');
    $scope1699.$const1734 = new Sk.builtin.str('clone_mutably');
    $scope1699.$const1737 = new Sk.builtin.str('store_variable');
    $scope1699.$const1757 = new Sk.builtin.str('visit');
    $scope1699.$const1759 = new Sk.builtin.str('body');
    var $scope1767 = (function $visit_List1768$(self, node) {
        var elt, type; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1767.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl1769 = Sk.misceval.loadname('ListType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1769);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1770 = $ret;
                        type = $call1770;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1767.$const1771, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1772 = $ret;
                        var $jfalse1773 = ($lattr1772 === false || !Sk.misceval.isTrue($lattr1772));
                        if ($jfalse1773) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope1767.$const1774, Sk.builtin.bool.false$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1767.$const1771, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1775 = $ret;
                        var $iter1776 = Sk.abstr.iter($lattr1775);
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1776, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1777 = $ret;
                        if ($next1777 === undefined) {
                            $blk = 4;
                            continue;
                        }
                        elt = $next1777;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1767.$const1778, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1779 = $ret;
                        if (elt === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'elt\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1779, [elt]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1780 = $ret;
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope1767.$const1781, $call1780, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 3; /* jump */
                        continue;
                    case 1:
                        /* --- end of if --- */ if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        return type;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope1767.$const1774, Sk.builtin.bool.true$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 1; /* jump */
                        continue;
                    case 4:
                        /* --- for cleanup --- */ $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- for end --- */ $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_List'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1767.$const1771 = new Sk.builtin.str('elts');
    $scope1767.$const1774 = new Sk.builtin.str('empty');
    $scope1767.$const1778 = new Sk.builtin.str('visit');
    $scope1767.$const1781 = new Sk.builtin.str('subtype');
    var $scope1783 = (function $visit_ListComp1784$(self, node) {
        var generator; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1783.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1783.$const1785, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1786 = $ret;
                        var $iter1787 = Sk.abstr.iter($lattr1786);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1787, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1788 = $ret;
                        if ($next1788 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        generator = $next1788;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1783.$const1789, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1790 = $ret;
                        if (generator === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'generator\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1790, [generator]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1791 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ var $loadgbl1792 = Sk.misceval.loadname('ListType', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1783.$const1789, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1793 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1783.$const1794, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1795 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1793, [$lattr1795]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1796 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1792, [$call1796]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1797 = $ret;
                        return $call1797;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_ListComp'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1783.$const1785 = new Sk.builtin.str('generators');
    $scope1783.$const1789 = new Sk.builtin.str('visit');
    $scope1783.$const1794 = new Sk.builtin.str('elt');
    var $scope1799 = (function $visit_NameConstant1800$(self, node) {
        var value; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1799.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1799.$const1801, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1802 = $ret;
                        value = $lattr1802;
                        var $loadgbl1803 = Sk.misceval.loadname('isinstance', $gbl);
                        if (value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value\' referenced before assignment');
                        }
                        var $loadgbl1804 = Sk.misceval.loadname('bool', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1803, [value, $loadgbl1804]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1805 = $ret;
                        var $jfalse1806 = ($call1805 === false || !Sk.misceval.isTrue($call1805));
                        if ($jfalse1806) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        var $loadgbl1807 = Sk.misceval.loadname('BoolType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1807);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1808 = $ret;
                        return $call1808;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl1809 = Sk.misceval.loadname('NoneType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1809);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1810 = $ret;
                        return $call1810;
                        $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_NameConstant'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1799.$const1801 = new Sk.builtin.str('value');
    var $scope1812 = (function $visit_Name1813$(self, node) {
        var builtin, name_$rn$, state, variable; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1812.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1812.$const1814, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1815 = $ret;
                        name_$rn$ = $lattr1815;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $compareres1816 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(name_$rn$, $scope1812.$const1817, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1816 = $ret;
                        var $jfalse1818 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1818) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- done --- */ var $jfalse1819 = ($compareres1816 === false || !Sk.misceval.isTrue($compareres1816));
                        if ($jfalse1819) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1812.$const1820, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1821 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1821, [$scope1812.$const1822]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1823 = $ret;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ var $loadgbl1824 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1812.$const1825, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1826 = $ret;
                        var $loadgbl1827 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1827, $scope1812.$const1828, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1829 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1824, [$lattr1826, $lattr1829]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1830 = $ret;
                        var $jfalse1831 = ($call1830 === false || !Sk.misceval.isTrue($call1830));
                        if ($jfalse1831) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $compareres1832 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(name_$rn$, $scope1812.$const1833, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1832 = $ret;
                        var $jfalse1834 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1834) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- done --- */ var $boolopsucc1835 = $compareres1832;
                        $boolopsucc1835 = $compareres1832;
                        var $jtrue1836 = ($compareres1832 === true || Sk.misceval.isTrue($compareres1832));
                        if ($jtrue1836) {
                            /*test passed */
                            $blk = 7;
                            continue;
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $compareres1837 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(name_$rn$, $scope1812.$const1838, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1837 = $ret;
                        var $jfalse1839 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1839) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- done --- */ $boolopsucc1835 = $compareres1837;
                        var $jtrue1840 = ($compareres1837 === true || Sk.misceval.isTrue($compareres1837));
                        if ($jtrue1840) {
                            /*test passed */
                            $blk = 7;
                            continue;
                        }
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of boolop --- */ var $jfalse1841 = ($boolopsucc1835 === false || !Sk.misceval.isTrue($boolopsucc1835));
                        if ($jfalse1841) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        var $loadgbl1842 = Sk.misceval.loadname('BoolType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1842);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1843 = $ret;
                        return $call1843;
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 4:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1812.$const1850, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1867 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1867, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1868 = $ret;
                        variable = $call1868;
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope1812.$const1855, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1869 = $ret;
                        var $jfalse1870 = ($lattr1869 === false || !Sk.misceval.isTrue($lattr1869));
                        if ($jfalse1870) {
                            /*test failed */
                            $blk = 17;
                            continue;
                        }
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope1812.$const1871, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1872 = $ret;
                        $ret = Sk.abstr.gattr($lattr1872, $scope1812.$const1865, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1873 = $ret;
                        return $lattr1873;
                        $blk = 16; /* allowing case fallthrough */
                    case 16:
                        /* --- end of if --- */ $blk = 3; /* jump */
                        continue;
                    case 6:
                        /* --- next branch of if --- */ if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $compareres1844 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(name_$rn$, $scope1812.$const1845, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1844 = $ret;
                        var $jfalse1846 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1846) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- done --- */ var $jfalse1847 = ($compareres1844 === false || !Sk.misceval.isTrue($compareres1844));
                        if ($jfalse1847) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        var $loadgbl1848 = Sk.misceval.loadname('NoneType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1848);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1849 = $ret;
                        return $call1849;
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- end of if --- */ $blk = 5; /* jump */
                        continue;
                    case 11:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1812.$const1850, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1851 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1851, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1852 = $ret;
                        variable = $call1852;
                        var $loadgbl1853 = Sk.misceval.loadname('get_builtin_function', $gbl);
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1853, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1854 = $ret;
                        builtin = $call1854;
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope1812.$const1855, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1856 = $ret;
                        var $unaryop1857 = Sk.abstr.numberUnaryOp($lattr1856, 'Not');
                        var $boolopsucc1858 = $unaryop1857;
                        $boolopsucc1858 = $unaryop1857;
                        var $jfalse1859 = ($unaryop1857 === false || !Sk.misceval.isTrue($unaryop1857));
                        if ($jfalse1859) {
                            /*test failed */
                            $blk = 15;
                            continue;
                        }
                        if (builtin === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'builtin\' referenced before assignment');
                        }
                        $boolopsucc1858 = builtin;
                        var $jfalse1860 = (builtin === false || !Sk.misceval.isTrue(builtin));
                        if ($jfalse1860) {
                            /*test failed */
                            $blk = 15;
                            continue;
                        }
                        $blk = 15; /* allowing case fallthrough */
                    case 15:
                        /* --- end of boolop --- */ var $jfalse1861 = ($boolopsucc1858 === false || !Sk.misceval.isTrue($boolopsucc1858));
                        if ($jfalse1861) {
                            /*test failed */
                            $blk = 14;
                            continue;
                        }
                        if (builtin === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'builtin\' referenced before assignment');
                        }
                        return builtin;
                        $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- end of if --- */ $blk = 10; /* jump */
                        continue;
                    case 14:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1812.$const1862, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1863 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1863, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1864 = $ret;
                        state = $call1864;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope1812.$const1865, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1866 = $ret;
                        return $lattr1866;
                        $blk = 13; /* jump */
                        continue;
                    case 17:
                        /* --- next branch of if --- */ var $loadgbl1874 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1874);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1875 = $ret;
                        return $call1875;
                        $blk = 16; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Name'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1812.$const1814 = new Sk.builtin.str('id');
    $scope1812.$const1817 = new Sk.builtin.str('___');
    $scope1812.$const1820 = new Sk.builtin.str('report_issue');
    $scope1812.$const1822 = new Sk.builtin.str('Unconnected blocks');
    $scope1812.$const1825 = new Sk.builtin.str('ctx');
    $scope1812.$const1828 = new Sk.builtin.str('Load');
    $scope1812.$const1833 = new Sk.builtin.str('True');
    $scope1812.$const1838 = new Sk.builtin.str('False');
    $scope1812.$const1845 = new Sk.builtin.str('None');
    $scope1812.$const1850 = new Sk.builtin.str('find_variable_scope');
    $scope1812.$const1855 = new Sk.builtin.str('exists');
    $scope1812.$const1862 = new Sk.builtin.str('load_variable');
    $scope1812.$const1865 = new Sk.builtin.str('type');
    $scope1812.$const1871 = new Sk.builtin.str('state');
    var $scope1877 = (function $visit_Num1878$(self, node) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1877.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl1879 = Sk.misceval.loadname('NumType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1879);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1880 = $ret;
                        return $call1880;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Num'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    var $scope1882 = (function $visit_Return1883$(self, node) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1882.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl1884 = Sk.misceval.loadname('len', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1882.$const1885, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1886 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1884, [$lattr1886]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1887 = $ret;
                        var $compareres1888 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call1887, $scope1882.$const1889, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1888 = $ret;
                        var $jfalse1890 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1890) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- done --- */ var $jfalse1891 = ($compareres1888 === false || !Sk.misceval.isTrue($compareres1888));
                        if ($jfalse1891) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1882.$const1892, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1893 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1893, [$scope1882.$const1894]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1895 = $ret;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1882.$const1896, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1897 = $ret;
                        var $compareres1898 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr1897, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1898 = $ret;
                        var $jfalse1899 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1899) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- done --- */ var $jfalse1900 = ($compareres1898 === false || !Sk.misceval.isTrue($compareres1898));
                        if ($jfalse1900) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1882.$const1901, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1902 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1882.$const1903, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1904 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1882.$const1896, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1905 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1904, [$lattr1905]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1906 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1902, [$call1906]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1907 = $ret;
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 4:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1882.$const1901, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1908 = $ret;
                        var $loadgbl1909 = Sk.misceval.loadname('NoneType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1909);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1910 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1908, [$call1910]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1911 = $ret;
                        $blk = 3; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Return'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1882.$const1885 = new Sk.builtin.str('scope_chain');
    $scope1882.$const1889 = new Sk.builtin.int_(1);
    $scope1882.$const1892 = new Sk.builtin.str('report_issue');
    $scope1882.$const1894 = new Sk.builtin.str('Return outside function');
    $scope1882.$const1896 = new Sk.builtin.str('value');
    $scope1882.$const1901 = new Sk.builtin.str('return_variable');
    $scope1882.$const1903 = new Sk.builtin.str('visit');
    var $scope1913 = (function $visit_SetComp1914$(self, node) {
        var generator; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1913.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1913.$const1915, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1916 = $ret;
                        var $iter1917 = Sk.abstr.iter($lattr1916);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter1917, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1918 = $ret;
                        if ($next1918 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        generator = $next1918;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1913.$const1919, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1920 = $ret;
                        if (generator === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'generator\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1920, [generator]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1921 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ var $loadgbl1922 = Sk.misceval.loadname('SetType', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1913.$const1919, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1923 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1913.$const1924, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1925 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1923, [$lattr1925]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1926 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1922, [$call1926]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1927 = $ret;
                        return $call1927;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_SetComp'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1913.$const1915 = new Sk.builtin.str('generators');
    $scope1913.$const1919 = new Sk.builtin.str('visit');
    $scope1913.$const1924 = new Sk.builtin.str('elt');
    var $scope1929 = (function $visit_statements1930$(self, nodes) {
        // has cell
        var statement; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1929.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (nodes === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'nodes\' referenced before assignment');
                        }
                        var $loadgbl1931 = Sk.misceval.loadname('any', $gbl);
                        $scope1932.co_name = new Sk.builtins['str']('<genexpr>');
                        $scope1932.co_varnames = [];
                        var $gener1941 = new Sk.builtins['function']((function() {
                            Sk.builtin.pyCheckArgsLen("<genexpr>", arguments.length, 0, 0);
                            return new Sk.builtins['generator']($scope1932, $gbl, [], $cell);
                        }));
                        var $gener1942 = Sk.misceval.callsimArray($gener1941);;
                        if (nodes === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'nodes\' referenced before assignment');
                        }
                        $gener1942.gi$locals.$iter0 = Sk.abstr.iter(nodes);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1931, [$gener1942]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1943 = $ret;
                        var $jfalse1944 = ($call1943 === false || !Sk.misceval.isTrue($call1943));
                        if ($jfalse1944) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ var $_compr1945 = new Sk.builtins['list']([]);
                        if (nodes === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'nodes\' referenced before assignment');
                        }
                        var $iter1946 = Sk.abstr.iter(nodes);
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- list comp start --- */ $ret = Sk.abstr.iternext($iter1946, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1947 = $ret;
                        if ($next1947 === undefined) {
                            $blk = 4;
                            continue;
                        }
                        statement = $next1947;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1929.$const1948, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1949 = $ret;
                        if (statement === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'statement\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1949, [statement]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1950 = $ret;
                        $_compr1945.v.push($call1950);
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- list comp skip --- */ $blk = 2; /* jump */
                        continue;
                    case 4:
                        /* --- list comp anchor --- */ return $_compr1945;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_statements'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1929.$const1948 = new Sk.builtin.str('visit');
    var $scope1932 = (function $genexpr1933$($gen, $free) {
        // generator

        // has free
        var $blk = $gen.gi$resumeat,
            $exc = [],
            $loc = $gen.gi$locals,
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1932.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- start for 0 --- */ $ret = Sk.abstr.iternext($loc.$iter0, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next1934 = $ret;
                        if ($next1934 === undefined) {
                            $blk = 4;
                            continue;
                        }
                        $loc.node = $next1934;
                        var $loadgbl1935 = Sk.misceval.loadname('isinstance', $gbl);
                        var $loadname1936 = $loc.node !== undefined ? $loc.node : Sk.misceval.loadname('node', $gbl);;
                        var $loadgbl1937 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1937, $scope1932.$const1938, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1939 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1935, [$loadname1936, $lattr1939]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1940 = $ret;
                        return [2 /*resume*/ , $call1940 /*ret*/ ];
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- skip for 0 --- */ $blk = 1; /* jump */
                        continue;
                    case 3:
                        /* --- if cleanup for 0 --- */ throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 4:
                        /* --- end for 0 --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '<genexpr>'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1932.$const1938 = new Sk.builtin.str('Pass');
    var $scope1952 = (function $visit_Str1953$(self, node) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1952.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1952.$const1954, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1955 = $ret;
                        var $compareres1956 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr1955, $scope1952.$const1957, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1956 = $ret;
                        var $jfalse1958 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1958) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- done --- */ var $jfalse1959 = ($compareres1956 === false || !Sk.misceval.isTrue($compareres1956));
                        if ($jfalse1959) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        var $loadgbl1960 = Sk.misceval.loadname('StrType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1960, [Sk.builtin.bool.true$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1961 = $ret;
                        return $call1961;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl1962 = Sk.misceval.loadname('StrType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1962, [Sk.builtin.bool.false$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1963 = $ret;
                        return $call1963;
                        $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Str'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1952.$const1954 = new Sk.builtin.str('s');
    $scope1952.$const1957 = new Sk.builtin.str('');
    var $scope1965 = (function $visit_Subscript1966$(self, node) {
        var dynamic_literal, literal, value_type; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope1965.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1965.$const1967, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1968 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1969, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1970 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1968, [$lattr1970]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1971 = $ret;
                        value_type = $call1971;
                        var $loadgbl1972 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1974 = $ret;
                        var $loadgbl1975 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl1975, $scope1965.$const1976, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1977 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1972, [$lattr1974, $lattr1977]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1978 = $ret;
                        var $jfalse1979 = ($call1978 === false || !Sk.misceval.isTrue($call1978));
                        if ($jfalse1979) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1965.$const1980, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1981 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1982 = $ret;
                        $ret = Sk.abstr.gattr($lattr1982, $scope1965.$const1969, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1983 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1981, [$lattr1983]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1984 = $ret;
                        literal = $call1984;
                        if (literal === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'literal\' referenced before assignment');
                        }
                        var $compareres1985 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(literal, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres1985 = $ret;
                        var $jfalse1986 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse1986) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- done --- */ var $jfalse1987 = ($compareres1985 === false || !Sk.misceval.isTrue($compareres1985));
                        if ($jfalse1987) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        var $loadgbl1988 = Sk.misceval.loadname('type_to_literal', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1965.$const1967, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1989 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1990 = $ret;
                        $ret = Sk.abstr.gattr($lattr1990, $scope1965.$const1969, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1991 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1989, [$lattr1991]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1992 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1988, [$call1992]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1993 = $ret;
                        dynamic_literal = $call1993;
                        if (value_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(value_type, $scope1965.$const1994, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1995 = $ret;
                        if (dynamic_literal === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'dynamic_literal\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1995, [dynamic_literal]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1996 = $ret;
                        return $call1996;
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl1999 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2000 = $ret;
                        var $loadgbl2001 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2001, $scope1965.$const2002, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2003 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl1999, [$lattr2000, $lattr2003]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2004 = $ret;
                        var $jfalse2005 = ($call2004 === false || !Sk.misceval.isTrue($call2004));
                        if ($jfalse2005) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2006 = $ret;
                        $ret = Sk.abstr.gattr($lattr2006, $scope1965.$const2007, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2008 = $ret;
                        var $compareres2009 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2008, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2009 = $ret;
                        var $jfalse2010 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2010) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- done --- */ var $jfalse2011 = ($compareres2009 === false || !Sk.misceval.isTrue($compareres2009));
                        if ($jfalse2011) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1965.$const1967, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2012 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2013 = $ret;
                        $ret = Sk.abstr.gattr($lattr2013, $scope1965.$const2007, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2014 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2012, [$lattr2014]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2015 = $ret;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2016 = $ret;
                        $ret = Sk.abstr.gattr($lattr2016, $scope1965.$const2017, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2018 = $ret;
                        var $compareres2019 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2018, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2019 = $ret;
                        var $jfalse2020 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2020) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- done --- */ var $jfalse2021 = ($compareres2019 === false || !Sk.misceval.isTrue($compareres2019));
                        if ($jfalse2021) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1965.$const1967, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2022 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2023 = $ret;
                        $ret = Sk.abstr.gattr($lattr2023, $scope1965.$const2017, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2024 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2022, [$lattr2024]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2025 = $ret;
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- end of if --- */ if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2026 = $ret;
                        $ret = Sk.abstr.gattr($lattr2026, $scope1965.$const2027, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2028 = $ret;
                        var $compareres2029 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2028, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2029 = $ret;
                        var $jfalse2030 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2030) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- done --- */ var $jfalse2031 = ($compareres2029 === false || !Sk.misceval.isTrue($compareres2029));
                        if ($jfalse2031) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope1965.$const1967, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2032 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope1965.$const1973, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2033 = $ret;
                        $ret = Sk.abstr.gattr($lattr2033, $scope1965.$const2027, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2034 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2032, [$lattr2034]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2035 = $ret;
                        $blk = 11; /* allowing case fallthrough */
                    case 11:
                        /* --- end of if --- */ if (value_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value_type\' referenced before assignment');
                        }
                        return value_type;
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 4:
                        /* --- next branch of if --- */ if (value_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value_type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(value_type, $scope1965.$const1994, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr1997 = $ret;
                        if (literal === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'literal\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr1997, [literal]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call1998 = $ret;
                        return $call1998;
                        $blk = 3; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Subscript'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope1965.$const1967 = new Sk.builtin.str('visit');
    $scope1965.$const1969 = new Sk.builtin.str('value');
    $scope1965.$const1973 = new Sk.builtin.str('slice');
    $scope1965.$const1976 = new Sk.builtin.str('Index');
    $scope1965.$const1980 = new Sk.builtin.str('get_literal');
    $scope1965.$const1994 = new Sk.builtin.str('index');
    $scope1965.$const2002 = new Sk.builtin.str('Slice');
    $scope1965.$const2007 = new Sk.builtin.str('lower');
    $scope1965.$const2017 = new Sk.builtin.str('upper');
    $scope1965.$const2027 = new Sk.builtin.str('step');
    var $scope2037 = (function $visit_Tuple2038$(self, node) {
        var elt, type; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2037.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2039 = Sk.misceval.loadname('TupleType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2039);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2040 = $ret;
                        type = $call2040;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2037.$const2041, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2042 = $ret;
                        var $unaryop2043 = Sk.abstr.numberUnaryOp($lattr2042, 'Not');
                        var $jfalse2044 = ($unaryop2043 === false || !Sk.misceval.isTrue($unaryop2043));
                        if ($jfalse2044) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope2037.$const2045, Sk.builtin.bool.true$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loadlist2046 = new Sk.builtins['list']([]);
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope2037.$const2047, $loadlist2046, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        return type;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope2037.$const2045, Sk.builtin.bool.false$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $_compr2048 = new Sk.builtins['list']([]);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2037.$const2041, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2049 = $ret;
                        var $iter2050 = Sk.abstr.iter($lattr2049);
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- list comp start --- */ $ret = Sk.abstr.iternext($iter2050, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next2051 = $ret;
                        if ($next2051 === undefined) {
                            $blk = 5;
                            continue;
                        }
                        elt = $next2051;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2037.$const2052, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2053 = $ret;
                        if (elt === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'elt\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2053, [elt]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2054 = $ret;
                        $_compr2048.v.push($call2054);
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- list comp skip --- */ $blk = 3; /* jump */
                        continue;
                    case 5:
                        /* --- list comp anchor --- */ if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(type, $scope2037.$const2047, $_compr2048, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_Tuple'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2037.$const2041 = new Sk.builtin.str('elts');
    $scope2037.$const2045 = new Sk.builtin.str('empty');
    $scope2037.$const2047 = new Sk.builtin.str('subtypes');
    $scope2037.$const2052 = new Sk.builtin.str('visit');
    var $scope2056 = (function $visit_UnaryOp2057$(self, node) {
        var op_lookup, operand; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2056.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2056.$const2058, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2059 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2056.$const2060, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2061 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2059, [$lattr2061]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2062 = $ret;
                        operand = $call2062;
                        var $loadgbl2063 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2056.$const2064, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2065 = $ret;
                        var $loadgbl2066 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2066, $scope2056.$const2067, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2068 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2063, [$lattr2065, $lattr2068]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2069 = $ret;
                        var $jfalse2070 = ($call2069 === false || !Sk.misceval.isTrue($call2069));
                        if ($jfalse2070) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        var $loadgbl2071 = Sk.misceval.loadname('BoolType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2071);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2072 = $ret;
                        return $call2072;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ var $loadgbl2100 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2100);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2101 = $ret;
                        return $call2101;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl2073 = Sk.misceval.loadname('isinstance', $gbl);
                        if (operand === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'operand\' referenced before assignment');
                        }
                        var $loadgbl2074 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2073, [operand, $loadgbl2074]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2075 = $ret;
                        var $jfalse2076 = ($call2075 === false || !Sk.misceval.isTrue($call2075));
                        if ($jfalse2076) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        var $loadgbl2077 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2077);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2078 = $ret;
                        return $call2078;
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 4:
                        /* --- next branch of if --- */ var $loadgbl2079 = Sk.misceval.loadname('type', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2056.$const2064, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2080 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2079, [$lattr2080]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2081 = $ret;
                        var $compareres2082 = null;
                        var $loadgbl2083 = Sk.misceval.loadname('VALID_UNARYOP_TYPES', $gbl);
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call2081, $loadgbl2083, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2082 = $ret;
                        var $jfalse2084 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2084) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- done --- */ var $jfalse2085 = ($compareres2082 === false || !Sk.misceval.isTrue($compareres2082));
                        if ($jfalse2085) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        var $loadgbl2086 = Sk.misceval.loadname('VALID_UNARYOP_TYPES', $gbl);
                        var $loadgbl2087 = Sk.misceval.loadname('type', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2056.$const2064, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2088 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2087, [$lattr2088]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2089 = $ret;
                        $ret = Sk.abstr.objectGetItem($loadgbl2086, $call2089, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2090 = $ret;
                        op_lookup = $lsubscr2090;
                        var $loadgbl2091 = Sk.misceval.loadname('type', $gbl);
                        if (operand === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'operand\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2091, [operand]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2092 = $ret;
                        var $compareres2093 = null;
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($call2092, op_lookup, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2093 = $ret;
                        var $jfalse2094 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2094) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- done --- */ var $jfalse2095 = ($compareres2093 === false || !Sk.misceval.isTrue($compareres2093));
                        if ($jfalse2095) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        if (op_lookup === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'op_lookup\' referenced before assignment');
                        }
                        var $loadgbl2096 = Sk.misceval.loadname('type', $gbl);
                        if (operand === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'operand\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2096, [operand]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2097 = $ret;
                        $ret = Sk.abstr.objectGetItem(op_lookup, $call2097, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2098 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lsubscr2098);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2099 = $ret;
                        return $call2099;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ $blk = 3; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_UnaryOp'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2056.$const2058 = new Sk.builtin.str('visit');
    $scope2056.$const2060 = new Sk.builtin.str('operand');
    $scope2056.$const2064 = new Sk.builtin.str('op');
    $scope2056.$const2067 = new Sk.builtin.str('Not');
    var $scope2103 = (function $visit_While2104$(self, node) {
        var body_path, empty_path, statement, this_path_id; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2103.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2103.$const2105, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2106 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2103.$const2107, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2108 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2106, [$lattr2108]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2109 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2103.$const2110, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2111 = $ret;
                        this_path_id = $lattr2111;
                        var $loadgbl2112 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2112, $scope2103.$const2113, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2114 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (this_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'this_path_id\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2114, [self, this_path_id, $scope2103.$const2115]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2116 = $ret;
                        empty_path = $call2116;
                        if (empty_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'empty_path\' referenced before assignment');
                        }
                        var $mgr2117 = empty_path;
                        $ret = Sk.abstr.gattr($mgr2117, Sk.builtin.str.$exit, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $exit2118 = $ret;
                        $ret = Sk.abstr.gattr($mgr2117, Sk.builtin.str.$enter, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($ret);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $value2119 = $ret;
                        $exc.push(1);
                        $exc.pop();
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- withtidyup --- */ $ret = Sk.misceval.callsimOrSuspendArray($exit2118, [Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if ($postfinally !== undefined) {
                            if ($postfinally.returning) {
                                return $postfinally.returning;
                            } else {
                                $blk = $postfinally.gotoBlock;
                                $postfinally = undefined;
                                continue;
                            }
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- withcarryon --- */ var $loadgbl2121 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2121, $scope2103.$const2113, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2122 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (this_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'this_path_id\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2122, [self, this_path_id, $scope2103.$const2123]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2124 = $ret;
                        body_path = $call2124;
                        if (body_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'body_path\' referenced before assignment');
                        }
                        var $mgr2125 = body_path;
                        $ret = Sk.abstr.gattr($mgr2125, Sk.builtin.str.$exit, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $exit2126 = $ret;
                        $ret = Sk.abstr.gattr($mgr2125, Sk.builtin.str.$enter, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($ret);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $value2127 = $ret;
                        $exc.push(4);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2103.$const2128, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2129 = $ret;
                        var $iter2130 = Sk.abstr.iter($lattr2129);
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter2130, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next2131 = $ret;
                        if ($next2131 === undefined) {
                            $blk = 8;
                            continue;
                        }
                        statement = $next2131;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2103.$const2105, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2132 = $ret;
                        if (statement === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'statement\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2132, [statement]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2133 = $ret;
                        $blk = 7; /* jump */
                        continue;
                    case 1:
                        /* --- withexh --- */ $ret = Sk.misceval.applyOrSuspend($exit2118, undefined, Sk.builtin.getExcInfo($err), undefined, []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $jtrue2120 = ($ret === true || Sk.misceval.isTrue($ret));
                        if ($jtrue2120) {
                            /*test passed */
                            $blk = 3;
                            continue;
                        }
                        throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 4:
                        /* --- withexh --- */ $ret = Sk.misceval.applyOrSuspend($exit2126, undefined, Sk.builtin.getExcInfo($err), undefined, []);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $jtrue2137 = ($ret === true || Sk.misceval.isTrue($ret));
                        if ($jtrue2137) {
                            /*test passed */
                            $blk = 6;
                            continue;
                        }
                        throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 5:
                        /* --- withtidyup --- */ $ret = Sk.misceval.callsimOrSuspendArray($exit2126, [Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if ($postfinally !== undefined) {
                            if ($postfinally.returning) {
                                return $postfinally.returning;
                            } else {
                                $blk = $postfinally.gotoBlock;
                                $postfinally = undefined;
                                continue;
                            }
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- withcarryon --- */ if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2103.$const2138, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2139 = $ret;
                        var $jfalse2140 = ($lattr2139 === false || !Sk.misceval.isTrue($lattr2139));
                        if ($jfalse2140) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2103.$const2141, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2142 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2142, [$scope2103.$const2143]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2144 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2103.$const2138, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2145 = $ret;
                        var $iter2146 = Sk.abstr.iter($lattr2145);
                        $blk = 11; /* allowing case fallthrough */
                    case 11:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter2146, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next2147 = $ret;
                        if ($next2147 === undefined) {
                            $blk = 12;
                            continue;
                        }
                        statement = $next2147;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2103.$const2105, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2148 = $ret;
                        if (statement === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'statement\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2148, [statement]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2149 = $ret;
                        $blk = 11; /* jump */
                        continue;
                    case 8:
                        /* --- for cleanup --- */ $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- for end --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2103.$const2105, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2134 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2103.$const2107, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2135 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2134, [$lattr2135]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2136 = $ret;
                        $exc.pop();
                        $blk = 5; /* jump */
                        continue;
                    case 10:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2103.$const2150, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2151 = $ret;
                        if (this_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'this_path_id\' referenced before assignment');
                        }
                        if (body_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'body_path\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(body_path, $scope2103.$const2152, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2153 = $ret;
                        if (empty_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'empty_path\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(empty_path, $scope2103.$const2152, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2154 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2151, [this_path_id, $lattr2153, $lattr2154]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2155 = $ret;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 12:
                        /* --- for cleanup --- */ $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- for end --- */ $blk = 10; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_While'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2103.$const2105 = new Sk.builtin.str('visit');
    $scope2103.$const2107 = new Sk.builtin.str('test');
    $scope2103.$const2110 = new Sk.builtin.str('path_id');
    $scope2103.$const2113 = new Sk.builtin.str('NewPath');
    $scope2103.$const2115 = new Sk.builtin.str('e');
    $scope2103.$const2123 = new Sk.builtin.str('w');
    $scope2103.$const2128 = new Sk.builtin.str('body');
    $scope2103.$const2138 = new Sk.builtin.str('orelse');
    $scope2103.$const2141 = new Sk.builtin.str('report_issue');
    $scope2103.$const2143 = new Sk.builtin.str('Else on loop body');
    $scope2103.$const2150 = new Sk.builtin.str('merge_paths');
    $scope2103.$const2152 = new Sk.builtin.str('id');
    var $scope2157 = (function $visit_With2158$(self, node) {
        var item, type_value; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2157.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2157.$const2159, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2160 = $ret;
                        var $iter2161 = Sk.abstr.iter($lattr2160);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter2161, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next2162 = $ret;
                        if ($next2162 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        item = $next2162;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2157.$const2163, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2164 = $ret;
                        if (item === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'item\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(item, $scope2157.$const2165, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2166 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2164, [$lattr2166]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2167 = $ret;
                        type_value = $call2167;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2157.$const2163, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2168 = $ret;
                        if (item === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'item\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(item, $scope2157.$const2169, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2170 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2168, [$lattr2170]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2171 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2157.$const2172, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2173 = $ret;
                        if (item === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'item\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(item, $scope2157.$const2169, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2174 = $ret;
                        if (type_value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type_value\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2173, [$lattr2174, type_value]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2175 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2157.$const2176, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2177 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2157.$const2178, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2179 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2177, [$lattr2179]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2180 = $ret;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'visit_With'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2157.$const2159 = new Sk.builtin.str('items');
    $scope2157.$const2163 = new Sk.builtin.str('visit');
    $scope2157.$const2165 = new Sk.builtin.str('context_expr');
    $scope2157.$const2169 = new Sk.builtin.str('optional_vars');
    $scope2157.$const2172 = new Sk.builtin.str('_walk_target');
    $scope2157.$const2176 = new Sk.builtin.str('visit_statements');
    $scope2157.$const2178 = new Sk.builtin.str('body');
    var $scope2182 = (function $_scope_chain_str2183$(self, name_$rn$) {
        var name_$rn$; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2182.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $jfalse2185 = (name_$rn$ === false || !Sk.misceval.isTrue(name_$rn$));
                        if ($jfalse2185) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $ret = Sk.abstr.gattr($scope2182.$const2186, $scope2182.$const2187, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2188 = $ret;
                        var $loadgbl2189 = Sk.misceval.loadname('map', $gbl);
                        var $loadgbl2190 = Sk.misceval.loadname('str', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2182.$const2191, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2192 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2189, [$loadgbl2190, $lattr2192]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2193 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2188, [$call2193]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2194 = $ret;
                        var $binop2195 = Sk.abstr.numberBinOp($call2194, $scope2182.$const2186, 'Add');
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $binop2196 = Sk.abstr.numberBinOp($binop2195, name_$rn$, 'Add');
                        return $binop2196;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ $ret = Sk.abstr.gattr($scope2182.$const2186, $scope2182.$const2187, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2197 = $ret;
                        var $loadgbl2198 = Sk.misceval.loadname('map', $gbl);
                        var $loadgbl2199 = Sk.misceval.loadname('str', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2182.$const2191, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2200 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2198, [$loadgbl2199, $lattr2200]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2201 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2197, [$call2201]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2202 = $ret;
                        return $call2202;
                        $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '_scope_chain_str'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2182.$const2184 = new Sk.builtin.str('\n        Convert the current scope chain to a string representation (divided \n        by "/").\n\n        Returns:\n            str: String representation of the scope chain.\n        ');
    $scope2182.$const2186 = new Sk.builtin.str('/');
    $scope2182.$const2187 = new Sk.builtin.str('join');
    $scope2182.$const2191 = new Sk.builtin.str('scope_chain');
    var $scope2204 = (function $identify_caller2205$(self, node) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2204.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2207 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2208 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2208, $scope2204.$const2209, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2210 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2207, [node, $lattr2210]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2211 = $ret;
                        var $jfalse2212 = ($call2211 === false || !Sk.misceval.isTrue($call2211));
                        if ($jfalse2212) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2204.$const2213, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2214 = $ret;
                        return $lattr2214;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl2215 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2216 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2216, $scope2204.$const2217, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2218 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2215, [node, $lattr2218]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2219 = $ret;
                        var $jfalse2220 = ($call2219 === false || !Sk.misceval.isTrue($call2219));
                        if ($jfalse2220) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2204.$const2221, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2222 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2204.$const2223, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2224 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2222, [$lattr2224]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2225 = $ret;
                        return $call2225;
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 4:
                        /* --- next branch of if --- */ var $loadgbl2226 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2227 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2227, $scope2204.$const2228, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2229 = $ret;
                        var $loadgbl2230 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2230, $scope2204.$const2231, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2232 = $ret;
                        var $elem2233 = $lattr2229;
                        var $elem2234 = $lattr2232;
                        var $loadtuple2235 = new Sk.builtins['tuple']([$elem2233, $elem2234]);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2226, [node, $loadtuple2235]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2236 = $ret;
                        var $jfalse2237 = ($call2236 === false || !Sk.misceval.isTrue($call2236));
                        if ($jfalse2237) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2204.$const2221, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2238 = $ret;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2204.$const2239, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2240 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2238, [$lattr2240]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2241 = $ret;
                        return $call2241;
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ $blk = 3; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'identify_caller'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2204.$const2206 = new Sk.builtin.str("\n        Figures out the variable that was used to kick off this call,\n        which is almost always the relevant Name to track as being updated.\n        If the origin wasn't a Name, nothing will need to be updated so None\n        is returned instead.\n\n        TODO: Is this sufficient?\n\n        Args:\n            node (AST): An AST node\n        Returns:\n            str or None: The name of the variable or None if no origin could\n                         be found.\n        ");
    $scope2204.$const2209 = new Sk.builtin.str('Name');
    $scope2204.$const2213 = new Sk.builtin.str('id');
    $scope2204.$const2217 = new Sk.builtin.str('Call');
    $scope2204.$const2221 = new Sk.builtin.str('identify_caller');
    $scope2204.$const2223 = new Sk.builtin.str('func');
    $scope2204.$const2228 = new Sk.builtin.str('Attribute');
    $scope2204.$const2231 = new Sk.builtin.str('Subscript');
    $scope2204.$const2239 = new Sk.builtin.str('value');
    var $scope2243 = (function $iterate_variable2244$(self, name_$rn$, position) {
        var name_$rn$; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2243.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2243.$const2246, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2247 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2247, [name_$rn$, position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2248 = $ret;
                        return $call2248;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'iterate_variable'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2243.$const2245 = new Sk.builtin.str("\n        Update the variable by iterating through it - this doesn't do anything\n        fancy yet.\n        ");
    $scope2243.$const2246 = new Sk.builtin.str('load_variable');
    var $scope2250 = (function $store_iter_variable2251$(self, name_$rn$, type, position) {
        var name_$rn$, state; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2250.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2250.$const2252, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2253 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2253, [name_$rn$, type, position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2254 = $ret;
                        state = $call2254;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(state, $scope2250.$const2256, $scope2250.$const2255, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        return state;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'store_iter_variable'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2250.$const2252 = new Sk.builtin.str('store_variable');
    $scope2250.$const2255 = new Sk.builtin.str('yes');
    $scope2250.$const2256 = new Sk.builtin.str('read');
    var $scope2258 = (function $return_variable2259$(self, type) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2258.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2258.$const2260, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2261 = $ret;
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2261, [$scope2258.$const2262, type]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2263 = $ret;
                        return $call2263;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'return_variable'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2258.$const2260 = new Sk.builtin.str('store_variable');
    $scope2258.$const2262 = new Sk.builtin.str('*return');
    var $scope2265 = (function $append_variable2266$(self, name_$rn$, type, position) {
        var name_$rn$; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2265.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2265.$const2267, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2268 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2268, [name_$rn$, type, position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2269 = $ret;
                        return $call2269;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'append_variable'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2265.$const2267 = new Sk.builtin.str('store_variable');
    var $scope2271 = (function $store_variable2272$(self, name_$rn$, type, position) {
        var current_path, current_scope, full_name, name_$rn$, new_state, variable; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2271.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        var $compareres2274 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(position, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2274 = $ret;
                        var $jfalse2275 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2275) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- done --- */ var $jfalse2276 = ($compareres2274 === false || !Sk.misceval.isTrue($compareres2274));
                        if ($jfalse2276) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2277, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2278 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2278);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2279 = $ret;
                        position = $call2279;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2280, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2281 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2281, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2282 = $ret;
                        full_name = $call2282;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2283, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2284 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr2284, $scope2271.$const2285, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2286 = $ret;
                        current_path = $lsubscr2286;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2287, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2288 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2288, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2289 = $ret;
                        variable = $call2289;
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2271.$const2290, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2291 = $ret;
                        var $unaryop2292 = Sk.abstr.numberUnaryOp($lattr2291, 'Not');
                        var $jfalse2293 = ($unaryop2292 === false || !Sk.misceval.isTrue($unaryop2292));
                        if ($jfalse2293) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        var $loadgbl2294 = Sk.misceval.loadname('State', $gbl);
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loadlist2295 = new Sk.builtins['list']([]);
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        $ret = Sk.misceval.applyOrSuspend($loadgbl2294, undefined, undefined, ['read', $scope2271.$const2297, 'set', $scope2271.$const2298, 'over', $scope2271.$const2297], [name_$rn$, $loadlist2295, type, $scope2271.$const2296, position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2299 = $ret;
                        new_state = $call2299;
                        if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2300, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2301 = $ret;
                        if (current_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'current_path\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2301, current_path, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2302 = $ret;
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem($lsubscr2302, full_name, new_state, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2352, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2353 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr2353, $scope2271.$const2285, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2354 = $ret;
                        current_scope = $lsubscr2354;
                        if (current_scope === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'current_scope\' referenced before assignment');
                        }
                        var $compareres2355 = null;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2356, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2357 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(current_scope, $lattr2357, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2355 = $ret;
                        var $jfalse2358 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2358) {
                            /*test failed */
                            $blk = 13;
                            continue;
                        }
                        $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- done --- */ var $jfalse2359 = ($compareres2355 === false || !Sk.misceval.isTrue($compareres2355));
                        if ($jfalse2359) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2356, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2360 = $ret;
                        if (current_scope === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'current_scope\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2360, current_scope, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2361 = $ret;
                        $ret = Sk.abstr.gattr($lsubscr2361, $scope2271.$const2362, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2363 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(new_state, $scope2271.$const2320, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2364 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2363, [name_$rn$, $lattr2364]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2365 = $ret;
                        $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- end of if --- */ if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        return new_state;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 4:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2303, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2304 = $ret;
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2271.$const2305, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2306 = $ret;
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2304, [$lattr2306, $scope2271.$const2296, position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2307 = $ret;
                        new_state = $call2307;
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2271.$const2308, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2309 = $ret;
                        var $unaryop2310 = Sk.abstr.numberUnaryOp($lattr2309, 'Not');
                        var $jfalse2311 = ($unaryop2310 === false || !Sk.misceval.isTrue($unaryop2310));
                        if ($jfalse2311) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2312, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2313 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loaddict2316 = new Sk.builtins['dict']([$scope2271.$const2315, name_$rn$]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2313, [$scope2271.$const2314, $loaddict2316]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2317 = $ret;
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ var $loadgbl2318 = Sk.misceval.loadname('are_types_equal', $gbl);
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2271.$const2305, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2319 = $ret;
                        $ret = Sk.abstr.gattr($lattr2319, $scope2271.$const2320, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2321 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2318, [type, $lattr2321]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2322 = $ret;
                        var $unaryop2323 = Sk.abstr.numberUnaryOp($call2322, 'Not');
                        var $jfalse2324 = ($unaryop2323 === false || !Sk.misceval.isTrue($unaryop2323));
                        if ($jfalse2324) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2312, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2325 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2271.$const2305, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2327 = $ret;
                        $ret = Sk.abstr.gattr($lattr2327, $scope2271.$const2320, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2328 = $ret;
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        var $loaddict2332 = new Sk.builtins['dict']([$scope2271.$const2315, name_$rn$, $scope2271.$const2329, $lattr2328, $scope2271.$const2330, type, $scope2271.$const2331, position]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2325, [$scope2271.$const2326, $loaddict2332]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2333 = $ret;
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- end of if --- */ if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(new_state, $scope2271.$const2320, type, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2271.$const2305, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2334 = $ret;
                        $ret = Sk.abstr.gattr($lattr2334, $scope2271.$const2335, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2336 = $ret;
                        var $compareres2337 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2336, $scope2271.$const2298, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2337 = $ret;
                        var $jfalse2338 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2338) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- done --- */ var $boolopsucc2339 = $compareres2337;
                        $boolopsucc2339 = $compareres2337;
                        var $jfalse2340 = ($compareres2337 === false || !Sk.misceval.isTrue($compareres2337));
                        if ($jfalse2340) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2271.$const2305, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2341 = $ret;
                        $ret = Sk.abstr.gattr($lattr2341, $scope2271.$const2342, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2343 = $ret;
                        var $compareres2344 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2343, $scope2271.$const2297, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2344 = $ret;
                        var $jfalse2345 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2345) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        $blk = 11; /* allowing case fallthrough */
                    case 11:
                        /* --- done --- */ $boolopsucc2339 = $compareres2344;
                        var $jfalse2346 = ($compareres2344 === false || !Sk.misceval.isTrue($compareres2344));
                        if ($jfalse2346) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- end of boolop --- */ var $jfalse2347 = ($boolopsucc2339 === false || !Sk.misceval.isTrue($boolopsucc2339));
                        if ($jfalse2347) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(new_state, $scope2271.$const2348, position, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(new_state, $scope2271.$const2349, $scope2271.$const2298, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2271.$const2300, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2350 = $ret;
                        if (current_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'current_path\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2350, current_path, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2351 = $ret;
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem($lsubscr2351, full_name, new_state, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 3; /* jump */
                        continue;
                    case 8:
                        /* --- next branch of if --- */ if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(new_state, $scope2271.$const2335, $scope2271.$const2298, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(new_state, $scope2271.$const2342, $scope2271.$const2297, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 7; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'store_variable'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2271.$const2273 = new Sk.builtin.str('\n        Update the variable with the given name to now have the new type.\n\n        Args:\n            name (str): The unqualified name of the variable. The variable will\n                        be assumed to be in the current scope.\n            type (Type): The new type of this variable.\n        Returns:\n            State: The new state of the variable.\n        ');
    $scope2271.$const2277 = new Sk.builtin.str('locate');
    $scope2271.$const2280 = new Sk.builtin.str('_scope_chain_str');
    $scope2271.$const2283 = new Sk.builtin.str('path_chain');
    $scope2271.$const2285 = new Sk.builtin.int_(0);
    $scope2271.$const2287 = new Sk.builtin.str('find_variable_scope');
    $scope2271.$const2290 = new Sk.builtin.str('exists');
    $scope2271.$const2296 = new Sk.builtin.str('store');
    $scope2271.$const2297 = new Sk.builtin.str('no');
    $scope2271.$const2298 = new Sk.builtin.str('yes');
    $scope2271.$const2300 = new Sk.builtin.str('name_map');
    $scope2271.$const2303 = new Sk.builtin.str('trace_state');
    $scope2271.$const2305 = new Sk.builtin.str('state');
    $scope2271.$const2308 = new Sk.builtin.str('in_scope');
    $scope2271.$const2312 = new Sk.builtin.str('report_issue');
    $scope2271.$const2314 = new Sk.builtin.str('Write out of scope');
    $scope2271.$const2315 = new Sk.builtin.str('name');
    $scope2271.$const2320 = new Sk.builtin.str('type');
    $scope2271.$const2326 = new Sk.builtin.str('Type changes');
    $scope2271.$const2329 = new Sk.builtin.str('old');
    $scope2271.$const2330 = new Sk.builtin.str('new');
    $scope2271.$const2331 = new Sk.builtin.str('position');
    $scope2271.$const2335 = new Sk.builtin.str('set');
    $scope2271.$const2342 = new Sk.builtin.str('read');
    $scope2271.$const2348 = new Sk.builtin.str('over_position');
    $scope2271.$const2349 = new Sk.builtin.str('over');
    $scope2271.$const2352 = new Sk.builtin.str('scope_chain');
    $scope2271.$const2356 = new Sk.builtin.str('class_scopes');
    $scope2271.$const2362 = new Sk.builtin.str('add_attr');
    var $scope2367 = (function $load_variable2368$(self, name_$rn$, position) {
        var current_path, full_name, name_$rn$, new_state, out_of_scope_var, variable; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2367.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2370, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2371 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2371, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2372 = $ret;
                        full_name = $call2372;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2373, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2374 = $ret;
                        $ret = Sk.abstr.objectGetItem($lattr2374, $scope2367.$const2375, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2376 = $ret;
                        current_path = $lsubscr2376;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2377, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2378 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2378, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2379 = $ret;
                        variable = $call2379;
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        var $compareres2380 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(position, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2380 = $ret;
                        var $jfalse2381 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2381) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- done --- */ var $jfalse2382 = ($compareres2380 === false || !Sk.misceval.isTrue($compareres2380));
                        if ($jfalse2382) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2383, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2384 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2384);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2385 = $ret;
                        position = $call2385;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2367.$const2386, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2387 = $ret;
                        var $unaryop2388 = Sk.abstr.numberUnaryOp($lattr2387, 'Not');
                        var $jfalse2389 = ($unaryop2388 === false || !Sk.misceval.isTrue($unaryop2388));
                        if ($jfalse2389) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2390, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2391 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2391, [name_$rn$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2392 = $ret;
                        out_of_scope_var = $call2392;
                        if (out_of_scope_var === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'out_of_scope_var\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(out_of_scope_var, $scope2367.$const2386, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2393 = $ret;
                        var $jfalse2394 = ($lattr2393 === false || !Sk.misceval.isTrue($lattr2393));
                        if ($jfalse2394) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2395, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2396 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loaddict2399 = new Sk.builtins['dict']([$scope2367.$const2398, name_$rn$]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2396, [$scope2367.$const2397, $loaddict2399]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2400 = $ret;
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of if --- */ var $loadgbl2405 = Sk.misceval.loadname('State', $gbl);
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loadlist2406 = new Sk.builtins['list']([]);
                        var $loadgbl2407 = Sk.misceval.loadname('UnknownType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2407);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2408 = $ret;
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        $ret = Sk.misceval.applyOrSuspend($loadgbl2405, undefined, undefined, ['read', $scope2367.$const2410, 'set', $scope2367.$const2411, 'over', $scope2367.$const2411], [name_$rn$, $loadlist2406, $call2408, $scope2367.$const2409, position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2412 = $ret;
                        new_state = $call2412;
                        if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2413, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2414 = $ret;
                        if (current_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'current_path\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2414, current_path, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2415 = $ret;
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem($lsubscr2415, full_name, new_state, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        return new_state;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 4:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2416, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2417 = $ret;
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2367.$const2418, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2419 = $ret;
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2417, [$lattr2419, $scope2367.$const2409, position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2420 = $ret;
                        new_state = $call2420;
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2367.$const2418, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2421 = $ret;
                        $ret = Sk.abstr.gattr($lattr2421, $scope2367.$const2422, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2423 = $ret;
                        var $compareres2424 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2423, $scope2367.$const2411, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2424 = $ret;
                        var $jfalse2425 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2425) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- done --- */ var $jfalse2426 = ($compareres2424 === false || !Sk.misceval.isTrue($compareres2424));
                        if ($jfalse2426) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2395, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2427 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loaddict2428 = new Sk.builtins['dict']([$scope2367.$const2398, name_$rn$]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2427, [$scope2367.$const2402, $loaddict2428]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2429 = $ret;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2367.$const2418, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2430 = $ret;
                        $ret = Sk.abstr.gattr($lattr2430, $scope2367.$const2422, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2431 = $ret;
                        var $compareres2432 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2431, $scope2367.$const2433, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2432 = $ret;
                        var $jfalse2434 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2434) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- done --- */ var $jfalse2435 = ($compareres2432 === false || !Sk.misceval.isTrue($compareres2432));
                        if ($jfalse2435) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2395, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2436 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loaddict2438 = new Sk.builtins['dict']([$scope2367.$const2398, name_$rn$]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2436, [$scope2367.$const2437, $loaddict2438]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2439 = $ret;
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- end of if --- */ if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(new_state, $scope2367.$const2440, $scope2367.$const2410, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2367.$const2441, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2442 = $ret;
                        var $unaryop2443 = Sk.abstr.numberUnaryOp($lattr2442, 'Not');
                        var $jfalse2444 = ($unaryop2443 === false || !Sk.misceval.isTrue($unaryop2443));
                        if ($jfalse2444) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2413, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2445 = $ret;
                        if (current_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'current_path\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2445, current_path, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2446 = $ret;
                        if (variable === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'variable\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(variable, $scope2367.$const2447, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2448 = $ret;
                        $ret = Sk.abstr.objectSetItem($lsubscr2446, $lattr2448, new_state, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 11; /* allowing case fallthrough */
                    case 11:
                        /* --- end of if --- */ $blk = 3; /* jump */
                        continue;
                    case 6:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2395, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2401 = $ret;
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        var $loaddict2403 = new Sk.builtins['dict']([$scope2367.$const2398, name_$rn$]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2401, [$scope2367.$const2402, $loaddict2403]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2404 = $ret;
                        $blk = 5; /* jump */
                        continue;
                    case 12:
                        /* --- next branch of if --- */ if (new_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'new_state\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2367.$const2413, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2449 = $ret;
                        if (current_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'current_path\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2449, current_path, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2450 = $ret;
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem($lsubscr2450, full_name, new_state, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 11; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'load_variable'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2367.$const2369 = new Sk.builtin.str('\n        Retrieve the variable with the given name.\n\n        Args:\n            name (str): The unqualified name of the variable. If the variable is\n                        not found in the current scope or an enclosing sope, all\n                        other scopes will be searched to see if it was read out\n                        of scope.\n        Returns:\n            State: The current state of the variable.\n        ');
    $scope2367.$const2370 = new Sk.builtin.str('_scope_chain_str');
    $scope2367.$const2373 = new Sk.builtin.str('path_chain');
    $scope2367.$const2375 = new Sk.builtin.int_(0);
    $scope2367.$const2377 = new Sk.builtin.str('find_variable_scope');
    $scope2367.$const2383 = new Sk.builtin.str('locate');
    $scope2367.$const2386 = new Sk.builtin.str('exists');
    $scope2367.$const2390 = new Sk.builtin.str('find_variable_out_of_scope');
    $scope2367.$const2395 = new Sk.builtin.str('report_issue');
    $scope2367.$const2397 = new Sk.builtin.str('Read out of scope');
    $scope2367.$const2398 = new Sk.builtin.str('name');
    $scope2367.$const2402 = new Sk.builtin.str('Initialization Problem');
    $scope2367.$const2409 = new Sk.builtin.str('load');
    $scope2367.$const2410 = new Sk.builtin.str('yes');
    $scope2367.$const2411 = new Sk.builtin.str('no');
    $scope2367.$const2413 = new Sk.builtin.str('name_map');
    $scope2367.$const2416 = new Sk.builtin.str('trace_state');
    $scope2367.$const2418 = new Sk.builtin.str('state');
    $scope2367.$const2422 = new Sk.builtin.str('set');
    $scope2367.$const2433 = new Sk.builtin.str('maybe');
    $scope2367.$const2437 = new Sk.builtin.str('Possible Initialization Problem');
    $scope2367.$const2440 = new Sk.builtin.str('read');
    $scope2367.$const2441 = new Sk.builtin.str('in_scope');
    $scope2367.$const2447 = new Sk.builtin.str('scoped_name');
    var $scope2452 = (function $load_module2453$(self, chain) {
        var actual_module, base_module, definitions, e, module, module_names, potential_module; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2452.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (chain === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'chain\' referenced before assignment');
                        }
                        if (chain === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'chain\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(chain, $scope2452.$const2455, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2456 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2456, [$scope2452.$const2457]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2458 = $ret;
                        module_names = $call2458;
                        var $loadgbl2459 = Sk.misceval.loadname('get_builtin_module', $gbl);
                        if (module_names === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'module_names\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem(module_names, $scope2452.$const2460, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2461 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2459, [$lsubscr2461]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2462 = $ret;
                        potential_module = $call2462;
                        if (potential_module === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'potential_module\' referenced before assignment');
                        }
                        var $compareres2463 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(potential_module, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2463 = $ret;
                        var $jfalse2464 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2464) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- done --- */ var $jfalse2465 = ($compareres2463 === false || !Sk.misceval.isTrue($compareres2463));
                        if ($jfalse2465) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (potential_module === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'potential_module\' referenced before assignment');
                        }
                        base_module = potential_module;
                        if (module_names === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'module_names\' referenced before assignment');
                        }
                        var $iter2466 = Sk.abstr.iter(module_names);
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter2466, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next2467 = $ret;
                        if ($next2467 === undefined) {
                            $blk = 5;
                            continue;
                        }
                        module = $next2467;
                        var $loadgbl2468 = Sk.misceval.loadname('isinstance', $gbl);
                        if (base_module === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'base_module\' referenced before assignment');
                        }
                        var $loadgbl2469 = Sk.misceval.loadname('ModuleType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2468, [base_module, $loadgbl2469]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2470 = $ret;
                        var $boolopsucc2471 = $call2470;
                        $boolopsucc2471 = $call2470;
                        var $jfalse2472 = ($call2470 === false || !Sk.misceval.isTrue($call2470));
                        if ($jfalse2472) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        if (module === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'module\' referenced before assignment');
                        }
                        var $compareres2473 = null;
                        if (base_module === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'base_module\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(base_module, $scope2452.$const2474, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2475 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(module, $lattr2475, 'In', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2473 = $ret;
                        var $jfalse2476 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2476) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- done --- */ $boolopsucc2471 = $compareres2473;
                        var $jfalse2477 = ($compareres2473 === false || !Sk.misceval.isTrue($compareres2473));
                        if ($jfalse2477) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- end of boolop --- */ var $jfalse2478 = ($boolopsucc2471 === false || !Sk.misceval.isTrue($boolopsucc2471));
                        if ($jfalse2478) {
                            /*test failed */
                            $blk = 8;
                            continue;
                        }
                        if (base_module === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'base_module\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(base_module, $scope2452.$const2474, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2479 = $ret;
                        if (module === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'module\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2479, module, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2480 = $ret;
                        base_module = $lsubscr2480;
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- end of if --- */ $blk = 4; /* jump */
                        continue;
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ $exc.push(11);
                        var $loadgbl2487 = Sk.misceval.loadname('__import__', $gbl);
                        if (chain === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'chain\' referenced before assignment');
                        }
                        var $loadgbl2488 = Sk.misceval.loadname('globals', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2488);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2489 = $ret;
                        var $loaddict2490 = new Sk.builtins['dict']([]);
                        var $elem2492 = $scope2452.$const2491;
                        var $loadlist2493 = new Sk.builtins['list']([$elem2492]);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2487, [chain, $call2489, $loaddict2490, $loadlist2493]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2494 = $ret;
                        actual_module = $call2494;
                        if (actual_module === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'actual_module\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(actual_module, $scope2452.$const2491, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2495 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2495);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2496 = $ret;
                        definitions = $call2496;
                        var $loadgbl2497 = Sk.misceval.loadname('type_from_json', $gbl);
                        if (definitions === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'definitions\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2497, [definitions]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2498 = $ret;
                        return $call2498;
                        $exc.pop();
                        $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- orelse --- */ $blk = 14; /* allowing case fallthrough */
                    case 14:
                        /* --- end --- */ $blk = 1; /* jump */
                        continue;
                    case 5:
                        /* --- for cleanup --- */ $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- for end --- */ if (base_module === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'base_module\' referenced before assignment');
                        }
                        return base_module;
                        $blk = 1; /* jump */
                        continue;
                    case 8:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2452.$const2481, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2482 = $ret;
                        if (chain === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'chain\' referenced before assignment');
                        }
                        var $loaddict2485 = new Sk.builtins['dict']([$scope2452.$const2484, chain]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2482, [$scope2452.$const2483, $loaddict2485]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2486 = $ret;
                        $blk = 7; /* jump */
                        continue;
                    case 11:
                        /* --- except_0_ --- */ var $loadgbl2499 = Sk.misceval.loadname('Exception', $gbl);
                        var $instance2500 = Sk.misceval.isTrue(Sk.builtin.isinstance($err, $loadgbl2499));
                        var $jfalse2501 = ($instance2500 === false || !Sk.misceval.isTrue($instance2500));
                        if ($jfalse2501) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        e = $err;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2452.$const2481, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2502 = $ret;
                        if (chain === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'chain\' referenced before assignment');
                        }
                        var $loadgbl2503 = Sk.misceval.loadname('str', $gbl);
                        if (e === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'e\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2503, [e]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2504 = $ret;
                        var $loaddict2506 = new Sk.builtins['dict']([$scope2452.$const2484, chain, $scope2452.$const2505, $call2504]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2502, [$scope2452.$const2483, $loaddict2506]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2507 = $ret;
                        var $loadgbl2508 = Sk.misceval.loadname('ModuleType', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2508);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2509 = $ret;
                        return $call2509;
                        $blk = 14; /* jump */
                        continue;
                    case 12:
                        /* --- unhandled --- */ throw $err;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'load_module'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2452.$const2454 = new Sk.builtin.str('\n        Finds the module in the set of available modules.\n\n        Args:\n            chain (str): A chain of module imports (e.g., "matplotlib.pyplot")\n        Returns:\n            ModuleType: The specific module with its members, or an empty\n                        module type.\n        ');
    $scope2452.$const2455 = new Sk.builtin.str('split');
    $scope2452.$const2457 = new Sk.builtin.str('.');
    $scope2452.$const2460 = new Sk.builtin.int_(0);
    $scope2452.$const2474 = new Sk.builtin.str('submodules');
    $scope2452.$const2481 = new Sk.builtin.str('report_issue');
    $scope2452.$const2483 = new Sk.builtin.str('Module not found');
    $scope2452.$const2484 = new Sk.builtin.str('name');
    $scope2452.$const2491 = new Sk.builtin.str('_tifa_definitions');
    $scope2452.$const2505 = new Sk.builtin.str('error');
    var $scope2511 = (function $combine_states2512$(self, left, right) {
        var state; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2511.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        var $loadgbl2513 = Sk.misceval.loadname('State', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2514, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2515 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        var $elem2516 = left;
                        var $loadlist2517 = new Sk.builtins['list']([$elem2516]);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2518, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2519 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2511.$const2521, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2522 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2522);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2523 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2524, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2525 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2526, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2527 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2528, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2529 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2530, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2531 = $ret;
                        $ret = Sk.misceval.applyOrSuspend($loadgbl2513, undefined, undefined, ['read', $lattr2525, 'set', $lattr2527, 'over', $lattr2529, 'over_position', $lattr2531], [$lattr2515, $loadlist2517, $lattr2519, $scope2511.$const2520, $call2523]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2532 = $ret;
                        state = $call2532;
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        var $compareres2533 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(right, Sk.builtin.none.none$, 'Is', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2533 = $ret;
                        var $jfalse2534 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2534) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- done --- */ var $jfalse2535 = ($compareres2533 === false || !Sk.misceval.isTrue($compareres2533));
                        if ($jfalse2535) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        var $res2536 = null;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2524, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2537 = $ret;
                        var $compareres2538 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2537, $scope2511.$const2539, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2538 = $ret;
                        var $jfalse2540 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2540) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- done --- */ var $jfalse2541 = ($compareres2538 === false || !Sk.misceval.isTrue($compareres2538));
                        if ($jfalse2541) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        $res2536 = $scope2511.$const2539;
                        $blk = 5; /* allowing case fallthrough */
                    case 5:
                        /* --- end of ifexp --- */ if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(state, $scope2511.$const2524, $res2536, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $res2543 = null;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2526, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2544 = $ret;
                        var $compareres2545 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2544, $scope2511.$const2539, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2545 = $ret;
                        var $jfalse2546 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2546) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- done --- */ var $jfalse2547 = ($compareres2545 === false || !Sk.misceval.isTrue($compareres2545));
                        if ($jfalse2547) {
                            /*test failed */
                            $blk = 7;
                            continue;
                        }
                        $res2543 = $scope2511.$const2539;
                        $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- end of ifexp --- */ if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(state, $scope2511.$const2526, $res2543, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $res2548 = null;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2528, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2549 = $ret;
                        var $compareres2550 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2549, $scope2511.$const2539, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2550 = $ret;
                        var $jfalse2551 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2551) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- done --- */ var $jfalse2552 = ($compareres2550 === false || !Sk.misceval.isTrue($compareres2550));
                        if ($jfalse2552) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $res2548 = $scope2511.$const2539;
                        $blk = 11; /* allowing case fallthrough */
                    case 11:
                        /* --- end of ifexp --- */ if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(state, $scope2511.$const2528, $res2548, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        return state;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl2553 = Sk.misceval.loadname('are_types_equal', $gbl);
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2518, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2554 = $ret;
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(right, $scope2511.$const2518, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2555 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2553, [$lattr2554, $lattr2555]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2556 = $ret;
                        var $unaryop2557 = Sk.abstr.numberUnaryOp($call2556, 'Not');
                        var $jfalse2558 = ($unaryop2557 === false || !Sk.misceval.isTrue($unaryop2557));
                        if ($jfalse2558) {
                            /*test failed */
                            $blk = 13;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2511.$const2559, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2560 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2514, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2562 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2518, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2564 = $ret;
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(right, $scope2511.$const2518, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2566 = $ret;
                        var $loaddict2568 = new Sk.builtins['dict']([$scope2511.$const2563, $lattr2562, $scope2511.$const2565, $lattr2564, $scope2511.$const2567, $lattr2566]);
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2560, [$scope2511.$const2561, $loaddict2568]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2569 = $ret;
                        $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- end of if --- */ var $loadgbl2570 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2570, $scope2511.$const2571, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2572 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2524, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2573 = $ret;
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(right, $scope2511.$const2524, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2574 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2572, [$lattr2573, $lattr2574]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2575 = $ret;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(state, $scope2511.$const2524, $call2575, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loadgbl2576 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2576, $scope2511.$const2571, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2577 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2526, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2578 = $ret;
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(right, $scope2511.$const2526, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2579 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2577, [$lattr2578, $lattr2579]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2580 = $ret;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(state, $scope2511.$const2526, $call2580, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $loadgbl2581 = Sk.misceval.loadname('Tifa', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2581, $scope2511.$const2571, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2582 = $ret;
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2528, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2583 = $ret;
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(right, $scope2511.$const2528, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2584 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2582, [$lattr2583, $lattr2584]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2585 = $ret;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(state, $scope2511.$const2528, $call2585, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(left, $scope2511.$const2528, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2586 = $ret;
                        var $compareres2587 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2586, $scope2511.$const2539, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2587 = $ret;
                        var $jfalse2588 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2588) {
                            /*test failed */
                            $blk = 15;
                            continue;
                        }
                        $blk = 15; /* allowing case fallthrough */
                    case 15:
                        /* --- done --- */ var $jfalse2589 = ($compareres2587 === false || !Sk.misceval.isTrue($compareres2587));
                        if ($jfalse2589) {
                            /*test failed */
                            $blk = 14;
                            continue;
                        }
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(right, $scope2511.$const2530, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2590 = $ret;
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(state, $scope2511.$const2530, $lattr2590, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 14; /* allowing case fallthrough */
                    case 14:
                        /* --- end of if --- */ if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope2511.$const2591, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2592 = $ret;
                        $ret = Sk.abstr.gattr($lattr2592, $scope2511.$const2593, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2594 = $ret;
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2594, [right]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2595 = $ret;
                        $blk = 1; /* jump */
                        continue;
                    case 4:
                        /* --- next of ifexp --- */ $res2536 = $scope2511.$const2542;
                        $blk = 5; /* jump */
                        continue;
                    case 7:
                        /* --- next of ifexp --- */ $res2543 = $scope2511.$const2542;
                        $blk = 8; /* jump */
                        continue;
                    case 10:
                        /* --- next of ifexp --- */ $res2548 = $scope2511.$const2542;
                        $blk = 11; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'combine_states'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2511.$const2514 = new Sk.builtin.str('name_$rn$');
    $scope2511.$const2518 = new Sk.builtin.str('type');
    $scope2511.$const2520 = new Sk.builtin.str('branch');
    $scope2511.$const2521 = new Sk.builtin.str('locate');
    $scope2511.$const2524 = new Sk.builtin.str('read');
    $scope2511.$const2526 = new Sk.builtin.str('set');
    $scope2511.$const2528 = new Sk.builtin.str('over');
    $scope2511.$const2530 = new Sk.builtin.str('over_position');
    $scope2511.$const2539 = new Sk.builtin.str('no');
    $scope2511.$const2542 = new Sk.builtin.str('maybe');
    $scope2511.$const2559 = new Sk.builtin.str('report_issue');
    $scope2511.$const2561 = new Sk.builtin.str('Type changes');
    $scope2511.$const2563 = new Sk.builtin.str('name');
    $scope2511.$const2565 = new Sk.builtin.str('old');
    $scope2511.$const2567 = new Sk.builtin.str('new');
    $scope2511.$const2571 = new Sk.builtin.str('match_rso');
    $scope2511.$const2591 = new Sk.builtin.str('trace');
    $scope2511.$const2593 = new Sk.builtin.str('append');
    var $scope2597 = (function $merge_paths2598$(self, parent_path_id, left_path_id, right_path_id) {
        var combined, left_name, left_state, parent_state, right_identifier, right_name, right_state; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2597.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (parent_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parent_path_id\' referenced before assignment');
                        }
                        if (left_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_path_id\' referenced before assignment');
                        }
                        if (right_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_path_id\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2601 = $ret;
                        if (left_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2601, left_path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2602 = $ret;
                        var $iter2603 = Sk.abstr.iter($lsubscr2602);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter2603, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next2604 = $ret;
                        if ($next2604 === undefined) {
                            $blk = 2;
                            continue;
                        }
                        left_name = $next2604;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2605 = $ret;
                        if (left_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2605, left_path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2606 = $ret;
                        if (left_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lsubscr2606, left_name, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2607 = $ret;
                        left_state = $lsubscr2607;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2608, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2609 = $ret;
                        if (right_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_path_id\' referenced before assignment');
                        }
                        if (left_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_name\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2609, [right_path_id, left_name]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2610 = $ret;
                        right_identifier = $call2610;
                        if (right_identifier === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_identifier\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(right_identifier, $scope2597.$const2611, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2612 = $ret;
                        var $jfalse2613 = ($lattr2612 === false || !Sk.misceval.isTrue($lattr2612));
                        if ($jfalse2613) {
                            /*test failed */
                            $blk = 5;
                            continue;
                        }
                        if (right_identifier === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_identifier\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(right_identifier, $scope2597.$const2614, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2615 = $ret;
                        right_state = $lattr2615;
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- end of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2621, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2622 = $ret;
                        if (left_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_state\' referenced before assignment');
                        }
                        if (right_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_state\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2622, [left_state, right_state]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2623 = $ret;
                        combined = $call2623;
                        if (combined === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'combined\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2624 = $ret;
                        if (parent_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parent_path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2624, parent_path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2625 = $ret;
                        if (left_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem($lsubscr2625, left_name, combined, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 1; /* jump */
                        continue;
                    case 2:
                        /* --- for cleanup --- */ $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- for end --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2626 = $ret;
                        if (right_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2626, right_path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2627 = $ret;
                        var $iter2628 = Sk.abstr.iter($lsubscr2627);
                        $blk = 6; /* allowing case fallthrough */
                    case 6:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter2628, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next2629 = $ret;
                        if ($next2629 === undefined) {
                            $blk = 7;
                            continue;
                        }
                        right_name = $next2629;
                        if (right_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_name\' referenced before assignment');
                        }
                        var $compareres2630 = null;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2631 = $ret;
                        if (left_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2631, left_path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2632 = $ret;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(right_name, $lsubscr2632, 'NotIn', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2630 = $ret;
                        var $jfalse2633 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2633) {
                            /*test failed */
                            $blk = 10;
                            continue;
                        }
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- done --- */ var $jfalse2634 = ($compareres2630 === false || !Sk.misceval.isTrue($compareres2630));
                        if ($jfalse2634) {
                            /*test failed */
                            $blk = 9;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2635 = $ret;
                        if (right_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2635, right_path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2636 = $ret;
                        if (right_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lsubscr2636, right_name, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2637 = $ret;
                        right_state = $lsubscr2637;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2638 = $ret;
                        if (parent_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parent_path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2638, parent_path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2639 = $ret;
                        $ret = Sk.abstr.gattr($lsubscr2639, $scope2597.$const2618, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2640 = $ret;
                        if (right_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_name\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2640, [right_name]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2641 = $ret;
                        parent_state = $call2641;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2621, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2642 = $ret;
                        if (right_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_state\' referenced before assignment');
                        }
                        if (parent_state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parent_state\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2642, [right_state, parent_state]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2643 = $ret;
                        combined = $call2643;
                        if (combined === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'combined\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2644 = $ret;
                        if (parent_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parent_path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2644, parent_path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2645 = $ret;
                        if (right_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectSetItem($lsubscr2645, right_name, combined, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- end of if --- */ $blk = 6; /* jump */
                        continue;
                    case 5:
                        /* --- next branch of if --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2597.$const2600, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2616 = $ret;
                        if (parent_path_id === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'parent_path_id\' referenced before assignment');
                        }
                        $ret = Sk.abstr.objectGetItem($lattr2616, parent_path_id, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2617 = $ret;
                        $ret = Sk.abstr.gattr($lsubscr2617, $scope2597.$const2618, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2619 = $ret;
                        if (left_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left_name\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2619, [left_name]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2620 = $ret;
                        right_state = $call2620;
                        $blk = 4; /* jump */
                        continue;
                    case 7:
                        /* --- for cleanup --- */ $blk = 8; /* allowing case fallthrough */
                    case 8:
                        /* --- for end --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'merge_paths'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2597.$const2599 = new Sk.builtin.str('\n        Combines any variables on the left and right path into the parent\n        name space.\n\n        Args:\n            parent_path_id (int): The parent path of the left and right branches\n            left_path_id (int): One of the two paths\n            right_path_id (int): The other of the two paths.\n        ');
    $scope2597.$const2600 = new Sk.builtin.str('name_map');
    $scope2597.$const2608 = new Sk.builtin.str('find_path_parent');
    $scope2597.$const2611 = new Sk.builtin.str('exists');
    $scope2597.$const2614 = new Sk.builtin.str('state');
    $scope2597.$const2618 = new Sk.builtin.str('get');
    $scope2597.$const2621 = new Sk.builtin.str('combine_states');
    var $scope2647 = (function $trace_state2648$(self, state, method, position) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2647.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        if (method === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'method\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        if (state === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'state\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(state, $scope2647.$const2650, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2651 = $ret;
                        if (method === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'method\' referenced before assignment');
                        }
                        if (position === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'position\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2651, [method, position]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2652 = $ret;
                        return $call2652;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'trace_state'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2647.$const2649 = new Sk.builtin.str('\n        Makes a copy of the given state with the given method type.\n\n        Args:\n            state (State): The state to copy (as in, we trace a copy of it!)\n            method (str): The operation being applied to the state.\n        Returns:\n            State: The new State\n        ');
    $scope2647.$const2650 = new Sk.builtin.str('copy');
    var $scope2655 = (function $in_scope2656$(full_name, scope_chain) {
        var checking_scopes, name_scopes, s; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2655.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        if (scope_chain === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'scope_chain\' referenced before assignment');
                        }
                        if (full_name === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'full_name\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(full_name, $scope2655.$const2658, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2659 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2659, [$scope2655.$const2660]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2661 = $ret;
                        var $unaryop2663 = Sk.abstr.numberUnaryOp($scope2655.$const2662, 'USub');
                        var $slice2664 = new Sk.builtins['slice'](Sk.builtin.none.none$, $unaryop2663, Sk.builtin.none.none$);
                        $ret = Sk.abstr.objectGetItem($call2661, $slice2664, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2665 = $ret;
                        name_scopes = $lsubscr2665;
                        var $_compr2666 = new Sk.builtins['list']([]);
                        if (scope_chain === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'scope_chain\' referenced before assignment');
                        }
                        var $unaryop2667 = Sk.abstr.numberUnaryOp($scope2655.$const2662, 'USub');
                        var $slice2668 = new Sk.builtins['slice'](Sk.builtin.none.none$, Sk.builtin.none.none$, $unaryop2667);
                        $ret = Sk.abstr.objectGetItem(scope_chain, $slice2668, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2669 = $ret;
                        var $iter2670 = Sk.abstr.iter($lsubscr2669);
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- list comp start --- */ $ret = Sk.abstr.iternext($iter2670, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next2671 = $ret;
                        if ($next2671 === undefined) {
                            $blk = 3;
                            continue;
                        }
                        s = $next2671;
                        var $loadgbl2672 = Sk.misceval.loadname('str', $gbl);
                        if (s === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'s\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2672, [s]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2673 = $ret;
                        $_compr2666.v.push($call2673);
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- list comp skip --- */ $blk = 1; /* jump */
                        continue;
                    case 3:
                        /* --- list comp anchor --- */ checking_scopes = $_compr2666;
                        if (name_scopes === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_scopes\' referenced before assignment');
                        }
                        var $compareres2674 = null;
                        if (checking_scopes === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'checking_scopes\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(name_scopes, checking_scopes, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2674 = $ret;
                        var $jfalse2675 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2675) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        $blk = 4; /* allowing case fallthrough */
                    case 4:
                        /* --- done --- */ return $compareres2674;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'in_scope'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2655.$const2657 = new Sk.builtin.str('\n        Determine if the fully qualified variable name is in the given scope\n        chain.\n\n        Args:\n            full_name (str): A fully qualified variable name\n            scope_chain (list): A representation of a scope chain.\n        Returns:\n            bool: Whether the variable lives in this scope\n        ');
    $scope2655.$const2658 = new Sk.builtin.str('split');
    $scope2655.$const2660 = new Sk.builtin.str('/');
    $scope2655.$const2662 = new Sk.builtin.int_(1);
    var $scope2678 = (function $match_rso2679$(left, right) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2678.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        var $compareres2680 = null;
                        if (right === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'right\' referenced before assignment');
                        }
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(left, right, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2680 = $ret;
                        var $jfalse2681 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2681) {
                            /*test failed */
                            $blk = 3;
                            continue;
                        }
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- done --- */ var $jfalse2682 = ($compareres2680 === false || !Sk.misceval.isTrue($compareres2680));
                        if ($jfalse2682) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        if (left === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'left\' referenced before assignment');
                        }
                        return left;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ return $scope2678.$const2683;
                        $blk = 1; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'match_rso'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2678.$const2683 = new Sk.builtin.str('maybe');
    var $scope2685 = (function $get_literal2686$(self, node) {
        var elt, subvalue, values; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2685.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.Tifa;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2687 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2688 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2688, $scope2685.$const2689, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2690 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2687, [node, $lattr2690]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2691 = $ret;
                        var $jfalse2692 = ($call2691 === false || !Sk.misceval.isTrue($call2691));
                        if ($jfalse2692) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        var $loadgbl2693 = Sk.misceval.loadname('LiteralNum', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2685.$const2694, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2695 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2693, [$lattr2695]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2696 = $ret;
                        return $call2696;
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- next branch of if --- */ var $loadgbl2697 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2698 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2698, $scope2685.$const2699, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2700 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2697, [node, $lattr2700]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2701 = $ret;
                        var $jfalse2702 = ($call2701 === false || !Sk.misceval.isTrue($call2701));
                        if ($jfalse2702) {
                            /*test failed */
                            $blk = 4;
                            continue;
                        }
                        var $loadgbl2703 = Sk.misceval.loadname('LiteralStr', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2685.$const2704, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2705 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2703, [$lattr2705]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2706 = $ret;
                        return $call2706;
                        $blk = 3; /* allowing case fallthrough */
                    case 3:
                        /* --- end of if --- */ $blk = 1; /* jump */
                        continue;
                    case 4:
                        /* --- next branch of if --- */ var $loadgbl2707 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2708 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2708, $scope2685.$const2709, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2710 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2707, [node, $lattr2710]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2711 = $ret;
                        var $jfalse2712 = ($call2711 === false || !Sk.misceval.isTrue($call2711));
                        if ($jfalse2712) {
                            /*test failed */
                            $blk = 6;
                            continue;
                        }
                        var $loadlist2713 = new Sk.builtins['list']([]);
                        values = $loadlist2713;
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2685.$const2714, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2715 = $ret;
                        var $iter2716 = Sk.abstr.iter($lattr2715);
                        $blk = 7; /* allowing case fallthrough */
                    case 7:
                        /* --- for start --- */ $ret = Sk.abstr.iternext($iter2716, false);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $next2717 = $ret;
                        if ($next2717 === undefined) {
                            $blk = 8;
                            continue;
                        }
                        elt = $next2717;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2685.$const2718, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2719 = $ret;
                        if (elt === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'elt\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2719, [elt]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2720 = $ret;
                        subvalue = $call2720;
                        if (subvalue === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'subvalue\' referenced before assignment');
                        }
                        var $compareres2721 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool(subvalue, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2721 = $ret;
                        var $jfalse2722 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2722) {
                            /*test failed */
                            $blk = 12;
                            continue;
                        }
                        $blk = 12; /* allowing case fallthrough */
                    case 12:
                        /* --- done --- */ var $jfalse2723 = ($compareres2721 === false || !Sk.misceval.isTrue($compareres2721));
                        if ($jfalse2723) {
                            /*test failed */
                            $blk = 11;
                            continue;
                        }
                        if (values === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'values\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(values, $scope2685.$const2724, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2725 = $ret;
                        if (subvalue === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'subvalue\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2725, [subvalue]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2726 = $ret;
                        $blk = 10; /* allowing case fallthrough */
                    case 10:
                        /* --- end of if --- */ $blk = 7; /* jump */
                        continue;
                    case 5:
                        /* --- end of if --- */ $blk = 3; /* jump */
                        continue;
                    case 6:
                        /* --- next branch of if --- */ var $loadgbl2729 = Sk.misceval.loadname('isinstance', $gbl);
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        var $loadgbl2730 = Sk.misceval.loadname('ast', $gbl);
                        $ret = Sk.abstr.gattr($loadgbl2730, $scope2685.$const2731, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2732 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2729, [node, $lattr2732]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2733 = $ret;
                        var $jfalse2734 = ($call2733 === false || !Sk.misceval.isTrue($call2733));
                        if ($jfalse2734) {
                            /*test failed */
                            $blk = 13;
                            continue;
                        }
                        if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2685.$const2735, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2736 = $ret;
                        var $compareres2737 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2736, $scope2685.$const2738, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2737 = $ret;
                        var $jfalse2739 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2739) {
                            /*test failed */
                            $blk = 16;
                            continue;
                        }
                        $blk = 16; /* allowing case fallthrough */
                    case 16:
                        /* --- done --- */ var $jfalse2740 = ($compareres2737 === false || !Sk.misceval.isTrue($compareres2737));
                        if ($jfalse2740) {
                            /*test failed */
                            $blk = 15;
                            continue;
                        }
                        var $loadgbl2741 = Sk.misceval.loadname('LiteralNone', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2741);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2742 = $ret;
                        return $call2742;
                        $blk = 14; /* allowing case fallthrough */
                    case 14:
                        /* --- end of if --- */ $blk = 13; /* allowing case fallthrough */
                    case 13:
                        /* --- end of if --- */ $blk = 5; /* jump */
                        continue;
                    case 8:
                        /* --- for cleanup --- */ $blk = 9; /* allowing case fallthrough */
                    case 9:
                        /* --- for end --- */ var $loadgbl2727 = Sk.misceval.loadname('LiteralTuple', $gbl);
                        if (values === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'values\' referenced before assignment');
                        }
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2727, [values]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2728 = $ret;
                        return $call2728;
                        $blk = 5; /* jump */
                        continue;
                    case 11:
                        /* --- next branch of if --- */ return Sk.builtin.none.none$;
                        $blk = 10; /* jump */
                        continue;
                    case 15:
                        /* --- next branch of if --- */ if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2685.$const2735, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2743 = $ret;
                        var $compareres2744 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2743, $scope2685.$const2745, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2744 = $ret;
                        var $jfalse2746 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2746) {
                            /*test failed */
                            $blk = 19;
                            continue;
                        }
                        $blk = 19; /* allowing case fallthrough */
                    case 19:
                        /* --- done --- */ var $jfalse2747 = ($compareres2744 === false || !Sk.misceval.isTrue($compareres2744));
                        if ($jfalse2747) {
                            /*test failed */
                            $blk = 18;
                            continue;
                        }
                        var $loadgbl2748 = Sk.misceval.loadname('LiteralBool', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2748, [Sk.builtin.bool.false$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2749 = $ret;
                        return $call2749;
                        $blk = 17; /* allowing case fallthrough */
                    case 17:
                        /* --- end of if --- */ $blk = 14; /* jump */
                        continue;
                    case 18:
                        /* --- next branch of if --- */ if (node === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'node\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(node, $scope2685.$const2735, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2750 = $ret;
                        var $compareres2751 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2750, $scope2685.$const2752, 'Eq', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2751 = $ret;
                        var $jfalse2753 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2753) {
                            /*test failed */
                            $blk = 21;
                            continue;
                        }
                        $blk = 21; /* allowing case fallthrough */
                    case 21:
                        /* --- done --- */ var $jfalse2754 = ($compareres2751 === false || !Sk.misceval.isTrue($compareres2751));
                        if ($jfalse2754) {
                            /*test failed */
                            $blk = 20;
                            continue;
                        }
                        var $loadgbl2755 = Sk.misceval.loadname('LiteralBool', $gbl);
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2755, [Sk.builtin.bool.true$]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2756 = $ret;
                        return $call2756;
                        $blk = 20; /* allowing case fallthrough */
                    case 20:
                        /* --- end of if --- */ $blk = 17; /* jump */
                        continue;
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: 'get_literal'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2685.$const2689 = new Sk.builtin.str('Num');
    $scope2685.$const2694 = new Sk.builtin.str('n');
    $scope2685.$const2699 = new Sk.builtin.str('Str');
    $scope2685.$const2704 = new Sk.builtin.str('s');
    $scope2685.$const2709 = new Sk.builtin.str('Tuple');
    $scope2685.$const2714 = new Sk.builtin.str('elts');
    $scope2685.$const2718 = new Sk.builtin.str('get_literal');
    $scope2685.$const2724 = new Sk.builtin.str('append');
    $scope2685.$const2731 = new Sk.builtin.str('Name');
    $scope2685.$const2735 = new Sk.builtin.str('id');
    $scope2685.$const2738 = new Sk.builtin.str('None');
    $scope2685.$const2745 = new Sk.builtin.str('False');
    $scope2685.$const2752 = new Sk.builtin.str('True');
    var $scope2758 = (function $NewPath$class_outer($globals, $locals, $cell) {
        var $gbl = $globals,
            $loc = $locals;
        $free = $globals;
        (function $NewPath$_closure($cell) {
            var $blk = 0,
                $exc = [],
                $ret = undefined,
                $postfinally = undefined,
                $currLineNo = undefined,
                $currColNo = undefined;
            $currSource = undefined;
            if (typeof Sk.execStart === 'undefined') {
                Sk.execStart = Date.now();
                Sk.execPaused = 0
            }
            while (true) {
                try {
                    var $dateNow = Date.now();
                    if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                        throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                    }
                    switch ($blk) {
                        case 0:
                            /* --- class entry --- */ $scope2760.co_name = new Sk.builtins['str']('__init__');
                            $scope2760.co_varnames = ['self', 'tifa', 'origin_path', 'name'];
                            var $funcobj2766 = new Sk.builtins['function']($scope2760, $gbl);
                            $loc.__init__ = $funcobj2766;
                            $scope2767.co_name = new Sk.builtins['str']('__enter__');
                            $scope2767.co_varnames = ['self'];
                            var $funcobj2809 = new Sk.builtins['function']($scope2767, $gbl);
                            $loc.__enter__ = $funcobj2809;
                            $scope2810.co_name = new Sk.builtins['str']('__exit__');
                            $scope2810.co_varnames = ['self', 'type', 'value', 'traceback'];
                            var $funcobj2825 = new Sk.builtins['function']($scope2810, $gbl);
                            $loc.__exit__ = $funcobj2825;
                            return;
                            throw new Sk.builtin.SystemError('internal error: unterminated block');
                    }
                } catch (err) {
                    if (err instanceof Sk.builtin.TimeLimitError) {
                        Sk.execStart = Date.now();
                        Sk.execPaused = 0
                    }
                    if (!(err instanceof Sk.builtin.BaseException)) {
                        err = new Sk.builtin.ExternalError(err);
                    }
                    Sk.err = err;
                    err.traceback.push({
                        lineno: $currLineNo,
                        colno: $currColNo,
                        source: $currSource,
                        filename: 'tifa',
                        scope: 'NewPath'
                    });
                    if ($exc.length > 0) {
                        $err = err;
                        $blk = $exc.pop();
                        continue
                    } else {
                        throw err;
                    }
                }
            }
        }).call(null, $cell);
    });
    $scope2758.$const2759 = new Sk.builtin.str("\n        Context manager for entering and leaving execution paths (e.g., if\n        statements).)\n\n        Args:\n            tifa (Tifa): The tifa instance, so we can modify some of its\n                         properties that track variables and paths.\n            origin_path (int): The path ID parent to this one.\n            name (str): The symbolic name of this path, typically 'i' for an IF\n                        body and 'e' for ELSE body.\n\n        Fields:\n            id (int): The path ID of this path\n        ");
    var $scope2760 = (function $__init__2761$(self, tifa, origin_path, name_$rn$) {
        var name_$rn$; /* locals */
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2760.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.NewPath;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (tifa === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'tifa\' referenced before assignment');
                        }
                        if (origin_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'origin_path\' referenced before assignment');
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (tifa === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'tifa\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope2760.$const2762, tifa, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (name_$rn$ === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'name_$rn$\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope2760.$const2763, name_$rn$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (origin_path === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'origin_path\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope2760.$const2764, origin_path, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope2760.$const2765, Sk.builtin.none.none$, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '__init__'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2760.$const2762 = new Sk.builtin.str('tifa');
    $scope2760.$const2763 = new Sk.builtin.str('name_$rn$');
    $scope2760.$const2764 = new Sk.builtin.str('origin_path');
    $scope2760.$const2765 = new Sk.builtin.str('id');
    var $scope2767 = (function $__enter__2768$(self) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2767.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.NewPath;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2769, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2770 = $ret;
                        $ret = Sk.abstr.gattr($lattr2770, $scope2767.$const2771, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2772 = $ret;
                        var $inplbinopattr2774 = Sk.abstr.numberInplaceBinOp($lattr2772, $scope2767.$const2773, 'Add');
                        $ret = undefined;
                        if ($inplbinopattr2774 !== undefined) {
                            $ret = Sk.abstr.sattr($lattr2770, $scope2767.$const2771, $inplbinopattr2774, true);
                        }
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2769, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2775 = $ret;
                        $ret = Sk.abstr.gattr($lattr2775, $scope2767.$const2771, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2776 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope2767.$const2777, $lattr2776, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2769, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2778 = $ret;
                        $ret = Sk.abstr.gattr($lattr2778, $scope2767.$const2779, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2780 = $ret;
                        $ret = Sk.abstr.gattr($lattr2780, $scope2767.$const2781, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2782 = $ret;
                        var $loadgbl2783 = Sk.misceval.loadname('str', $gbl);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2777, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2784 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($loadgbl2783, [$lattr2784]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2785 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2786, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2787 = $ret;
                        var $binop2788 = Sk.abstr.numberBinOp($call2785, $lattr2787, 'Add');
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2782, [$binop2788]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2789 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2769, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2790 = $ret;
                        $ret = Sk.abstr.gattr($lattr2790, $scope2767.$const2791, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2792 = $ret;
                        $ret = Sk.abstr.gattr($lattr2792, $scope2767.$const2793, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2794 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2777, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2796 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2794, [$scope2767.$const2795, $lattr2796]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2797 = $ret;
                        var $loaddict2798 = new Sk.builtins['dict']([]);
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2769, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2799 = $ret;
                        $ret = Sk.abstr.gattr($lattr2799, $scope2767.$const2800, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2801 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2777, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2802 = $ret;
                        $ret = Sk.abstr.objectSetItem($lattr2801, $lattr2802, $loaddict2798, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2803, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2804 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2769, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2805 = $ret;
                        $ret = Sk.abstr.gattr($lattr2805, $scope2767.$const2806, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2807 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2767.$const2777, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2808 = $ret;
                        $ret = Sk.abstr.objectSetItem($lattr2807, $lattr2808, $lattr2804, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '__enter__'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2767.$const2769 = new Sk.builtin.str('tifa');
    $scope2767.$const2771 = new Sk.builtin.str('path_id');
    $scope2767.$const2773 = new Sk.builtin.int_(1);
    $scope2767.$const2777 = new Sk.builtin.str('id');
    $scope2767.$const2779 = new Sk.builtin.str('path_names');
    $scope2767.$const2781 = new Sk.builtin.str('append');
    $scope2767.$const2786 = new Sk.builtin.str('name_$rn$');
    $scope2767.$const2791 = new Sk.builtin.str('path_chain');
    $scope2767.$const2793 = new Sk.builtin.str('insert');
    $scope2767.$const2795 = new Sk.builtin.int_(0);
    $scope2767.$const2800 = new Sk.builtin.str('name_map');
    $scope2767.$const2803 = new Sk.builtin.str('origin_path');
    $scope2767.$const2806 = new Sk.builtin.str('path_parents');
    var $scope2810 = (function $__exit__2811$(self, type, value, traceback) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2810.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.NewPath;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value\' referenced before assignment');
                        }
                        if (traceback === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'traceback\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2810.$const2812, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2813 = $ret;
                        $ret = Sk.abstr.gattr($lattr2813, $scope2810.$const2814, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2815 = $ret;
                        $ret = Sk.abstr.gattr($lattr2815, $scope2810.$const2816, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2817 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2817);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2818 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2810.$const2812, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2819 = $ret;
                        $ret = Sk.abstr.gattr($lattr2819, $scope2810.$const2820, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2821 = $ret;
                        $ret = Sk.abstr.gattr($lattr2821, $scope2810.$const2816, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2822 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2822, [$scope2810.$const2823]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2824 = $ret;
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '__exit__'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2810.$const2812 = new Sk.builtin.str('tifa');
    $scope2810.$const2814 = new Sk.builtin.str('path_names');
    $scope2810.$const2816 = new Sk.builtin.str('pop');
    $scope2810.$const2820 = new Sk.builtin.str('path_chain');
    $scope2810.$const2823 = new Sk.builtin.int_(0);
    var $scope2827 = (function $NewScope$class_outer($globals, $locals, $cell) {
        var $gbl = $globals,
            $loc = $locals;
        $free = $globals;
        (function $NewScope$_closure($cell) {
            var $blk = 0,
                $exc = [],
                $ret = undefined,
                $postfinally = undefined,
                $currLineNo = undefined,
                $currColNo = undefined;
            $currSource = undefined;
            if (typeof Sk.execStart === 'undefined') {
                Sk.execStart = Date.now();
                Sk.execPaused = 0
            }
            while (true) {
                try {
                    var $dateNow = Date.now();
                    if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                        throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                    }
                    switch ($blk) {
                        case 0:
                            /* --- class entry --- */ $scope2829.co_name = new Sk.builtins['str']('__init__');
                            $scope2829.$defaults = [Sk.builtin.none.none$];
                            $scope2829.co_varnames = ['self', 'tifa', 'definitions_scope_chain', 'class_type'];
                            var $funcobj2834 = new Sk.builtins['function']($scope2829, $gbl);
                            $loc.__init__ = $funcobj2834;
                            $scope2835.co_name = new Sk.builtins['str']('__enter__');
                            $scope2835.co_varnames = ['self'];
                            var $funcobj2876 = new Sk.builtins['function']($scope2835, $gbl);
                            $loc.__enter__ = $funcobj2876;
                            $scope2877.co_name = new Sk.builtins['str']('__exit__');
                            $scope2877.co_varnames = ['self', 'type', 'value', 'traceback'];
                            var $funcobj2894 = new Sk.builtins['function']($scope2877, $gbl);
                            $loc.__exit__ = $funcobj2894;
                            return;
                            throw new Sk.builtin.SystemError('internal error: unterminated block');
                    }
                } catch (err) {
                    if (err instanceof Sk.builtin.TimeLimitError) {
                        Sk.execStart = Date.now();
                        Sk.execPaused = 0
                    }
                    if (!(err instanceof Sk.builtin.BaseException)) {
                        err = new Sk.builtin.ExternalError(err);
                    }
                    Sk.err = err;
                    err.traceback.push({
                        lineno: $currLineNo,
                        colno: $currColNo,
                        source: $currSource,
                        filename: 'tifa',
                        scope: 'NewScope'
                    });
                    if ($exc.length > 0) {
                        $err = err;
                        $blk = $exc.pop();
                        continue
                    } else {
                        throw err;
                    }
                }
            }
        }).call(null, $cell);
    });
    $scope2827.$const2828 = new Sk.builtin.str('\n        Context manager for entering and leaving scopes (e.g., inside of\n        function calls).\n\n        Args:\n            tifa (Tifa): The tifa instance, so we can modify some of its\n                         properties that track variables and paths.\n            definitions_scope_chain (list of int): The scope chain of the\n                                                   definition\n        ');
    var $scope2829 = (function $__init__2830$(self, tifa, definitions_scope_chain, class_type) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2829.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.NewScope;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (tifa === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'tifa\' referenced before assignment');
                        }
                        if (definitions_scope_chain === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'definitions_scope_chain\' referenced before assignment');
                        }
                        if (class_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'class_type\' referenced before assignment');
                        }
                        if (tifa === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'tifa\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope2829.$const2831, tifa, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (definitions_scope_chain === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'definitions_scope_chain\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope2829.$const2832, definitions_scope_chain, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (class_type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'class_type\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope2829.$const2833, class_type, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '__init__'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2829.$const2831 = new Sk.builtin.str('tifa');
    $scope2829.$const2832 = new Sk.builtin.str('definitions_scope_chain');
    $scope2829.$const2833 = new Sk.builtin.str('class_type');
    var $scope2835 = (function $__enter__2836$(self) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2835.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.NewScope;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2837, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2838 = $ret;
                        $ret = Sk.abstr.gattr($lattr2838, $scope2835.$const2839, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2840 = $ret;
                        var $slice2841 = new Sk.builtins['slice'](Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$);
                        $ret = Sk.abstr.objectGetItem($lattr2840, $slice2841, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2842 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.sattr(self, $scope2835.$const2843, $lsubscr2842, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2844, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2845 = $ret;
                        var $slice2846 = new Sk.builtins['slice'](Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$);
                        $ret = Sk.abstr.objectGetItem($lattr2845, $slice2846, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lsubscr2847 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2837, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2848 = $ret;
                        $ret = Sk.abstr.sattr($lattr2848, $scope2835.$const2839, $lsubscr2847, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2837, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2849 = $ret;
                        $ret = Sk.abstr.gattr($lattr2849, $scope2835.$const2850, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2851 = $ret;
                        var $inplbinopattr2853 = Sk.abstr.numberInplaceBinOp($lattr2851, $scope2835.$const2852, 'Add');
                        $ret = undefined;
                        if ($inplbinopattr2853 !== undefined) {
                            $ret = Sk.abstr.sattr($lattr2849, $scope2835.$const2850, $inplbinopattr2853, true);
                        }
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2837, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2854 = $ret;
                        $ret = Sk.abstr.gattr($lattr2854, $scope2835.$const2839, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2855 = $ret;
                        $ret = Sk.abstr.gattr($lattr2855, $scope2835.$const2856, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2857 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2837, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2859 = $ret;
                        $ret = Sk.abstr.gattr($lattr2859, $scope2835.$const2850, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2860 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2857, [$scope2835.$const2858, $lattr2860]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2861 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2862, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2863 = $ret;
                        var $compareres2864 = null;
                        $ret = Sk.builtin.bool(Sk.misceval.richCompareBool($lattr2863, Sk.builtin.none.none$, 'IsNot', true));
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $compareres2864 = $ret;
                        var $jfalse2865 = ($ret === false || !Sk.misceval.isTrue($ret));
                        if ($jfalse2865) {
                            /*test failed */
                            $blk = 2;
                            continue;
                        }
                        $blk = 2; /* allowing case fallthrough */
                    case 2:
                        /* --- done --- */ var $jfalse2866 = ($compareres2864 === false || !Sk.misceval.isTrue($compareres2864));
                        if ($jfalse2866) {
                            /*test failed */
                            $blk = 1;
                            continue;
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2837, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2867 = $ret;
                        $ret = Sk.abstr.gattr($lattr2867, $scope2835.$const2850, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2868 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2862, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2869 = $ret;
                        $ret = Sk.abstr.sattr($lattr2869, $scope2835.$const2850, $lattr2868, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2862, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2870 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2837, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2871 = $ret;
                        $ret = Sk.abstr.gattr($lattr2871, $scope2835.$const2872, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2873 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2835.$const2837, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2874 = $ret;
                        $ret = Sk.abstr.gattr($lattr2874, $scope2835.$const2850, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2875 = $ret;
                        $ret = Sk.abstr.objectSetItem($lattr2873, $lattr2875, $lattr2870, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        $blk = 1; /* allowing case fallthrough */
                    case 1:
                        /* --- end of if --- */ return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '__enter__'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2835.$const2837 = new Sk.builtin.str('tifa');
    $scope2835.$const2839 = new Sk.builtin.str('scope_chain');
    $scope2835.$const2843 = new Sk.builtin.str('old_scope');
    $scope2835.$const2844 = new Sk.builtin.str('definitions_scope_chain');
    $scope2835.$const2850 = new Sk.builtin.str('scope_id');
    $scope2835.$const2852 = new Sk.builtin.int_(1);
    $scope2835.$const2856 = new Sk.builtin.str('insert');
    $scope2835.$const2858 = new Sk.builtin.int_(0);
    $scope2835.$const2862 = new Sk.builtin.str('class_type');
    $scope2835.$const2872 = new Sk.builtin.str('class_scopes');
    var $scope2877 = (function $__exit__2878$(self, type, value, traceback) {
        var $blk = 0,
            $exc = [],
            $loc = {},
            $cell = {},
            $gbl = this,
            $err = undefined,
            $ret = undefined,
            $postfinally = undefined,
            $currLineNo = undefined,
            $currColNo = undefined;
        $currSource = undefined;
        if (typeof Sk.execStart === 'undefined') {
            Sk.execStart = Date.now();
            Sk.execPaused = 0
        }
        if ($scope2877.$wakingSuspension !== undefined) {
            $wakeFromSuspension();
        } else {}
        $gbl.__class__ = this.NewScope;
        while (true) {
            try {
                var $dateNow = Date.now();
                if (Sk.execLimit !== null && $dateNow - Sk.execStart - Sk.execPaused > Sk.execLimit) {
                    throw new Sk.builtin.TimeLimitError(Sk.timeoutMsg())
                }
                switch ($blk) {
                    case 0:
                        /* --- codeobj entry --- */ if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        if (type === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'type\' referenced before assignment');
                        }
                        if (value === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'value\' referenced before assignment');
                        }
                        if (traceback === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'traceback\' referenced before assignment');
                        }
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2877.$const2879, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2880 = $ret;
                        $ret = Sk.abstr.gattr($lattr2880, $scope2877.$const2881, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2882 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2882);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2883 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2877.$const2879, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2884 = $ret;
                        $ret = Sk.abstr.gattr($lattr2884, $scope2877.$const2885, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2886 = $ret;
                        $ret = Sk.abstr.gattr($lattr2886, $scope2877.$const2887, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2888 = $ret;
                        $ret = Sk.misceval.callsimOrSuspendArray($lattr2888, [$scope2877.$const2889]);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $call2890 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2877.$const2891, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2892 = $ret;
                        if (self === undefined) {
                            throw new Sk.builtin.UnboundLocalError('local variable \'self\' referenced before assignment');
                        }
                        $ret = Sk.abstr.gattr(self, $scope2877.$const2879, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        var $lattr2893 = $ret;
                        $ret = Sk.abstr.sattr($lattr2893, $scope2877.$const2885, $lattr2892, true);
                        if ($ret && $ret.$isSuspension) {
                            $ret = Sk.misceval.retryOptionalSuspensionOrThrow($ret);
                        }
                        return Sk.builtin.none.none$;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if (err instanceof Sk.builtin.TimeLimitError) {
                    Sk.execStart = Date.now();
                    Sk.execPaused = 0
                }
                if (!(err instanceof Sk.builtin.BaseException)) {
                    err = new Sk.builtin.ExternalError(err);
                }
                Sk.err = err;
                err.traceback.push({
                    lineno: $currLineNo,
                    colno: $currColNo,
                    source: $currSource,
                    filename: 'tifa',
                    scope: '__exit__'
                });
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue
                } else {
                    throw err;
                }
            }
        }
    });
    $scope2877.$const2879 = new Sk.builtin.str('tifa');
    $scope2877.$const2881 = new Sk.builtin.str('_finish_scope');
    $scope2877.$const2885 = new Sk.builtin.str('scope_chain');
    $scope2877.$const2887 = new Sk.builtin.str('pop');
    $scope2877.$const2889 = new Sk.builtin.int_(0);
    $scope2877.$const2891 = new Sk.builtin.str('old_scope');
    return $scope0;
}();